package com.sonicbase.procedure;

import com.sonicbase.common.ComArray;
import com.sonicbase.common.ComObject;
import com.sonicbase.common.DatabaseCommon;
import com.sonicbase.schema.TableSchema;
import com.sonicbase.util.ClientTestUtils;
import org.testng.annotations.Test;

import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;

import static org.testng.Assert.assertEquals;

public class RecordImplTest {

  @Test
  public void test() throws UnsupportedEncodingException {

    TableSchema tableSchema = ClientTestUtils.createTable();
    DatabaseCommon common = new DatabaseCommon();
    common.getTables("test").put(tableSchema.getName(), tableSchema);
    common.getTablesById("test").put(tableSchema.getTableId(), tableSchema);
    byte[][] records = ClientTestUtils.createRecords(common, tableSchema, 10);

    RecordImpl record = new RecordImpl("test", common, (short)100, "test", tableSchema, new com.sonicbase.common.Record("test", common, records[0]));
    assertEquals((long)record.getLong("field1"), 200L);
    assertEquals(record.getString("field2"), "0-value");
    assertEquals(record.getTimestamp("field3"), new Timestamp(200));
    assertEquals(record.getInt("field4"), 1200);
    assertEquals((short)record.getShort("field5"), (short)0);
    assertEquals((byte)record.getByte("field6"), (byte)0);
    assertEquals(record.getString("field7"), "0-value");
    assertEquals(record.getString("field8"), "0-value");
    assertEquals(record.getDouble("field9"), 0d);
    assertEquals(record.getFloat("field10"), 0f);
    assertEquals(record.getDouble("field11"), 0d);
    assertEquals(record.getBoolean("field12"), true);
    assertEquals(record.getBoolean("field13"), true);
    assertEquals(record.getString("field14"), "0-value");
    assertEquals(record.getString("field15"), "0-value");
    assertEquals(record.getString("field16"), "0-value");
    assertEquals(record.getString("field17"), "0-value");
    assertEquals(record.getString("field18"), "0-value");
    assertEquals(record.getString("field19"), "0-value");
    assertEquals(record.getBytes("field20"), "0-value".getBytes("utf-8"));
    assertEquals(record.getBytes("field21"), "0-value".getBytes("utf-8"));
    assertEquals(record.getBytes("field22"), "0-value".getBytes("utf-8"));
    assertEquals(record.getBigDecimal("field23", 10), new BigDecimal(0));
    assertEquals(record.getBigDecimal("field24", 10), new BigDecimal(0));
    assertEquals(record.getDate("field25"), new Date(1900, 10, 1));
    assertEquals(record.getTime("field26"), new Time(1, 0, 0));
    assertEquals(record.getTimestamp("field27"), new Timestamp(0));

    ComObject cobj = record.serialize();

    record = new RecordImpl(common, cobj);

    assertEquals((long)record.getLong("field1"), 200L);
    assertEquals(record.getString("field2"), "0-value");
    assertEquals(record.getTimestamp("field3"), new Timestamp(200));
    assertEquals(record.getInt("field4"), 1200);
    assertEquals((short)record.getShort("field5"), (short)0);
    assertEquals((byte)record.getByte("field6"), (byte)0);
    assertEquals(record.getString("field7"), "0-value");
    assertEquals(record.getString("field8"), "0-value");
    assertEquals(record.getDouble("field9"), 0d);
    assertEquals(record.getFloat("field10"), 0f);
    assertEquals(record.getDouble("field11"), 0d);
    assertEquals(record.getBoolean("field12"), true);
    assertEquals(record.getBoolean("field13"), true);
    assertEquals(record.getString("field14"), "0-value");
    assertEquals(record.getString("field15"), "0-value");
    assertEquals(record.getString("field16"), "0-value");
    assertEquals(record.getString("field17"), "0-value");
    assertEquals(record.getString("field18"), "0-value");
    assertEquals(record.getString("field19"), "0-value");
    assertEquals(record.getBytes("field20"), "0-value".getBytes("utf-8"));
    assertEquals(record.getBytes("field21"), "0-value".getBytes("utf-8"));
    assertEquals(record.getBytes("field22"), "0-value".getBytes("utf-8"));
    assertEquals(record.getBigDecimal("field23", 10), new BigDecimal(0));
    assertEquals(record.getBigDecimal("field24", 10), new BigDecimal(0));
    assertEquals(record.getDate("field25"), new Date(1900, 10, 1));
    assertEquals(record.getTime("field26"), new Time(1, 0, 0));
    assertEquals(record.getTimestamp("field27"), new Timestamp(0));
  }

  @Test
  public void testNoTableSchema() throws UnsupportedEncodingException {

    TableSchema tableSchema = ClientTestUtils.createTable();
    DatabaseCommon common = new DatabaseCommon();
    common.getTables("test").put(tableSchema.getName(), tableSchema);
    common.getTablesById("test").put(tableSchema.getTableId(), tableSchema);
    byte[][] records = ClientTestUtils.createRecords(common, tableSchema, 10);

    ComObject cobj = new ComObject();
    ComArray array  = cobj.putArray(ComObject.Tag.FIELDS, ComObject.Type.OBJECT_TYPE);
    ComObject field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field1");
    field.put(ComObject.Tag.LONG_VALUE, 200L);
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field2");
    field.put(ComObject.Tag.STRING_VALUE, "0-value");
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field3");
    field.put(ComObject.Tag.TIMESTAMP_VALUE, new Timestamp(200));
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field4");
    field.put(ComObject.Tag.INT_VALUE, 1200);
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field5");
    field.put(ComObject.Tag.SHORT_VALUE, (short)0);
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field6");
    field.put(ComObject.Tag.BYTE_VALUE, (byte)0);
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field7");
    field.put(ComObject.Tag.STRING_VALUE, "0-value");
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field8");
    field.put(ComObject.Tag.STRING_VALUE, "0-value");
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field9");
    field.put(ComObject.Tag.DOUBLE_VALUE, 0d);
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field10");
    field.put(ComObject.Tag.FLOAT_VALUE, 0f);
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field11");
    field.put(ComObject.Tag.DOUBLE_VALUE, 0d);
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field12");
    field.put(ComObject.Tag.BOOLEAN_VALUE, true);
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field13");
    field.put(ComObject.Tag.BOOLEAN_VALUE, true);
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field14");
    field.put(ComObject.Tag.STRING_VALUE, "0-value");
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field15");
    field.put(ComObject.Tag.STRING_VALUE, "0-value");
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field16");
    field.put(ComObject.Tag.STRING_VALUE, "0-value");
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field17");
    field.put(ComObject.Tag.STRING_VALUE, "0-value");
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field18");
    field.put(ComObject.Tag.STRING_VALUE, "0-value");
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field19");
    field.put(ComObject.Tag.STRING_VALUE, "0-value");
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field20");
    field.put(ComObject.Tag.BYTE_ARRAY_VALUE, "0-value".getBytes("utf-8"));
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field21");
    field.put(ComObject.Tag.BYTE_ARRAY_VALUE, "0-value".getBytes("utf-8"));
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field22");
    field.put(ComObject.Tag.BYTE_ARRAY_VALUE, "0-value".getBytes("utf-8"));
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field23");
    field.put(ComObject.Tag.BIG_DECIMAL_VALUE, new BigDecimal(0));
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field24");
    field.put(ComObject.Tag.BIG_DECIMAL_VALUE, new BigDecimal(0));
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field25");
    field.put(ComObject.Tag.DATE_VALUE, new Date(1900, 10, 1));
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field26");
    field.put(ComObject.Tag.TIME_VALUE, new Time(1, 0, 0));
    array.add(field);
    field = new ComObject();
    field.put(ComObject.Tag.FIELD_NAME, "field27");
    field.put(ComObject.Tag.TIMESTAMP_VALUE, new Timestamp(0));
    array.add(field);

    RecordImpl record = new RecordImpl(common, cobj);
    assertEquals((long)record.getLong("field1"), 200L);
    assertEquals(record.getString("field2"), "0-value");
    assertEquals(record.getTimestamp("field3"), new Timestamp(200));
    assertEquals(record.getInt("field4"), 1200);
    assertEquals((short)record.getShort("field5"), (short)0);
    assertEquals((byte)record.getByte("field6"), (byte)0);
    assertEquals(record.getString("field7"), "0-value");
    assertEquals(record.getString("field8"), "0-value");
    assertEquals(record.getDouble("field9"), 0d);
    assertEquals(record.getFloat("field10"), 0f);
    assertEquals(record.getDouble("field11"), 0d);
    assertEquals(record.getBoolean("field12"), true);
    assertEquals(record.getBoolean("field13"), true);
    assertEquals(record.getString("field14"), "0-value");
    assertEquals(record.getString("field15"), "0-value");
    assertEquals(record.getString("field16"), "0-value");
    assertEquals(record.getString("field17"), "0-value");
    assertEquals(record.getString("field18"), "0-value");
    assertEquals(record.getString("field19"), "0-value");
    assertEquals(record.getBytes("field20"), "0-value".getBytes("utf-8"));
    assertEquals(record.getBytes("field21"), "0-value".getBytes("utf-8"));
    assertEquals(record.getBytes("field22"), "0-value".getBytes("utf-8"));
    assertEquals(record.getBigDecimal("field23", 10), new BigDecimal(0));
    assertEquals(record.getBigDecimal("field24", 10), new BigDecimal(0));
    assertEquals(record.getDate("field25"), new Date(1900, 10, 1));
    assertEquals(record.getTime("field26"), new Time(1, 0, 0));
    assertEquals(record.getTimestamp("field27"), new Timestamp(0));

    cobj = record.serialize();

    record = new RecordImpl(common, cobj);

    assertEquals((long)record.getLong("field1"), 200L);
    assertEquals(record.getString("field2"), "0-value");
    assertEquals(record.getTimestamp("field3"), new Timestamp(200));
    assertEquals(record.getInt("field4"), 1200);
    assertEquals((short)record.getShort("field5"), (short)0);
    assertEquals((byte)record.getByte("field6"), (byte)0);
    assertEquals(record.getString("field7"), "0-value");
    assertEquals(record.getString("field8"), "0-value");
    assertEquals(record.getDouble("field9"), 0d);
    assertEquals(record.getFloat("field10"), 0f);
    assertEquals(record.getDouble("field11"), 0d);
    assertEquals(record.getBoolean("field12"), true);
    assertEquals(record.getBoolean("field13"), true);
    assertEquals(record.getString("field14"), "0-value");
    assertEquals(record.getString("field15"), "0-value");
    assertEquals(record.getString("field16"), "0-value");
    assertEquals(record.getString("field17"), "0-value");
    assertEquals(record.getString("field18"), "0-value");
    assertEquals(record.getString("field19"), "0-value");
    assertEquals(record.getBytes("field20"), "0-value".getBytes("utf-8"));
    assertEquals(record.getBytes("field21"), "0-value".getBytes("utf-8"));
    assertEquals(record.getBytes("field22"), "0-value".getBytes("utf-8"));
    assertEquals(record.getBigDecimal("field23", 10), new BigDecimal(0));
    assertEquals(record.getBigDecimal("field24", 10), new BigDecimal(0));
    assertEquals(record.getDate("field25"), new Date(1900, 10, 1));
    assertEquals(record.getTime("field26"), new Time(1, 0, 0));
    assertEquals(record.getTimestamp("field27"), new Timestamp(0));
  }

  @Test
  public void testSetNoSchema() throws UnsupportedEncodingException {
    DatabaseCommon common = new DatabaseCommon();
    ComObject cobj = new ComObject();
    RecordImpl record = new RecordImpl(common, cobj);
    record.setLong("field1", 200L);
    assertEquals((long)record.getLong("field1"), 200L);
    record.setString("field2", "0-value");
    assertEquals(record.getString("field2"), "0-value");
    record.setTimestamp("field3", new Timestamp(200));
    assertEquals(record.getTimestamp("field3"), new Timestamp(200));
    record.setInt("field4", 1200);
    assertEquals(record.getInt("field4"), 1200);
    record.setShort("field5", (short)0);
    assertEquals((short)record.getShort("field5"), (short)0);
    record.setByte("field6", (byte)0);
    assertEquals((byte)record.getByte("field6"), (byte)0);
    record.setString("field7", "0-value");
    assertEquals(record.getString("field7"), "0-value");
    record.setString("field8", "0-value");
    assertEquals(record.getString("field8"), "0-value");
    record.setDouble("field9", 0d);
    assertEquals(record.getDouble("field9"), 0d);
    record.setFloat("field10", 0f);
    assertEquals(record.getFloat("field10"), 0f);
    record.setDouble("field11", 0d);
    assertEquals(record.getDouble("field11"), 0d);
    record.setBoolean("field12", true);
    assertEquals(record.getBoolean("field12"), true);
    record.setBoolean("field13", true);
    assertEquals(record.getBoolean("field13"), true);
    record.setString("field14", "0-value");
    assertEquals(record.getString("field14"), "0-value");
    record.setString("field15", "0-value");
    assertEquals(record.getString("field15"), "0-value");
    record.setString("field16", "0-value");
    assertEquals(record.getString("field16"), "0-value");
    record.setString("field17", "0-value");
    assertEquals(record.getString("field17"), "0-value");
    record.setString("field18", "0-value");
    assertEquals(record.getString("field18"), "0-value");
    record.setString("field19", "0-value");
    assertEquals(record.getString("field19"), "0-value");
    record.setBytes("field20", "0-value".getBytes("utf-8"));
    assertEquals(record.getBytes("field20"), "0-value".getBytes("utf-8"));
    record.setBytes("field21", "0-value".getBytes("utf-8"));
    assertEquals(record.getBytes("field21"), "0-value".getBytes("utf-8"));
    record.setBytes("field22", "0-value".getBytes("utf-8"));
    assertEquals(record.getBytes("field22"), "0-value".getBytes("utf-8"));
    record.setBigDecimal("field23", new BigDecimal(0));
    assertEquals(record.getBigDecimal("field23", 10), new BigDecimal(0));
    record.setBigDecimal("field24", new BigDecimal(0));
    assertEquals(record.getBigDecimal("field24", 10), new BigDecimal(0));
    record.setDate("field25", new Date(1900, 10, 1));
    assertEquals(record.getDate("field25"), new Date(1900, 10, 1));
    record.setTime("field26", new Time(1, 0, 0));
    assertEquals(record.getTime("field26"), new Time(1, 0, 0));
    record.setTimestamp("field27", new Timestamp(0));
    assertEquals(record.getTimestamp("field27"), new Timestamp(0));


  }

  @Test
  public void testSetWithSchema() throws UnsupportedEncodingException {
    TableSchema tableSchema = ClientTestUtils.createTable();
    DatabaseCommon common = new DatabaseCommon();
    common.getTables("test").put(tableSchema.getName(), tableSchema);
    common.getTablesById("test").put(tableSchema.getTableId(), tableSchema);
    byte[][] records = ClientTestUtils.createRecords(common, tableSchema, 10);

    RecordImpl record = new RecordImpl("test", common, (short)100, "test", tableSchema, new com.sonicbase.common.Record("test", common, records[1]));
    record.setLong("field1", 200L);
    assertEquals((long)record.getLong("field1"), 200L);
    record.setString("field2", "0-value");
    assertEquals(record.getString("field2"), "0-value");
    record.setTimestamp("field3", new Timestamp(200));
    assertEquals(record.getTimestamp("field3"), new Timestamp(200));
    record.setInt("field4", 1200);
    assertEquals(record.getInt("field4"), 1200);
    record.setShort("field5", (short)0);
    assertEquals((short)record.getShort("field5"), (short)0);
    record.setByte("field6", (byte)0);
    assertEquals((byte)record.getByte("field6"), (byte)0);
    record.setString("field7", "0-value");
    assertEquals(record.getString("field7"), "0-value");
    record.setString("field8", "0-value");
    assertEquals(record.getString("field8"), "0-value");
    record.setDouble("field9", 0d);
    assertEquals(record.getDouble("field9"), 0d);
    record.setFloat("field10", 0f);
    assertEquals(record.getFloat("field10"), 0f);
    record.setDouble("field11", 0d);
    assertEquals(record.getDouble("field11"), 0d);
    record.setBoolean("field12", true);
    assertEquals(record.getBoolean("field12"), true);
    record.setBoolean("field13", true);
    assertEquals(record.getBoolean("field13"), true);
    record.setString("field14", "0-value");
    assertEquals(record.getString("field14"), "0-value");
    record.setString("field15", "0-value");
    assertEquals(record.getString("field15"), "0-value");
    record.setString("field16", "0-value");
    assertEquals(record.getString("field16"), "0-value");
    record.setString("field17", "0-value");
    assertEquals(record.getString("field17"), "0-value");
    record.setString("field18", "0-value");
    assertEquals(record.getString("field18"), "0-value");
    record.setString("field19", "0-value");
    assertEquals(record.getString("field19"), "0-value");
    record.setBytes("field20", "0-value".getBytes("utf-8"));
    assertEquals(record.getBytes("field20"), "0-value".getBytes("utf-8"));
    record.setBytes("field21", "0-value".getBytes("utf-8"));
    assertEquals(record.getBytes("field21"), "0-value".getBytes("utf-8"));
    record.setBytes("field22", "0-value".getBytes("utf-8"));
    assertEquals(record.getBytes("field22"), "0-value".getBytes("utf-8"));
    record.setBigDecimal("field23", new BigDecimal(0));
    assertEquals(record.getBigDecimal("field23", 10), new BigDecimal(0));
    record.setBigDecimal("field24", new BigDecimal(0));
    assertEquals(record.getBigDecimal("field24", 10), new BigDecimal(0));
    record.setDate("field25", new Date(1900, 10, 1));
    assertEquals(record.getDate("field25"), new Date(1900, 10, 1));
    record.setTime("field26", new Time(1, 0, 0));
    assertEquals(record.getTime("field26"), new Time(1, 0, 0));
    record.setTimestamp("field27", new Timestamp(0));
    assertEquals(record.getTimestamp("field27"), new Timestamp(0));


  }
}
