<?xml version="1.0" encoding="UTF-8"?>
<yshrink version="0.1">
<!-- parsing /Users/lowryda/Dropbox/git/sonicbase/db/target/sonicbase-core-unobfuscated-1.2.1.jar -->
<!-- WARNING:Unresolved external dependency: io.netty.channel.ChannelInboundHandlerAdapter not found! -->
<!-- WARNING:Unresolved external dependency: io.netty.channel.ChannelInboundHandlerAdapter not found! -->
<!-- WARNING:Unresolved external dependency: io.netty.channel.ChannelInitializer not found! -->
<!-- WARNING:Unresolved external dependency: io.netty.channel.ChannelInitializer not found! -->
<entrypoints>
	<class name="com.sonicbase.client.DatabaseClient" />
	<method signature="byte[] send(java.lang.String,int,long,java.lang.String,com.sonicbase.common.ComObject,com.sonicbase.client.DatabaseClient$Replica)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void doAddColumn(java.lang.String,java.lang.String,java.lang.String,net.sf.jsqlparser.statement.create.table.ColDataType)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void shutdown()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.lang.Object doCreateIndex(java.lang.String,net.sf.jsqlparser.statement.create.index.CreateIndex)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="int getPageSize()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="byte[] send(java.lang.String,com.sonicbase.client.DatabaseClient$Server[],int,long,java.lang.String,com.sonicbase.common.ComObject,com.sonicbase.client.DatabaseClient$Replica)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void &lt;init&gt;(java.lang.String[],int,int,boolean,com.sonicbase.common.DatabaseCommon)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="int getReplicaCount()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.lang.String getCluster()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void &lt;init&gt;(java.lang.String[],int,int,boolean)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="int doCreateTable(java.lang.String,com.sonicbase.query.impl.CreateTableStatementImpl)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="byte[] checkAddedRecords(java.lang.String,byte[])" class="com.sonicbase.client.DatabaseClient" />
	<method signature="long getPartitionSize(java.lang.String,int,java.lang.String,java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void populateOrderedKeyInfo(java.util.Map,java.util.List)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.query.SelectStatement createSelectStatement()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="int getShardCount()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void beginRebalance(java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.util.Set getWriteVerbs()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="boolean isRepartitioningComplete(java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void setCommon(com.sonicbase.common.DatabaseCommon)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.util.List getKeys(com.sonicbase.schema.TableSchema,java.util.List,java.util.List,long)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.lang.Object doSelect(java.lang.String,com.sonicbase.jdbcdriver.ParameterHandler,net.sf.jsqlparser.statement.select.Select,boolean,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.lang.Object executeQuery(java.lang.String,com.sonicbase.jdbcdriver.QueryType,java.lang.String,com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.query.ResultSet describeLicenses()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.lang.Object doTruncateTable(java.lang.String,net.sf.jsqlparser.statement.truncate.Truncate)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.util.concurrent.ThreadPoolExecutor getExecutor()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void deleteKey(java.lang.String,java.lang.String,com.sonicbase.client.DatabaseClient$KeyInfo,java.lang.String,java.lang.Object[])" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.client.ReconfigureResults reconfigureCluster()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.common.ComObject serializeInsertKey(java.lang.String,java.lang.String,com.sonicbase.client.DatabaseClient$KeyInfo,java.lang.String,java.lang.Object[])" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.common.DatabaseCommon access$1000(com.sonicbase.client.DatabaseClient)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.lang.Object doDrop(java.lang.String,net.sf.jsqlparser.statement.Statement)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void configureServers()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void startRestore(java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void doCreateIndex(java.lang.String,com.sonicbase.query.impl.CreateIndexStatementImpl)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="long getTransactionId()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.query.CreateTableStatement createCreateTableStatement()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void beginExplicitTransaction(java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.lang.Object doUpdate(java.lang.String,com.sonicbase.jdbcdriver.ParameterHandler,net.sf.jsqlparser.statement.update.Update)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.lang.StringBuilder doDescribeIndex(java.lang.String,java.lang.String,java.lang.String,java.lang.StringBuilder)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.lang.String handleSchemaOutOfSyncException(java.lang.String,java.lang.Exception)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="byte[] do_send(java.util.List)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.lang.String[] getWrite_verbs_array()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void initDb(java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.google.api.client.http.HttpResponse restGet(java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.util.List prepareInsert(com.sonicbase.client.DatabaseClient$InsertRequest,long)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.server.DatabaseServer getLocalDbServer(int,int)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void setPageSize(int)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.query.impl.ResultSetImpl describeServerStats(java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.lang.String debugRecord(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void &lt;init&gt;(java.lang.String,int,int,int,boolean)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.util.Set getWrite_verbs()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="boolean isBackupComplete()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.query.CreateIndexStatement createCreateIndexStatement()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.query.InsertStatement createInsertStatement()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="int doInsert(java.lang.String,com.sonicbase.jdbcdriver.ParameterHandler,net.sf.jsqlparser.statement.insert.Insert)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.query.UpdateStatement createUpdateStatement()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl getExpression(java.util.concurrent.atomic.AtomicInteger,net.sf.jsqlparser.expression.Expression,java.lang.String,com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.util.Random access$400(com.sonicbase.client.DatabaseClient)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void handleDeadServer(java.lang.Throwable,com.sonicbase.client.DatabaseClient$Server)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="int selectShard(long)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.query.ResultSet describeServerHeath(java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="long getPartitionSize(java.lang.String,int,int,java.lang.String,java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.common.ComObject serializeInsertKeyWithRecord(java.lang.String,java.lang.String,com.sonicbase.client.DatabaseClient$KeyInfo,com.sonicbase.common.Record)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="byte[] sendToMaster(java.lang.String,com.sonicbase.common.ComObject)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.lang.Object doDelete(java.lang.String,com.sonicbase.jdbcdriver.ParameterHandler,net.sf.jsqlparser.statement.delete.Delete)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void createDatabase(java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.lang.Object doAlter(java.lang.String,com.sonicbase.jdbcdriver.ParameterHandler,net.sf.jsqlparser.statement.alter.Alter)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="long allocateId(java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.common.DatabaseCommon getCommon()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.query.ResultSet doDescribe(java.lang.String,java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="boolean isRestoreComplete()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void syncSchema()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void commit(java.lang.String,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void syncConfig()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="int doInsert(java.lang.String,com.sonicbase.query.impl.InsertStatementImpl,com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.common.Record prepareRecordForInsert(com.sonicbase.query.impl.InsertStatementImpl,com.sonicbase.schema.TableSchema,long)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.schema.Schema getSchema(java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.query.ResultSet describeSchemaVersion(java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void startBackup()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void getConfig()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void &lt;init&gt;(java.lang.String,int,int,int,boolean,com.sonicbase.common.DatabaseCommon)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void doDropColumn(java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.lang.Object executeQuery(java.lang.String,com.sonicbase.jdbcdriver.QueryType,java.lang.String,com.sonicbase.jdbcdriver.ParameterHandler,boolean)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="byte[] send(java.lang.String,com.sonicbase.client.DatabaseClient$Server[],int,long,java.lang.String,com.sonicbase.common.ComObject,com.sonicbase.client.DatabaseClient$Replica,boolean)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="java.lang.Object doExplain(java.lang.String,java.lang.String,com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="byte[] send(java.lang.String,int,long,java.lang.String,com.sonicbase.common.ComObject,com.sonicbase.client.DatabaseClient$Replica,boolean)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="int[] executeBatch()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void insertKeyWithRecord(java.lang.String,java.lang.String,com.sonicbase.client.DatabaseClient$KeyInfo,com.sonicbase.common.Record)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void appendChars(java.lang.StringBuilder,java.lang.String,int)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void insertKey(java.lang.String,java.lang.String,com.sonicbase.client.DatabaseClient$KeyInfo,java.lang.String,java.lang.Object[])" class="com.sonicbase.client.DatabaseClient" />
	<method signature="boolean isExplicitTrans()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="com.sonicbase.query.ResultSet describeShards(java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="byte[][] sendToAllShards(java.lang.String,long,java.lang.String,com.sonicbase.common.ComObject,com.sonicbase.client.DatabaseClient$Replica,boolean)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="int doCreateTable(java.lang.String,net.sf.jsqlparser.statement.create.table.CreateTable)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void rollback(java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void doDescribeOneIndex(com.sonicbase.schema.TableSchema,com.sonicbase.schema.IndexSchema,java.lang.StringBuilder)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="boolean isCommitting()" class="com.sonicbase.client.DatabaseClient" />
	<method signature="void doTruncateTable(java.lang.String,java.lang.String)" class="com.sonicbase.client.DatabaseClient" />
	<method signature="byte[][] sendToAllShards(java.lang.String,long,java.lang.String,com.sonicbase.common.ComObject,com.sonicbase.client.DatabaseClient$Replica)" class="com.sonicbase.client.DatabaseClient" />
	<field name="write_verbs_array" class="com.sonicbase.client.DatabaseClient" />
	<field name="isCommitting" class="com.sonicbase.client.DatabaseClient" />
	<field name="writeVerbs" class="com.sonicbase.client.DatabaseClient" />
	<field name="logger" class="com.sonicbase.client.DatabaseClient" />
	<field name="lastGotSchema" class="com.sonicbase.client.DatabaseClient" />
	<field name="transactionOps" class="com.sonicbase.client.DatabaseClient" />
	<field name="pageSize" class="com.sonicbase.client.DatabaseClient" />
	<field name="INDEX_LOOKUP_STATS" class="com.sonicbase.client.DatabaseClient" />
	<field name="tableSchema" class="com.sonicbase.client.DatabaseClient" />
	<field name="rand" class="com.sonicbase.client.DatabaseClient" />
	<field name="isExplicitTrans" class="com.sonicbase.client.DatabaseClient" />
	<field name="nextId" class="com.sonicbase.client.DatabaseClient" />
	<field name="servers" class="com.sonicbase.client.DatabaseClient" />
	<field name="common" class="com.sonicbase.client.DatabaseClient" />
	<field name="statsTimer" class="com.sonicbase.client.DatabaseClient" />
	<field name="executor" class="com.sonicbase.client.DatabaseClient" />
	<field name="idAllocatorLock" class="com.sonicbase.client.DatabaseClient" />
	<field name="localLogger" class="com.sonicbase.client.DatabaseClient" />
	<field name="METRICS" class="com.sonicbase.client.DatabaseClient" />
	<field name="batch" class="com.sonicbase.client.DatabaseClient" />
	<field name="addedRecords" class="com.sonicbase.client.DatabaseClient" />
	<field name="write_verbs" class="com.sonicbase.client.DatabaseClient" />
	<field name="isClient" class="com.sonicbase.client.DatabaseClient" />
	<field name="nextRecordId" class="com.sonicbase.client.DatabaseClient" />
	<field name="transactionId" class="com.sonicbase.client.DatabaseClient" />
	<field name="statementCache" class="com.sonicbase.client.DatabaseClient" />
	<field name="JOIN_EVALUATE" class="com.sonicbase.client.DatabaseClient" />
	<field name="maxAllocatedId" class="com.sonicbase.client.DatabaseClient" />
	<field name="BATCH_INDEX_LOOKUP_STATS" class="com.sonicbase.client.DatabaseClient" />
	<class name="com.sonicbase.query.impl.StatementImpl" />
	<method signature="com.sonicbase.query.BinaryExpression createBinaryExpression(com.sonicbase.query.Expression,com.sonicbase.query.BinaryExpression$Operator,com.sonicbase.query.Expression)" class="com.sonicbase.query.impl.StatementImpl" />
	<method signature="void setParms(com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.query.impl.StatementImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.StatementImpl" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.StatementImpl" />
	<method signature="java.lang.Object execute(java.lang.String,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.StatementImpl" />
	<method signature="com.sonicbase.query.BinaryExpression createBinaryExpression(java.lang.String,com.sonicbase.query.BinaryExpression$Operator,long)" class="com.sonicbase.query.impl.StatementImpl" />
	<method signature="com.sonicbase.query.BinaryExpression createBinaryExpression(java.lang.String,com.sonicbase.query.BinaryExpression$Operator,java.lang.String)" class="com.sonicbase.query.impl.StatementImpl" />
	<method signature="com.sonicbase.query.InExpression createInExpression()" class="com.sonicbase.query.impl.StatementImpl" />
	<method signature="com.sonicbase.jdbcdriver.ParameterHandler getParms()" class="com.sonicbase.query.impl.StatementImpl" />
	<field name="parms" class="com.sonicbase.query.impl.StatementImpl" />
	<class name="com.sonicbase.bench.TestDatabaseAdvancedToDo$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.bench.TestDatabaseAdvancedToDo,com.sonicbase.server.DatabaseServer[],int,com.sonicbase.util.JsonDict)" class="com.sonicbase.bench.TestDatabaseAdvancedToDo$1" />
	<method signature="java.lang.Object call()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo$1" />
	<field name="val$dbServers" class="com.sonicbase.bench.TestDatabaseAdvancedToDo$1" />
	<field name="val$config" class="com.sonicbase.bench.TestDatabaseAdvancedToDo$1" />
	<field name="this$0" class="com.sonicbase.bench.TestDatabaseAdvancedToDo$1" />
	<field name="val$shard" class="com.sonicbase.bench.TestDatabaseAdvancedToDo$1" />
	<class name="com.sonicbase.server.SchemaManager$AutoIncrementValue" />
	<method signature="java.lang.Object increment()" class="com.sonicbase.server.SchemaManager$AutoIncrementValue" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.SchemaManager$AutoIncrementValue" />
	<method signature="void &lt;init&gt;(com.sonicbase.schema.DataType$Type)" class="com.sonicbase.server.SchemaManager$AutoIncrementValue" />
	<method signature="void setInitialValue()" class="com.sonicbase.server.SchemaManager$AutoIncrementValue" />
	<field name="currValue" class="com.sonicbase.server.SchemaManager$AutoIncrementValue" />
	<field name="dataType" class="com.sonicbase.server.SchemaManager$AutoIncrementValue" />
	<field name="mutex" class="com.sonicbase.server.SchemaManager$AutoIncrementValue" />
	<class name="com.sonicbase.index.Repartitioner$MoveRequest" />
	<method signature="byte[][] getContent()" class="com.sonicbase.index.Repartitioner$MoveRequest" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.index.Repartitioner$MoveRequest" />
	<method signature="void setContent(byte[][])" class="com.sonicbase.index.Repartitioner$MoveRequest" />
	<method signature="boolean access$1400(com.sonicbase.index.Repartitioner$MoveRequest)" class="com.sonicbase.index.Repartitioner$MoveRequest" />
	<method signature="java.lang.Object[] getKey()" class="com.sonicbase.index.Repartitioner$MoveRequest" />
	<method signature="void setKey(java.lang.Object[])" class="com.sonicbase.index.Repartitioner$MoveRequest" />
	<method signature="java.lang.Object[] access$1500(com.sonicbase.index.Repartitioner$MoveRequest)" class="com.sonicbase.index.Repartitioner$MoveRequest" />
	<method signature="void &lt;init&gt;(java.lang.Object[],byte[][],boolean)" class="com.sonicbase.index.Repartitioner$MoveRequest" />
	<field name="key" class="com.sonicbase.index.Repartitioner$MoveRequest" />
	<field name="content" class="com.sonicbase.index.Repartitioner$MoveRequest" />
	<field name="shouldDeleteNow" class="com.sonicbase.index.Repartitioner$MoveRequest" />
	<class name="com.sonicbase.jdbcdriver.Parameter$CharacterStream" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$CharacterStream" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$CharacterStream" />
	<method signature="void &lt;init&gt;(java.io.Reader)" class="com.sonicbase.jdbcdriver.Parameter$CharacterStream" />
	<method signature="void &lt;init&gt;(java.io.Reader,long)" class="com.sonicbase.jdbcdriver.Parameter$CharacterStream" />
	<field name="length" class="com.sonicbase.jdbcdriver.Parameter$CharacterStream" />
	<class name="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<method signature="void setFields(java.util.List)" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<method signature="java.util.List getFields()" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<method signature="java.util.List getPrimaryKey()" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<method signature="void addField(java.lang.String,int)" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<method signature="void deserialize(byte[])" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient)" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<method signature="java.lang.String getTablename()" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<method signature="void setTableName(java.lang.String)" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<method signature="void setPrimaryKey(java.util.List)" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<method signature="byte[] serialize()" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<method signature="int execute(java.lang.String)" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<field name="client" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<field name="fields" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<field name="tableName" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<field name="primaryKey" class="com.sonicbase.query.impl.CreateTableStatementImpl" />
	<class name="com.sonicbase.bench.TestConcurrentSkipListMap" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.bench.TestConcurrentSkipListMap" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.bench.TestConcurrentSkipListMap" />
	<method signature="void main(java.lang.String[])" class="com.sonicbase.bench.TestConcurrentSkipListMap" />
	<class name="com.sonicbase.jdbcdriver.QueryType" />
	<method signature="com.sonicbase.jdbcdriver.QueryType valueOf(java.lang.String)" class="com.sonicbase.jdbcdriver.QueryType" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.QueryType" />
	<method signature="com.sonicbase.jdbcdriver.QueryType[] values()" class="com.sonicbase.jdbcdriver.QueryType" />
	<method signature="void &lt;init&gt;(java.lang.String,int)" class="com.sonicbase.jdbcdriver.QueryType" />
	<field name="update0" class="com.sonicbase.jdbcdriver.QueryType" />
	<field name="update3" class="com.sonicbase.jdbcdriver.QueryType" />
	<field name="update4" class="com.sonicbase.jdbcdriver.QueryType" />
	<field name="update1" class="com.sonicbase.jdbcdriver.QueryType" />
	<field name="update2" class="com.sonicbase.jdbcdriver.QueryType" />
	<field name="execute2" class="com.sonicbase.jdbcdriver.QueryType" />
	<field name="execute1" class="com.sonicbase.jdbcdriver.QueryType" />
	<field name="execute4" class="com.sonicbase.jdbcdriver.QueryType" />
	<field name="execute3" class="com.sonicbase.jdbcdriver.QueryType" />
	<field name="query0" class="com.sonicbase.jdbcdriver.QueryType" />
	<field name="query1" class="com.sonicbase.jdbcdriver.QueryType" />
	<field name="execute0" class="com.sonicbase.jdbcdriver.QueryType" />
	<field name="batch0" class="com.sonicbase.jdbcdriver.QueryType" />
	<field name="$VALUES" class="com.sonicbase.jdbcdriver.QueryType" />
	<class name="com.sonicbase.server.DatabaseServer$LogRequest" />
	<method signature="void &lt;init&gt;(int)" class="com.sonicbase.server.DatabaseServer$LogRequest" />
	<method signature="java.util.List getBuffers()" class="com.sonicbase.server.DatabaseServer$LogRequest" />
	<method signature="void setBuffer(byte[])" class="com.sonicbase.server.DatabaseServer$LogRequest" />
	<method signature="java.util.concurrent.CountDownLatch getLatch()" class="com.sonicbase.server.DatabaseServer$LogRequest" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.DatabaseServer$LogRequest" />
	<method signature="long[] getSequences1()" class="com.sonicbase.server.DatabaseServer$LogRequest" />
	<method signature="long[] getSequences0()" class="com.sonicbase.server.DatabaseServer$LogRequest" />
	<method signature="byte[] getBuffer()" class="com.sonicbase.server.DatabaseServer$LogRequest" />
	<method signature="void setBuffers(java.util.List)" class="com.sonicbase.server.DatabaseServer$LogRequest" />
	<method signature="java.util.concurrent.CountDownLatch access$5000(com.sonicbase.server.DatabaseServer$LogRequest)" class="com.sonicbase.server.DatabaseServer$LogRequest" />
	<method signature="void setLatch(java.util.concurrent.CountDownLatch)" class="com.sonicbase.server.DatabaseServer$LogRequest" />
	<field name="sequenceNumbers" class="com.sonicbase.server.DatabaseServer$LogRequest" />
	<field name="times" class="com.sonicbase.server.DatabaseServer$LogRequest" />
	<field name="buffers" class="com.sonicbase.server.DatabaseServer$LogRequest" />
	<field name="buffer" class="com.sonicbase.server.DatabaseServer$LogRequest" />
	<field name="latch" class="com.sonicbase.server.DatabaseServer$LogRequest" />
	<class name="com.sonicbase.query.impl.ResultSetImpl$MultiTableRecordList" />
	<method signature="java.lang.String[] getTableNames()" class="com.sonicbase.query.impl.ResultSetImpl$MultiTableRecordList" />
	<method signature="void setTableNames(java.lang.String[])" class="com.sonicbase.query.impl.ResultSetImpl$MultiTableRecordList" />
	<method signature="void setIds(long[][])" class="com.sonicbase.query.impl.ResultSetImpl$MultiTableRecordList" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ResultSetImpl$MultiTableRecordList" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.ResultSetImpl$MultiTableRecordList" />
	<method signature="long[][] getIds()" class="com.sonicbase.query.impl.ResultSetImpl$MultiTableRecordList" />
	<field name="tableNames" class="com.sonicbase.query.impl.ResultSetImpl$MultiTableRecordList" />
	<field name="ids" class="com.sonicbase.query.impl.ResultSetImpl$MultiTableRecordList" />
	<class name="com.sonicbase.jdbcdriver.Parameter$NCharacterStream" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$NCharacterStream" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$NCharacterStream" />
	<method signature="void &lt;init&gt;(java.io.Reader)" class="com.sonicbase.jdbcdriver.Parameter$NCharacterStream" />
	<method signature="void &lt;init&gt;(java.io.Reader,long)" class="com.sonicbase.jdbcdriver.Parameter$NCharacterStream" />
	<field name="length" class="com.sonicbase.jdbcdriver.Parameter$NCharacterStream" />
	<class name="com.sonicbase.query.SelectStatement$JoinType" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.SelectStatement$JoinType" />
	<method signature="com.sonicbase.query.SelectStatement$JoinType[] values()" class="com.sonicbase.query.SelectStatement$JoinType" />
	<method signature="com.sonicbase.query.SelectStatement$JoinType valueOf(java.lang.String)" class="com.sonicbase.query.SelectStatement$JoinType" />
	<method signature="void &lt;init&gt;(java.lang.String,int)" class="com.sonicbase.query.SelectStatement$JoinType" />
	<field name="rightOuter" class="com.sonicbase.query.SelectStatement$JoinType" />
	<field name="leftOuter" class="com.sonicbase.query.SelectStatement$JoinType" />
	<field name="inner" class="com.sonicbase.query.SelectStatement$JoinType" />
	<field name="$VALUES" class="com.sonicbase.query.SelectStatement$JoinType" />
	<field name="full" class="com.sonicbase.query.SelectStatement$JoinType" />
	<class name="com.sonicbase.index.Index$Visitor" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.index.Index$Visitor" />
	<method signature="boolean visit(java.lang.Object[],java.lang.Object)" class="com.sonicbase.index.Index$Visitor" />
	<class name="com.sonicbase.query.BinaryExpression$Operator" />
	<method signature="boolean isRelationalOp()" class="com.sonicbase.query.BinaryExpression$Operator" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.BinaryExpression$Operator" />
	<method signature="com.sonicbase.query.BinaryExpression$Operator[] values()" class="com.sonicbase.query.BinaryExpression$Operator" />
	<method signature="com.sonicbase.query.BinaryExpression$Operator valueOf(java.lang.String)" class="com.sonicbase.query.BinaryExpression$Operator" />
	<method signature="com.sonicbase.query.BinaryExpression$Operator getOperator(int)" class="com.sonicbase.query.BinaryExpression$Operator" />
	<method signature="java.lang.String getSymbol()" class="com.sonicbase.query.BinaryExpression$Operator" />
	<method signature="void &lt;init&gt;(java.lang.String,int,int,java.lang.String)" class="com.sonicbase.query.BinaryExpression$Operator" />
	<method signature="int getId()" class="com.sonicbase.query.BinaryExpression$Operator" />
	<field name="equal" class="com.sonicbase.query.BinaryExpression$Operator" />
	<field name="symbol" class="com.sonicbase.query.BinaryExpression$Operator" />
	<field name="or" class="com.sonicbase.query.BinaryExpression$Operator" />
	<field name="like" class="com.sonicbase.query.BinaryExpression$Operator" />
	<field name="and" class="com.sonicbase.query.BinaryExpression$Operator" />
	<field name="notEqual" class="com.sonicbase.query.BinaryExpression$Operator" />
	<field name="greaterEqual" class="com.sonicbase.query.BinaryExpression$Operator" />
	<field name="less" class="com.sonicbase.query.BinaryExpression$Operator" />
	<field name="lessEqual" class="com.sonicbase.query.BinaryExpression$Operator" />
	<field name="id" class="com.sonicbase.query.BinaryExpression$Operator" />
	<field name="greater" class="com.sonicbase.query.BinaryExpression$Operator" />
	<field name="$VALUES" class="com.sonicbase.query.BinaryExpression$Operator" />
	<class name="com.sonicbase.schema.TableSchema$PreviousFields" />
	<method signature="void &lt;init&gt;(com.sonicbase.schema.TableSchema)" class="com.sonicbase.schema.TableSchema$PreviousFields" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.TableSchema$PreviousFields" />
	<field name="schemaVersion" class="com.sonicbase.schema.TableSchema$PreviousFields" />
	<field name="this$0" class="com.sonicbase.schema.TableSchema$PreviousFields" />
	<field name="fields" class="com.sonicbase.schema.TableSchema$PreviousFields" />
	<class name="com.sonicbase.util.StreamUtils" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.util.StreamUtils" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.util.StreamUtils" />
	<method signature="byte[] inputStreamToBytes(java.io.InputStream)" class="com.sonicbase.util.StreamUtils" />
	<method signature="java.lang.String inputStreamToString(java.io.InputStream)" class="com.sonicbase.util.StreamUtils" />
	<method signature="java.lang.String readerToString(java.io.Reader)" class="com.sonicbase.util.StreamUtils" />
	<method signature="void copyStream(java.io.InputStream,java.io.OutputStream)" class="com.sonicbase.util.StreamUtils" />
	<field name="DEFAULT_BUFFER_SIZE" class="com.sonicbase.util.StreamUtils" />
	<class name="com.sonicbase.server.PreparedIndexLookupNotFoundException" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.PreparedIndexLookupNotFoundException" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.server.PreparedIndexLookupNotFoundException" />
	<class name="com.sonicbase.client.DatabaseClient$PreparedInsert" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient)" class="com.sonicbase.client.DatabaseClient$PreparedInsert" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.client.DatabaseClient$PreparedInsert" />
	<field name="columnNames" class="com.sonicbase.client.DatabaseClient$PreparedInsert" />
	<field name="indexName" class="com.sonicbase.client.DatabaseClient$PreparedInsert" />
	<field name="dbName" class="com.sonicbase.client.DatabaseClient$PreparedInsert" />
	<field name="record" class="com.sonicbase.client.DatabaseClient$PreparedInsert" />
	<field name="values" class="com.sonicbase.client.DatabaseClient$PreparedInsert" />
	<field name="this$0" class="com.sonicbase.client.DatabaseClient$PreparedInsert" />
	<field name="primaryKeyIndexName" class="com.sonicbase.client.DatabaseClient$PreparedInsert" />
	<field name="id" class="com.sonicbase.client.DatabaseClient$PreparedInsert" />
	<field name="keyInfo" class="com.sonicbase.client.DatabaseClient$PreparedInsert" />
	<field name="tableSchema" class="com.sonicbase.client.DatabaseClient$PreparedInsert" />
	<field name="tableName" class="com.sonicbase.client.DatabaseClient$PreparedInsert" />
	<field name="primaryKey" class="com.sonicbase.client.DatabaseClient$PreparedInsert" />
	<class name="com.sonicbase.query.impl.Blob" />
	<method signature="int setBytes(long,byte[],int,int)" class="com.sonicbase.query.impl.Blob" />
	<method signature="byte[] getBytes(long,int)" class="com.sonicbase.query.impl.Blob" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.Blob" />
	<method signature="void free()" class="com.sonicbase.query.impl.Blob" />
	<method signature="void truncate(long)" class="com.sonicbase.query.impl.Blob" />
	<method signature="int setBytes(long,byte[])" class="com.sonicbase.query.impl.Blob" />
	<method signature="java.io.InputStream getBinaryStream()" class="com.sonicbase.query.impl.Blob" />
	<method signature="byte[] getData()" class="com.sonicbase.query.impl.Blob" />
	<method signature="void setData(byte[])" class="com.sonicbase.query.impl.Blob" />
	<method signature="long position(byte[],long)" class="com.sonicbase.query.impl.Blob" />
	<method signature="long position(java.sql.Blob,long)" class="com.sonicbase.query.impl.Blob" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.Blob" />
	<method signature="java.io.OutputStream setBinaryStream(long)" class="com.sonicbase.query.impl.Blob" />
	<method signature="java.io.InputStream getBinaryStream(long,long)" class="com.sonicbase.query.impl.Blob" />
	<method signature="long length()" class="com.sonicbase.query.impl.Blob" />
	<method signature="void &lt;init&gt;(byte[])" class="com.sonicbase.query.impl.Blob" />
	<field name="data" class="com.sonicbase.query.impl.Blob" />
	<class name="com.sonicbase.server.DatabaseServer$ServersConfig" />
	<method signature="void serialize(java.io.DataOutputStream,long)" class="com.sonicbase.server.DatabaseServer$ServersConfig" />
	<method signature="com.sonicbase.server.DatabaseServer$Shard[] getShards()" class="com.sonicbase.server.DatabaseServer$ServersConfig" />
	<method signature="void &lt;init&gt;(java.lang.String,com.sonicbase.util.JsonArray,int,boolean)" class="com.sonicbase.server.DatabaseServer$ServersConfig" />
	<method signature="void &lt;init&gt;(java.io.DataInputStream,long)" class="com.sonicbase.server.DatabaseServer$ServersConfig" />
	<method signature="int getThisReplica(java.lang.String,int)" class="com.sonicbase.server.DatabaseServer$ServersConfig" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.DatabaseServer$ServersConfig" />
	<method signature="int getThisShard(java.lang.String,int)" class="com.sonicbase.server.DatabaseServer$ServersConfig" />
	<method signature="void &lt;init&gt;(byte[],long)" class="com.sonicbase.server.DatabaseServer$ServersConfig" />
	<method signature="byte[] serialize(long)" class="com.sonicbase.server.DatabaseServer$ServersConfig" />
	<method signature="boolean clientIsInternal()" class="com.sonicbase.server.DatabaseServer$ServersConfig" />
	<method signature="int getShardCount()" class="com.sonicbase.server.DatabaseServer$ServersConfig" />
	<method signature="java.lang.String getCluster()" class="com.sonicbase.server.DatabaseServer$ServersConfig" />
	<field name="clientIsInternal" class="com.sonicbase.server.DatabaseServer$ServersConfig" />
	<field name="cluster" class="com.sonicbase.server.DatabaseServer$ServersConfig" />
	<field name="shards" class="com.sonicbase.server.DatabaseServer$ServersConfig" />
	<class name="com.sonicbase.common.ExcludeRename" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.ExcludeRename" />
	<method signature="boolean exclude()" class="com.sonicbase.common.ExcludeRename" />
	<method signature="boolean applyToMembers()" class="com.sonicbase.common.ExcludeRename" />
	<class name="com.sonicbase.socket.Util" />
	<method signature="int readRawLittleEndian32(byte[])" class="com.sonicbase.socket.Util" />
	<method signature="long readRawLittleEndian64(byte[],int)" class="com.sonicbase.socket.Util" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.socket.Util" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.socket.Util" />
	<method signature="int readRawLittleEndian32(byte[],int)" class="com.sonicbase.socket.Util" />
	<method signature="void writeRawLittleEndian32(int,byte[])" class="com.sonicbase.socket.Util" />
	<method signature="void writeRawLittleEndian64(long,byte[])" class="com.sonicbase.socket.Util" />
	<method signature="long readRawLittleEndian64(byte[])" class="com.sonicbase.socket.Util" />
	<class name="com.sonicbase.jdbcdriver.Parameter$NClob" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$NClob" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$NClob" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$NClob" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$NClob" />
	<method signature="void &lt;init&gt;(java.sql.NClob)" class="com.sonicbase.jdbcdriver.Parameter$NClob" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$NClob" />
	<class name="com.sonicbase.index.Repartitioner$7$1" />
	<method signature="void run()" class="com.sonicbase.index.Repartitioner$7$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Repartitioner$7,java.util.List)" class="com.sonicbase.index.Repartitioner$7$1" />
	<field name="this$1" class="com.sonicbase.index.Repartitioner$7$1" />
	<field name="val$toProcess" class="com.sonicbase.index.Repartitioner$7$1" />
	<class name="com.sonicbase.client.DatabaseClient$TransactionOperation" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.client.DatabaseClient$TransactionOperation" />
	<method signature="void &lt;init&gt;(com.sonicbase.query.impl.StatementImpl,com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.client.DatabaseClient$TransactionOperation" />
	<field name="statement" class="com.sonicbase.client.DatabaseClient$TransactionOperation" />
	<field name="parms" class="com.sonicbase.client.DatabaseClient$TransactionOperation" />
	<class name="com.sonicbase.common.ComObject$DynamicType" />
	<method signature="void &lt;init&gt;(int)" class="com.sonicbase.common.ComObject$DynamicType" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.ComObject$DynamicType" />
	<field name="tag" class="com.sonicbase.common.ComObject$DynamicType" />
	<class name="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="long getSchemaVersion()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.Statement createStatement()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.lang.String getClientInfo(java.lang.String)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.util.Map getTables(java.lang.String)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.Savepoint setSavepoint(java.lang.String)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.lang.String getCatalog()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="int getReplicaCount()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void rollback(java.sql.Savepoint)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.NClob createNClob()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void setHoldability(int)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void setClientInfo(java.lang.String,java.lang.String)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void setSchema(java.lang.String)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.Statement createStatement(int,int,int)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void setCatalog(java.lang.String)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="int getShardCount()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.PreparedStatement prepareStatement(java.lang.String,int)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="byte[] sendToMaster(java.lang.String,com.sonicbase.common.ComObject)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void initGlobalContext()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.util.Properties getClientInfo()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.lang.Object unwrap(java.lang.Class)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.lang.String nativeSQL(java.lang.String)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void createDatabase(java.lang.String)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="boolean isWrapperFor(java.lang.Class)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.Savepoint setSavepoint()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.util.Map getTypeMap()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void setClientInfo(java.util.Properties)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="com.sonicbase.query.ResultSet describeLicenses()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.PreparedStatement prepareStatement(java.lang.String)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.Clob createClob()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="boolean isRestoreComplete()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void commit()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="com.sonicbase.client.ReconfigureResults reconfigureCluster()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void releaseSavepoint(java.sql.Savepoint)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.Array createArrayOf(java.lang.String,java.lang.Object[])" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="int getHoldability()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void startRestore(java.lang.String)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void checkClosed()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="byte[] send(java.lang.String,int,long,java.lang.String,com.sonicbase.common.ComObject,com.sonicbase.jdbcdriver.ConnectionProxy$Replica)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void syncSchema()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void setAutoCommit(boolean)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.SQLWarning getWarnings()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="byte[] send(java.lang.String,int,long,java.lang.String,com.sonicbase.common.ComObject,com.sonicbase.jdbcdriver.ConnectionProxy$Replica,boolean)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void beginExplicitTransaction(java.lang.String)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.Statement createStatement(int,int)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="int getNetworkTimeout()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void &lt;init&gt;(java.lang.String,java.util.Properties)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="boolean isClosed()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void setReadOnly(boolean)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.Blob createBlob()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.SQLXML createSQLXML()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="int getTransactionIsolation()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void startBackup()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void clearWarnings()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void abort(java.util.concurrent.Executor)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void setNetworkTimeout(java.util.concurrent.Executor,int)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.lang.String getDbName()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void rollback()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="boolean getAutoCommit()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void setTransactionIsolation(int)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.CallableStatement prepareCall(java.lang.String,int,int)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void close()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.CallableStatement prepareCall(java.lang.String,int,int,int)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.lang.String getSchema()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="int getMasterReplica(int)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.lang.String debugRecord(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="boolean isReadOnly()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.Struct createStruct(java.lang.String,java.lang.Object[])" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="void setTypeMap(java.util.Map)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="boolean isValid(int)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="com.sonicbase.client.DatabaseClient getDatabaseClient()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="boolean isBackupComplete()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.CallableStatement prepareCall(java.lang.String)" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.PreparedStatement prepareStatement(java.lang.String,int[])" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<method signature="java.sql.DatabaseMetaData getMetaData()" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<field name="typemap" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<field name="dbName" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<field name="_clientInfo" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<field name="databaseClient" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<field name="closed" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<field name="shard" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<field name="clientMutex" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<field name="autoCommit" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<field name="rsHoldability" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<field name="properties" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<field name="globalContextRefCount" class="com.sonicbase.jdbcdriver.ConnectionProxy" />
	<class name="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<method signature="boolean isAscending()" class="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<method signature="java.lang.String getTableName()" class="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<method signature="java.lang.String getColumnName()" class="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<method signature="void deserialize(byte[])" class="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,boolean)" class="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<method signature="void setAscending(boolean)" class="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<method signature="void setTableName(java.lang.String)" class="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<method signature="void setColumnName(java.lang.String)" class="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<method signature="byte[] serialize()" class="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<field name="isAscending" class="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<field name="tableName" class="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<field name="columnName" class="com.sonicbase.query.impl.OrderByExpressionImpl" />
	<class name="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="void setParmOffset(int)" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="java.lang.String getParmName()" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="boolean canUseIndex()" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$Type getType()" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="void setParmName(java.lang.String)" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(int,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="java.lang.Object evaluateSingleRecord(com.sonicbase.schema.TableSchema[],com.sonicbase.common.Record[],com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="void queryRewrite()" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="int getParmOffset()" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="java.lang.String toString()" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="boolean canSortWithIndex()" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="com.sonicbase.query.impl.ColumnImpl getPrimaryColumn()" class="com.sonicbase.query.impl.ParameterImpl" />
	<method signature="void getColumns(java.util.Set)" class="com.sonicbase.query.impl.ParameterImpl" />
	<field name="parmOffset" class="com.sonicbase.query.impl.ParameterImpl" />
	<field name="parmName" class="com.sonicbase.query.impl.ParameterImpl" />
	<class name="com.sonicbase.query.ResultSet" />
	<method signature="byte[] getBytes(java.lang.String)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.io.InputStream getBinaryStream(java.lang.String)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.sql.Date getDate(int)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.math.BigDecimal getBigDecimal(int,int)" class="com.sonicbase.query.ResultSet" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.ResultSet" />
	<method signature="java.lang.Byte getByte(java.lang.String)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.lang.Long getLong(java.lang.String)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.math.BigDecimal getBigDecimal(java.lang.String)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.lang.Integer getInt(int)" class="com.sonicbase.query.ResultSet" />
	<method signature="byte[] getBytes(int)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.math.BigDecimal getBigDecimal(java.lang.String,int)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.math.BigDecimal getBigDecimal(int)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.sql.Time getTime(java.lang.String)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.lang.Byte getByte(int)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.lang.String getString(java.lang.String)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.io.Reader getCharacterStream(java.lang.String)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.lang.Float getFloat(int)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.lang.Float getFloat(java.lang.String)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.lang.Short getShort(int)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.sql.Timestamp getTimestamp(int)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.lang.Double getDouble(int)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.sql.Timestamp getTimestamp(java.lang.String)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.lang.Boolean getBoolean(int)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.lang.Double getDouble(java.lang.String)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.lang.Integer getInt(java.lang.String)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.sql.Date getDate(java.lang.String)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.lang.Short getShort(java.lang.String)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.sql.Time getTime(int)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.lang.Boolean getBoolean(java.lang.String)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.io.InputStream getBinaryStream(int)" class="com.sonicbase.query.ResultSet" />
	<method signature="java.lang.Long getLong(int)" class="com.sonicbase.query.ResultSet" />
	<method signature="boolean next()" class="com.sonicbase.query.ResultSet" />
	<method signature="java.io.InputStream getUnicodeStream(java.lang.String)" class="com.sonicbase.query.ResultSet" />
	<class name="com.sonicbase.client.ReconfigureResults" />
	<method signature="void &lt;init&gt;(boolean,int)" class="com.sonicbase.client.ReconfigureResults" />
	<method signature="boolean isHandedOffToMaster()" class="com.sonicbase.client.ReconfigureResults" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.client.ReconfigureResults" />
	<method signature="int getShardCount()" class="com.sonicbase.client.ReconfigureResults" />
	<field name="handedOffToMaster" class="com.sonicbase.client.ReconfigureResults" />
	<field name="shardCount" class="com.sonicbase.client.ReconfigureResults" />
	<class name="com.sonicbase.server.ReadManager" />
	<method signature="void startDiskResultsReaper()" class="com.sonicbase.server.ReadManager" />
	<method signature="java.util.concurrent.ConcurrentHashMap access$200(com.sonicbase.server.ReadManager)" class="com.sonicbase.server.ReadManager" />
	<method signature="com.sonicbase.common.ComObject countRecords(com.sonicbase.common.ComObject)" class="com.sonicbase.server.ReadManager" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.ReadManager" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.ReadManager" />
	<method signature="com.sonicbase.common.Record[] applySelectToResultRecords(java.lang.String,java.util.Set,boolean,byte[][],java.lang.Object[],com.sonicbase.schema.TableSchema,com.sonicbase.query.impl.Counter[],com.sonicbase.query.impl.GroupByContext)" class="com.sonicbase.server.ReadManager" />
	<method signature="java.util.Set getColumnOffsets(java.io.DataInputStream,com.sonicbase.util.DataUtil$ResultLength,java.lang.String,com.sonicbase.schema.TableSchema)" class="com.sonicbase.server.ReadManager" />
	<method signature="com.sonicbase.common.ComObject serverSelectDelete(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.ReadManager" />
	<method signature="com.sonicbase.common.ComObject indexLookup(com.sonicbase.common.ComObject)" class="com.sonicbase.server.ReadManager" />
	<method signature="com.sonicbase.server.DatabaseServer access$100(com.sonicbase.server.ReadManager)" class="com.sonicbase.server.ReadManager" />
	<method signature="void expirePreparedStatement(long)" class="com.sonicbase.server.ReadManager" />
	<method signature="java.util.Set getSimpleColumnOffsets(java.io.DataInputStream,com.sonicbase.util.DataUtil$ResultLength,java.lang.String,com.sonicbase.schema.TableSchema)" class="com.sonicbase.server.ReadManager" />
	<method signature="com.sonicbase.common.ComObject indexLookupExpression(com.sonicbase.common.ComObject)" class="com.sonicbase.server.ReadManager" />
	<method signature="java.util.Map$Entry doIndexLookupWithRecordsExpression(java.lang.String,int,com.sonicbase.schema.TableSchema,java.util.Set,com.sonicbase.jdbcdriver.ParameterHandler,com.sonicbase.query.Expression,com.sonicbase.index.Index,java.lang.Object[],java.lang.Boolean,java.util.List,com.sonicbase.query.impl.Counter[],com.sonicbase.query.impl.GroupByContext)" class="com.sonicbase.server.ReadManager" />
	<method signature="void handleRecord(java.lang.String,com.sonicbase.schema.TableSchema,com.sonicbase.schema.IndexSchema,long,com.sonicbase.index.Index,java.lang.Object[],com.sonicbase.jdbcdriver.ParameterHandler,boolean,com.sonicbase.query.Expression,java.util.Set,boolean,java.util.List,java.util.List,boolean,com.sonicbase.query.impl.Counter[],com.sonicbase.query.impl.GroupByContext,byte[][],byte[][])" class="com.sonicbase.server.ReadManager" />
	<method signature="byte[][] processViewFlags(java.lang.String,com.sonicbase.schema.TableSchema,com.sonicbase.schema.IndexSchema,com.sonicbase.index.Index,long,java.lang.Object[],byte[][])" class="com.sonicbase.server.ReadManager" />
	<method signature="java.util.Map$Entry doIndexLookupOneKey(java.lang.String,int,com.sonicbase.schema.TableSchema,com.sonicbase.schema.IndexSchema,com.sonicbase.jdbcdriver.ParameterHandler,boolean,com.sonicbase.query.Expression,java.util.Set,boolean,java.util.List,java.lang.Object[],java.lang.Object[],com.sonicbase.query.BinaryExpression$Operator,com.sonicbase.index.Index,java.lang.Boolean,java.util.List,java.util.List,long,boolean,com.sonicbase.query.impl.Counter[],com.sonicbase.query.impl.GroupByContext)" class="com.sonicbase.server.ReadManager" />
	<method signature="com.sonicbase.common.ComObject batchIndexLookup(com.sonicbase.common.ComObject)" class="com.sonicbase.server.ReadManager" />
	<method signature="com.sonicbase.common.ComObject closeResultSet(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.ReadManager" />
	<method signature="void count(com.sonicbase.query.impl.Counter[],com.sonicbase.common.Record)" class="com.sonicbase.server.ReadManager" />
	<method signature="com.sonicbase.common.ComObject evaluateCounter(com.sonicbase.common.ComObject)" class="com.sonicbase.server.ReadManager" />
	<method signature="java.util.Map$Entry doIndexLookupTwoKeys(java.lang.String,int,com.sonicbase.schema.TableSchema,com.sonicbase.schema.IndexSchema,boolean,java.util.List,java.lang.Object[],java.lang.Object[],java.util.Set,java.lang.Object[],java.lang.Object[],com.sonicbase.query.BinaryExpression$Operator,com.sonicbase.query.BinaryExpression$Operator,com.sonicbase.jdbcdriver.ParameterHandler,boolean,com.sonicbase.query.Expression,com.sonicbase.index.Index,java.lang.Boolean,java.util.List,java.util.List,boolean,com.sonicbase.query.impl.Counter[],com.sonicbase.query.impl.GroupByContext)" class="com.sonicbase.server.ReadManager" />
	<method signature="void startPreparedReaper()" class="com.sonicbase.server.ReadManager" />
	<method signature="com.sonicbase.common.ComObject serverSelect(com.sonicbase.common.ComObject)" class="com.sonicbase.server.ReadManager" />
	<method signature="com.sonicbase.common.Logger access$000(com.sonicbase.server.ReadManager)" class="com.sonicbase.server.ReadManager" />
	<field name="server" class="com.sonicbase.server.ReadManager" />
	<field name="diskReaper" class="com.sonicbase.server.ReadManager" />
	<field name="SELECT_PAGE_SIZE" class="com.sonicbase.server.ReadManager" />
	<field name="preparedIndexLookups" class="com.sonicbase.server.ReadManager" />
	<field name="logger" class="com.sonicbase.server.ReadManager" />
	<field name="METRICS" class="com.sonicbase.server.ReadManager" />
	<field name="INDEX_LOOKUP_STATS" class="com.sonicbase.server.ReadManager" />
	<field name="lookupCount" class="com.sonicbase.server.ReadManager" />
	<field name="preparedReaper" class="com.sonicbase.server.ReadManager" />
	<field name="BATCH_INDEX_LOOKUP_STATS" class="com.sonicbase.server.ReadManager" />
	<class name="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="void addExpression(com.sonicbase.query.impl.ExpressionImpl)" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="void setLeftExpression(com.sonicbase.query.Expression)" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="boolean isNot()" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="void addValue(java.lang.String)" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="void setColumns(java.util.List)" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(int,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="void setColumn(java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="java.lang.Object evaluateSingleRecord(com.sonicbase.schema.TableSchema[],com.sonicbase.common.Record[],com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="void setTableName(java.lang.String)" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="boolean canSortWithIndex()" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl getLeftExpression()" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ColumnImpl getPrimaryColumn()" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="void addValue(long)" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="void setExpressionList(java.util.List)" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="void setNot(boolean)" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="boolean canUseIndex()" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="java.util.List getExpressionList()" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient,com.sonicbase.jdbcdriver.ParameterHandler,java.lang.String)" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$Type getType()" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="void queryRewrite()" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="java.lang.String toString()" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.query.impl.InExpressionImpl" />
	<method signature="void getColumns(java.util.Set)" class="com.sonicbase.query.impl.InExpressionImpl" />
	<field name="expressionList" class="com.sonicbase.query.impl.InExpressionImpl" />
	<field name="isNot" class="com.sonicbase.query.impl.InExpressionImpl" />
	<field name="leftExpression" class="com.sonicbase.query.impl.InExpressionImpl" />
	<field name="client" class="com.sonicbase.query.impl.InExpressionImpl" />
	<field name="parms" class="com.sonicbase.query.impl.InExpressionImpl" />
	<field name="tableName" class="com.sonicbase.query.impl.InExpressionImpl" />
	<class name="com.sonicbase.schema.DataType$DateConverter" />
	<method signature="java.lang.Object convert(java.lang.Object)" class="com.sonicbase.schema.DataType$DateConverter" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.DataType$DateConverter" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$DateConverter" />
	<method signature="void &lt;init&gt;(com.sonicbase.schema.DataType$1)" class="com.sonicbase.schema.DataType$DateConverter" />
	<class name="com.sonicbase.client.DatabaseClient$FailedToInsertException" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.client.DatabaseClient$FailedToInsertException" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient,java.lang.String)" class="com.sonicbase.client.DatabaseClient$FailedToInsertException" />
	<field name="this$0" class="com.sonicbase.client.DatabaseClient$FailedToInsertException" />
	<class name="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject isEntireRestoreComplete(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject deleteIndexEntryByKey(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="void shutdown()" class="com.sonicbase.server.MethodInvoker" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject getLogFile(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject getFile(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject getLastBackupDir(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject prepareSourceForServerReload(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject healthCheckPriority(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject pushMaxSequenceNum(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="byte[] startBackup(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject getDatabaseFile(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject reloadServer(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject reconfigureCluster(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject sendLogsToPeer(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject countRecords(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject startRestore(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="byte[] handleCommand(java.lang.String,byte[],boolean,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="byte[] handleCommand(java.lang.String,byte[],long,long,boolean,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject batchInsertIndexEntryByKey(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject setMaxRecordId(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject createTableSlave(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject logError(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject stopRepartitioning(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject doPopulateIndex(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject deleteIndexEntry(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject isBackupComplete(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject batchIndexLookup(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject evaluateCounter(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject createTable(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject isShardRepartitioningComplete(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject dropIndexSlave(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject updateSchema(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject indexLookupExpression(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject getIndexCounts(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="byte[] sendQueueFile(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject serverSelectDelete(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject promoteToMaster(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject dropTable(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject prepareForBackup(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject doRestoreFileSystem(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject truncateTable(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject areAllLongRunningCommandsComplete(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject createIndexSlave(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject deleteRecord(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject promoteEntireReplicaToMaster(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject markReplicaAlive(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject doBackupAWS(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject populateIndex(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject dropIndex(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject getOSStats(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject isRestoreComplete(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject dropColumn(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject allocateRecordIds(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject promoteToMasterAndPushSchema(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject echo(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject commit(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject doRestoreAWS(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject serverSelect(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject echo2(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject pushMaxRecordId(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject getPartitionSize(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject updateRecord(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject block(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject insertIndexEntryByKey(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject addColumn(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject markReplicaDead(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject expirePreparedStatement(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject finishServerReloadForSource(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject getRecoverProgress(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject closeResultSet(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject forceDeletes(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject finishRestore(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject abortTransaction(java.lang.String,byte[],boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject deleteMovedRecords(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject indexLookup(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject getKeyAtOffset(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer,com.sonicbase.server.DeleteManager,com.sonicbase.server.SnapshotManager,com.sonicbase.server.UpdateManager,com.sonicbase.server.TransactionManager,com.sonicbase.server.ReadManager,com.sonicbase.server.LogManager,com.sonicbase.server.SchemaManager)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject createDatabase(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject doRebalanceOrderedIndex(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject finishBackup(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject rebalanceOrderedIndex(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject isEntireBackupComplete(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject isServerReloadFinished(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="byte[] noOp(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject getDbNames(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject deletePeerLogs(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject notifyRepartitioningComplete(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="int getTestWriteCallCount()" class="com.sonicbase.server.MethodInvoker" />
	<method signature="void setRepartitioner(com.sonicbase.index.Repartitioner)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject isRepartitioningComplete(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject setMaxSequenceNum(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject testWrite(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject beginRebalance(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="java.lang.Long getExistingSequence0(java.lang.String)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject insertIndexEntryByKeyWithRecord(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="java.lang.Long getExistingSequence1(java.lang.String)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject batchInsertIndexEntryByKeyWithRecord(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject rollback(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject getSchema(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject getConfig(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject electNewMaster(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject createIndex(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject prepareForRestore(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject healthCheck(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject prepareToComeAlive(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject updateServersConfig(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject moveIndexEntries(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject doBackupFileSystem(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<method signature="com.sonicbase.common.ComObject reserveNextIdFromReplica(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.MethodInvoker" />
	<field name="blockCount" class="com.sonicbase.server.MethodInvoker" />
	<field name="echoCount" class="com.sonicbase.server.MethodInvoker" />
	<field name="readManager" class="com.sonicbase.server.MethodInvoker" />
	<field name="server" class="com.sonicbase.server.MethodInvoker" />
	<field name="schemaManager" class="com.sonicbase.server.MethodInvoker" />
	<field name="logger" class="com.sonicbase.server.MethodInvoker" />
	<field name="testWriteCallCount" class="com.sonicbase.server.MethodInvoker" />
	<field name="snapshotManager" class="com.sonicbase.server.MethodInvoker" />
	<field name="logManager" class="com.sonicbase.server.MethodInvoker" />
	<field name="repartitioner" class="com.sonicbase.server.MethodInvoker" />
	<field name="priorityCommands" class="com.sonicbase.server.MethodInvoker" />
	<field name="common" class="com.sonicbase.server.MethodInvoker" />
	<field name="deleteManager" class="com.sonicbase.server.MethodInvoker" />
	<field name="echo2Count" class="com.sonicbase.server.MethodInvoker" />
	<field name="updateManager" class="com.sonicbase.server.MethodInvoker" />
	<field name="transactionManager" class="com.sonicbase.server.MethodInvoker" />
	<field name="shutdown" class="com.sonicbase.server.MethodInvoker" />
	<class name="com.sonicbase.common.ComArray" />
	<method signature="void add(byte[])" class="com.sonicbase.common.ComArray" />
	<method signature="void add(com.sonicbase.common.ComObject)" class="com.sonicbase.common.ComArray" />
	<method signature="java.util.List getArray()" class="com.sonicbase.common.ComArray" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.ComArray" />
	<method signature="void add(java.lang.String)" class="com.sonicbase.common.ComArray" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.common.ComArray" />
	<method signature="com.sonicbase.common.ComArray addArray(com.sonicbase.common.ComObject$Tag,com.sonicbase.common.ComObject$Type)" class="com.sonicbase.common.ComArray" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.common.ComArray" />
	<method signature="void add(int)" class="com.sonicbase.common.ComArray" />
	<method signature="void add(long)" class="com.sonicbase.common.ComArray" />
	<method signature="void &lt;init&gt;(com.sonicbase.common.ComObject$Type)" class="com.sonicbase.common.ComArray" />
	<method signature="void &lt;init&gt;(java.io.DataInputStream)" class="com.sonicbase.common.ComArray" />
	<field name="array" class="com.sonicbase.common.ComArray" />
	<field name="nestedType" class="com.sonicbase.common.ComArray" />
	<class name="com.sonicbase.query.impl.NClob" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.NClob" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.NClob" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.sonicbase.query.impl.NClob" />
	<class name="com.sonicbase.server.TransactionManager$Operation" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.TransactionManager$OperationType,java.lang.String,byte[],boolean)" class="com.sonicbase.server.TransactionManager$Operation" />
	<method signature="java.lang.String getCommand()" class="com.sonicbase.server.TransactionManager$Operation" />
	<method signature="boolean getReplayed()" class="com.sonicbase.server.TransactionManager$Operation" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.TransactionManager$Operation" />
	<method signature="byte[] getBody()" class="com.sonicbase.server.TransactionManager$Operation" />
	<method signature="com.sonicbase.server.TransactionManager$OperationType getType()" class="com.sonicbase.server.TransactionManager$Operation" />
	<field name="type" class="com.sonicbase.server.TransactionManager$Operation" />
	<field name="body" class="com.sonicbase.server.TransactionManager$Operation" />
	<field name="command" class="com.sonicbase.server.TransactionManager$Operation" />
	<field name="replayed" class="com.sonicbase.server.TransactionManager$Operation" />
	<class name="com.sonicbase.client.DatabaseClient$StatementCacheEntry" />
	<method signature="java.util.concurrent.atomic.AtomicLong access$900(com.sonicbase.client.DatabaseClient$StatementCacheEntry)" class="com.sonicbase.client.DatabaseClient$StatementCacheEntry" />
	<method signature="net.sf.jsqlparser.statement.Statement access$800(com.sonicbase.client.DatabaseClient$StatementCacheEntry)" class="com.sonicbase.client.DatabaseClient$StatementCacheEntry" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.client.DatabaseClient$StatementCacheEntry" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.client.DatabaseClient$StatementCacheEntry" />
	<method signature="net.sf.jsqlparser.statement.Statement access$802(com.sonicbase.client.DatabaseClient$StatementCacheEntry,net.sf.jsqlparser.statement.Statement)" class="com.sonicbase.client.DatabaseClient$StatementCacheEntry" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient$1)" class="com.sonicbase.client.DatabaseClient$StatementCacheEntry" />
	<field name="whenUsed" class="com.sonicbase.client.DatabaseClient$StatementCacheEntry" />
	<field name="statement" class="com.sonicbase.client.DatabaseClient$StatementCacheEntry" />
	<class name="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<method signature="void await()" class="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<method signature="void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)" class="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<method signature="void handlerRemoved(io.netty.channel.ChannelHandlerContext)" class="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<method signature="void write(byte[])" class="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<method signature="void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)" class="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<method signature="void channelRegistered(io.netty.channel.ChannelHandlerContext)" class="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<method signature="io.netty.channel.socket.SocketChannel access$200(com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler)" class="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<method signature="void handlerAdded(io.netty.channel.ChannelHandlerContext)" class="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<field name="lenBytes" class="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<field name="lenPos" class="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<field name="bodyPos" class="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<field name="channel" class="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<field name="latch" class="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<field name="body" class="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler" />
	<class name="com.sonicbase.index.Repartitioner$10" />
	<method signature="void &lt;init&gt;(java.lang.String,com.sonicbase.client.DatabaseClient,int,com.sonicbase.index.Repartitioner$GlobalIndexCounts)" class="com.sonicbase.index.Repartitioner$10" />
	<method signature="java.lang.Object call()" class="com.sonicbase.index.Repartitioner$10" />
	<field name="val$client" class="com.sonicbase.index.Repartitioner$10" />
	<field name="val$ret" class="com.sonicbase.index.Repartitioner$10" />
	<field name="val$dbName" class="com.sonicbase.index.Repartitioner$10" />
	<field name="val$shard" class="com.sonicbase.index.Repartitioner$10" />
	<class name="com.sonicbase.server.DeleteManager" />
	<method signature="java.io.File getReplicaRoot()" class="com.sonicbase.server.DeleteManager" />
	<method signature="void getFiles(java.util.List)" class="com.sonicbase.server.DeleteManager" />
	<method signature="void restoreAWS(java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.DeleteManager" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.DeleteManager" />
	<method signature="void backupFileSystem(java.lang.String,java.lang.String)" class="com.sonicbase.server.DeleteManager" />
	<method signature="void doDeletes()" class="com.sonicbase.server.DeleteManager" />
	<method signature="com.sonicbase.server.DatabaseServer access$000(com.sonicbase.server.DeleteManager)" class="com.sonicbase.server.DeleteManager" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DeleteManager" />
	<method signature="void restoreFileSystem(java.lang.String,java.lang.String)" class="com.sonicbase.server.DeleteManager" />
	<method signature="void saveDeletes(java.lang.String,java.lang.String,java.lang.String,java.util.concurrent.ConcurrentLinkedQueue)" class="com.sonicbase.server.DeleteManager" />
	<method signature="void forceDeletes()" class="com.sonicbase.server.DeleteManager" />
	<method signature="void start()" class="com.sonicbase.server.DeleteManager" />
	<method signature="void backupAWS(java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.DeleteManager" />
	<method signature="com.sonicbase.common.Logger access$100(com.sonicbase.server.DeleteManager)" class="com.sonicbase.server.DeleteManager" />
	<field name="mainThread" class="com.sonicbase.server.DeleteManager" />
	<field name="databaseServer" class="com.sonicbase.server.DeleteManager" />
	<field name="executor" class="com.sonicbase.server.DeleteManager" />
	<field name="logger" class="com.sonicbase.server.DeleteManager" />
	<class name="com.sonicbase.bench.TestRebalance$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.bench.TestRebalance,com.sonicbase.server.DatabaseServer[],int,com.sonicbase.util.JsonDict)" class="com.sonicbase.bench.TestRebalance$1" />
	<method signature="java.lang.Object call()" class="com.sonicbase.bench.TestRebalance$1" />
	<field name="val$dbServers" class="com.sonicbase.bench.TestRebalance$1" />
	<field name="val$config" class="com.sonicbase.bench.TestRebalance$1" />
	<field name="this$0" class="com.sonicbase.bench.TestRebalance$1" />
	<field name="val$shard" class="com.sonicbase.bench.TestRebalance$1" />
	<class name="com.sonicbase.client.DatabaseClient$SocketException" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.client.DatabaseClient$SocketException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="com.sonicbase.client.DatabaseClient$SocketException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.sonicbase.client.DatabaseClient$SocketException" />
	<class name="com.sonicbase.query.impl.SelectStatementImpl$DistinctRecord" />
	<method signature="int hashCode()" class="com.sonicbase.query.impl.SelectStatementImpl$DistinctRecord" />
	<method signature="boolean equals(java.lang.Object)" class="com.sonicbase.query.impl.SelectStatementImpl$DistinctRecord" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.SelectStatementImpl$DistinctRecord" />
	<method signature="void &lt;init&gt;(com.sonicbase.query.impl.SelectStatementImpl,com.sonicbase.common.Record,java.util.Comparator[],boolean[],int[],java.util.List)" class="com.sonicbase.query.impl.SelectStatementImpl$DistinctRecord" />
	<field name="distinctFields" class="com.sonicbase.query.impl.SelectStatementImpl$DistinctRecord" />
	<field name="record" class="com.sonicbase.query.impl.SelectStatementImpl$DistinctRecord" />
	<field name="this$0" class="com.sonicbase.query.impl.SelectStatementImpl$DistinctRecord" />
	<field name="isArray" class="com.sonicbase.query.impl.SelectStatementImpl$DistinctRecord" />
	<field name="selectColumns" class="com.sonicbase.query.impl.SelectStatementImpl$DistinctRecord" />
	<field name="comparators" class="com.sonicbase.query.impl.SelectStatementImpl$DistinctRecord" />
	<class name="com.sonicbase.query.CreateTableStatement" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.CreateTableStatement" />
	<method signature="void setTableName(java.lang.String)" class="com.sonicbase.query.CreateTableStatement" />
	<method signature="void setPrimaryKey(java.util.List)" class="com.sonicbase.query.CreateTableStatement" />
	<method signature="void addField(java.lang.String,int)" class="com.sonicbase.query.CreateTableStatement" />
	<method signature="int execute(java.lang.String)" class="com.sonicbase.query.CreateTableStatement" />
	<class name="com.sonicbase.server.SnapshotManager$ByteCounterStream" />
	<method signature="void mark(int)" class="com.sonicbase.server.SnapshotManager$ByteCounterStream" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.SnapshotManager,java.util.concurrent.atomic.AtomicLong,java.io.FileInputStream)" class="com.sonicbase.server.SnapshotManager$ByteCounterStream" />
	<method signature="long skip(long)" class="com.sonicbase.server.SnapshotManager$ByteCounterStream" />
	<method signature="void reset()" class="com.sonicbase.server.SnapshotManager$ByteCounterStream" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.SnapshotManager$ByteCounterStream" />
	<method signature="void close()" class="com.sonicbase.server.SnapshotManager$ByteCounterStream" />
	<method signature="int read(byte[],int,int)" class="com.sonicbase.server.SnapshotManager$ByteCounterStream" />
	<method signature="int read()" class="com.sonicbase.server.SnapshotManager$ByteCounterStream" />
	<method signature="boolean markSupported()" class="com.sonicbase.server.SnapshotManager$ByteCounterStream" />
	<method signature="int read(byte[])" class="com.sonicbase.server.SnapshotManager$ByteCounterStream" />
	<method signature="int available()" class="com.sonicbase.server.SnapshotManager$ByteCounterStream" />
	<field name="stream" class="com.sonicbase.server.SnapshotManager$ByteCounterStream" />
	<field name="this$0" class="com.sonicbase.server.SnapshotManager$ByteCounterStream" />
	<field name="finishedBytes" class="com.sonicbase.server.SnapshotManager$ByteCounterStream" />
	<class name="com.sonicbase.jdbcdriver.NotImplementedException" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.NotImplementedException" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.jdbcdriver.NotImplementedException" />
	<class name="com.sonicbase.jdbcdriver.Parameter$BigDecimal" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$BigDecimal" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$BigDecimal" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$BigDecimal" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$BigDecimal" />
	<method signature="void &lt;init&gt;(java.math.BigDecimal)" class="com.sonicbase.jdbcdriver.Parameter$BigDecimal" />
	<class name="com.sonicbase.server.SchemaManager" />
	<method signature="void addAllIndices(java.lang.String)" class="com.sonicbase.server.SchemaManager" />
	<method signature="com.sonicbase.common.ComObject createIndexSlave(com.sonicbase.common.ComObject)" class="com.sonicbase.server.SchemaManager" />
	<method signature="com.sonicbase.common.ComObject dropIndexSlave(com.sonicbase.common.ComObject)" class="com.sonicbase.server.SchemaManager" />
	<method signature="com.sonicbase.common.ComObject createTable(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.SchemaManager" />
	<method signature="com.sonicbase.common.ComObject dropIndex(com.sonicbase.common.ComObject)" class="com.sonicbase.server.SchemaManager" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.SchemaManager" />
	<method signature="com.sonicbase.common.ComObject dropColumn(com.sonicbase.common.ComObject)" class="com.sonicbase.server.SchemaManager" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.SchemaManager" />
	<method signature="com.sonicbase.common.ComObject createIndex(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.SchemaManager" />
	<method signature="com.sonicbase.common.ComObject addColumn(com.sonicbase.common.ComObject)" class="com.sonicbase.server.SchemaManager" />
	<method signature="com.sonicbase.common.ComObject createTableSlave(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.SchemaManager" />
	<method signature="java.util.List createIndex(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[])" class="com.sonicbase.server.SchemaManager" />
	<method signature="void doCreateIndex(java.lang.String,com.sonicbase.schema.TableSchema,java.lang.String,java.lang.String[])" class="com.sonicbase.server.SchemaManager" />
	<method signature="com.sonicbase.common.ComObject createDatabase(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.SchemaManager" />
	<method signature="com.sonicbase.common.ComObject dropTable(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.SchemaManager" />
	<field name="server" class="com.sonicbase.server.SchemaManager" />
	<field name="autoIncrementValues" class="com.sonicbase.server.SchemaManager" />
	<field name="logger" class="com.sonicbase.server.SchemaManager" />
	<class name="com.sonicbase.server.DatabaseServer$Response" />
	<method signature="java.lang.Exception getException()" class="com.sonicbase.server.DatabaseServer$Response" />
	<method signature="void &lt;init&gt;(java.lang.Exception)" class="com.sonicbase.server.DatabaseServer$Response" />
	<method signature="byte[] getBytes()" class="com.sonicbase.server.DatabaseServer$Response" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.DatabaseServer$Response" />
	<method signature="void &lt;init&gt;(byte[])" class="com.sonicbase.server.DatabaseServer$Response" />
	<field name="exception" class="com.sonicbase.server.DatabaseServer$Response" />
	<field name="bytes" class="com.sonicbase.server.DatabaseServer$Response" />
	<class name="com.sonicbase.util.JsonArray" />
	<method signature="int size()" class="com.sonicbase.util.JsonArray" />
	<method signature="com.sonicbase.util.JsonDict addDict()" class="com.sonicbase.util.JsonArray" />
	<method signature="void add(boolean[])" class="com.sonicbase.util.JsonArray" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.util.JsonArray" />
	<method signature="void add(com.sonicbase.util.JsonDict[])" class="com.sonicbase.util.JsonArray" />
	<method signature="void add(long[])" class="com.sonicbase.util.JsonArray" />
	<method signature="void remove(int)" class="com.sonicbase.util.JsonArray" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.util.JsonArray" />
	<method signature="void add(boolean)" class="com.sonicbase.util.JsonArray" />
	<method signature="int[] toIntArray()" class="com.sonicbase.util.JsonArray" />
	<method signature="com.sonicbase.util.JsonDict addDict(com.sonicbase.util.JsonDict)" class="com.sonicbase.util.JsonArray" />
	<method signature="void add(long)" class="com.sonicbase.util.JsonArray" />
	<method signature="void toString(java.lang.StringBuilder,boolean)" class="com.sonicbase.util.JsonArray" />
	<method signature="java.lang.String[] toStringArray()" class="com.sonicbase.util.JsonArray" />
	<method signature="long[] toLongArray()" class="com.sonicbase.util.JsonArray" />
	<method signature="int getInt(int)" class="com.sonicbase.util.JsonArray" />
	<method signature="long getLong(int)" class="com.sonicbase.util.JsonArray" />
	<method signature="boolean isArray(int)" class="com.sonicbase.util.JsonArray" />
	<method signature="void add(int[])" class="com.sonicbase.util.JsonArray" />
	<method signature="com.sonicbase.util.JsonArray getArray(int)" class="com.sonicbase.util.JsonArray" />
	<method signature="boolean isDict(int)" class="com.sonicbase.util.JsonArray" />
	<method signature="com.sonicbase.util.JsonArray fromJson(com.google.gson.JsonArray)" class="com.sonicbase.util.JsonArray" />
	<method signature="void add(java.lang.String)" class="com.sonicbase.util.JsonArray" />
	<method signature="java.lang.String toString()" class="com.sonicbase.util.JsonArray" />
	<method signature="boolean[] toBooleanArray()" class="com.sonicbase.util.JsonArray" />
	<method signature="com.sonicbase.util.JsonArray addArray()" class="com.sonicbase.util.JsonArray" />
	<method signature="com.sonicbase.util.JsonDict getDict(int)" class="com.sonicbase.util.JsonArray" />
	<method signature="java.lang.String getString(int)" class="com.sonicbase.util.JsonArray" />
	<method signature="com.sonicbase.util.JsonDict[] toDictArray()" class="com.sonicbase.util.JsonArray" />
	<method signature="void add(java.lang.String[])" class="com.sonicbase.util.JsonArray" />
	<method signature="void add(java.lang.Integer)" class="com.sonicbase.util.JsonArray" />
	<field name="logger" class="com.sonicbase.util.JsonArray" />
	<field name="list" class="com.sonicbase.util.JsonArray" />
	<class name="com.sonicbase.jdbcdriver.ConnectionProxy$Replica" />
	<method signature="com.sonicbase.jdbcdriver.ConnectionProxy$Replica valueOf(java.lang.String)" class="com.sonicbase.jdbcdriver.ConnectionProxy$Replica" />
	<method signature="void &lt;init&gt;(java.lang.String,int,com.sonicbase.client.DatabaseClient$Replica)" class="com.sonicbase.jdbcdriver.ConnectionProxy$Replica" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.ConnectionProxy$Replica" />
	<method signature="com.sonicbase.jdbcdriver.ConnectionProxy$Replica[] values()" class="com.sonicbase.jdbcdriver.ConnectionProxy$Replica" />
	<method signature="com.sonicbase.client.DatabaseClient$Replica access$000(com.sonicbase.jdbcdriver.ConnectionProxy$Replica)" class="com.sonicbase.jdbcdriver.ConnectionProxy$Replica" />
	<field name="secondary" class="com.sonicbase.jdbcdriver.ConnectionProxy$Replica" />
	<field name="all" class="com.sonicbase.jdbcdriver.ConnectionProxy$Replica" />
	<field name="def" class="com.sonicbase.jdbcdriver.ConnectionProxy$Replica" />
	<field name="specified" class="com.sonicbase.jdbcdriver.ConnectionProxy$Replica" />
	<field name="cliReplica" class="com.sonicbase.jdbcdriver.ConnectionProxy$Replica" />
	<field name="$VALUES" class="com.sonicbase.jdbcdriver.ConnectionProxy$Replica" />
	<field name="primary" class="com.sonicbase.jdbcdriver.ConnectionProxy$Replica" />
	<field name="master" class="com.sonicbase.jdbcdriver.ConnectionProxy$Replica" />
	<class name="com.sonicbase.query.SelectStatement" />
	<method signature="void addSelectColumn(java.lang.String,net.sf.jsqlparser.expression.operators.relational.ExpressionList,java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.query.SelectStatement" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.SelectStatement" />
	<method signature="void setFromTable(java.lang.String)" class="com.sonicbase.query.SelectStatement" />
	<method signature="void setWhereClause(com.sonicbase.query.Expression)" class="com.sonicbase.query.SelectStatement" />
	<method signature="java.lang.Object execute(java.lang.String,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.SelectStatement" />
	<method signature="void addOrderByExpression(java.lang.String,java.lang.String,boolean)" class="com.sonicbase.query.SelectStatement" />
	<method signature="void addJoinExpression(com.sonicbase.query.SelectStatement$JoinType,java.lang.String,com.sonicbase.query.Expression)" class="com.sonicbase.query.SelectStatement" />
	<class name="com.sonicbase.schema.DataType$20" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$20" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.schema.DataType$20" />
	<class name="com.sonicbase.schema.DataType$21" />
	<method signature="java.lang.Object increment(java.lang.Object)" class="com.sonicbase.schema.DataType$21" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$21" />
	<class name="com.sonicbase.schema.DataType$22" />
	<method signature="java.lang.Object increment(java.lang.Object)" class="com.sonicbase.schema.DataType$22" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$22" />
	<class name="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<method signature="boolean canUseIndex()" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$Type getType()" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(int,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<method signature="java.lang.String getFromTable()" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<method signature="java.lang.Object evaluateSingleRecord(com.sonicbase.schema.TableSchema[],com.sonicbase.common.Record[],com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<method signature="void queryRewrite()" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<method signature="void setFromTable(java.lang.String)" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<method signature="java.lang.String toString()" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<method signature="boolean canSortWithIndex()" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ColumnImpl getPrimaryColumn()" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<method signature="void getColumns(java.util.Set)" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<field name="fromTable" class="com.sonicbase.query.impl.AllRecordsExpressionImpl" />
	<class name="com.sonicbase.schema.DataType$23" />
	<method signature="java.lang.Object increment(java.lang.Object)" class="com.sonicbase.schema.DataType$23" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$23" />
	<class name="com.sonicbase.query.impl.Counter$1" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.Counter$1" />
	<field name="$SwitchMap$com$sonicbase$schema$DataType$Type" class="com.sonicbase.query.impl.Counter$1" />
	<class name="com.sonicbase.client.DatabaseClient$Replica" />
	<method signature="com.sonicbase.client.DatabaseClient$Replica[] values()" class="com.sonicbase.client.DatabaseClient$Replica" />
	<method signature="com.sonicbase.client.DatabaseClient$Replica valueOf(java.lang.String)" class="com.sonicbase.client.DatabaseClient$Replica" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.client.DatabaseClient$Replica" />
	<method signature="void &lt;init&gt;(java.lang.String,int)" class="com.sonicbase.client.DatabaseClient$Replica" />
	<field name="secondary" class="com.sonicbase.client.DatabaseClient$Replica" />
	<field name="all" class="com.sonicbase.client.DatabaseClient$Replica" />
	<field name="def" class="com.sonicbase.client.DatabaseClient$Replica" />
	<field name="specified" class="com.sonicbase.client.DatabaseClient$Replica" />
	<field name="$VALUES" class="com.sonicbase.client.DatabaseClient$Replica" />
	<field name="primary" class="com.sonicbase.client.DatabaseClient$Replica" />
	<field name="master" class="com.sonicbase.client.DatabaseClient$Replica" />
	<class name="com.sonicbase.server.LogManager$ByteCounterStream" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.LogManager,java.io.InputStream)" class="com.sonicbase.server.LogManager$ByteCounterStream" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.LogManager$ByteCounterStream" />
	<method signature="int read()" class="com.sonicbase.server.LogManager$ByteCounterStream" />
	<field name="in" class="com.sonicbase.server.LogManager$ByteCounterStream" />
	<field name="this$0" class="com.sonicbase.server.LogManager$ByteCounterStream" />
	<field name="count" class="com.sonicbase.server.LogManager$ByteCounterStream" />
	<class name="com.sonicbase.server.DatabaseServer$1$1" />
	<method signature="void run()" class="com.sonicbase.server.DatabaseServer$1$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer$1,int,int[],int[])" class="com.sonicbase.server.DatabaseServer$1$1" />
	<field name="val$monitorReplicas" class="com.sonicbase.server.DatabaseServer$1$1" />
	<field name="this$1" class="com.sonicbase.server.DatabaseServer$1$1" />
	<field name="val$monitorShards" class="com.sonicbase.server.DatabaseServer$1$1" />
	<field name="val$shard" class="com.sonicbase.server.DatabaseServer$1$1" />
	<class name="com.sonicbase.schema.DataType$BigDecimalConverter" />
	<method signature="java.lang.Object convert(java.lang.Object)" class="com.sonicbase.schema.DataType$BigDecimalConverter" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.DataType$BigDecimalConverter" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$BigDecimalConverter" />
	<method signature="void &lt;init&gt;(com.sonicbase.schema.DataType$1)" class="com.sonicbase.schema.DataType$BigDecimalConverter" />
	<class name="com.sonicbase.server.ReadManager$2" />
	<method signature="void run()" class="com.sonicbase.server.ReadManager$2" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.ReadManager)" class="com.sonicbase.server.ReadManager$2" />
	<field name="this$0" class="com.sonicbase.server.ReadManager$2" />
	<class name="com.sonicbase.server.ReadManager$1" />
	<method signature="void run()" class="com.sonicbase.server.ReadManager$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.ReadManager)" class="com.sonicbase.server.ReadManager$1" />
	<field name="this$0" class="com.sonicbase.server.ReadManager$1" />
	<class name="com.sonicbase.index.Repartitioner$IndexCounts" />
	<method signature="java.util.concurrent.ConcurrentHashMap access$2400(com.sonicbase.index.Repartitioner$IndexCounts)" class="com.sonicbase.index.Repartitioner$IndexCounts" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.index.Repartitioner$IndexCounts" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.index.Repartitioner$IndexCounts" />
	<method signature="java.util.concurrent.ConcurrentHashMap getCounts()" class="com.sonicbase.index.Repartitioner$IndexCounts" />
	<field name="counts" class="com.sonicbase.index.Repartitioner$IndexCounts" />
	<class name="com.sonicbase.server.ReadManager$3" />
	<method signature="void run()" class="com.sonicbase.server.ReadManager$3" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.ReadManager)" class="com.sonicbase.server.ReadManager$3" />
	<field name="this$0" class="com.sonicbase.server.ReadManager$3" />
	<class name="com.sonicbase.server.MethodInvoker$ReplicaFuture" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.MethodInvoker$ReplicaFuture" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.MethodInvoker)" class="com.sonicbase.server.MethodInvoker$ReplicaFuture" />
	<method signature="java.util.concurrent.Future access$000(com.sonicbase.server.MethodInvoker$ReplicaFuture)" class="com.sonicbase.server.MethodInvoker$ReplicaFuture" />
	<method signature="int access$100(com.sonicbase.server.MethodInvoker$ReplicaFuture)" class="com.sonicbase.server.MethodInvoker$ReplicaFuture" />
	<field name="replica" class="com.sonicbase.server.MethodInvoker$ReplicaFuture" />
	<field name="future" class="com.sonicbase.server.MethodInvoker$ReplicaFuture" />
	<field name="this$0" class="com.sonicbase.server.MethodInvoker$ReplicaFuture" />
	<class name="com.sonicbase.common.LicenseOutOfComplianceException" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.LicenseOutOfComplianceException" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.common.LicenseOutOfComplianceException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.sonicbase.common.LicenseOutOfComplianceException" />
	<class name="com.sonicbase.query.InsertStatement" />
	<method signature="void addValue(java.lang.String,java.lang.Object)" class="com.sonicbase.query.InsertStatement" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.InsertStatement" />
	<method signature="void setTableName(java.lang.String)" class="com.sonicbase.query.InsertStatement" />
	<method signature="java.lang.Object execute(java.lang.String,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.InsertStatement" />
	<class name="com.sonicbase.socket.DatabaseSocketClient$BatchSender" />
	<method signature="void run()" class="com.sonicbase.socket.DatabaseSocketClient$BatchSender" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.socket.DatabaseSocketClient$BatchSender" />
	<method signature="void &lt;init&gt;(java.lang.String,int,java.util.concurrent.ArrayBlockingQueue)" class="com.sonicbase.socket.DatabaseSocketClient$BatchSender" />
	<field name="port" class="com.sonicbase.socket.DatabaseSocketClient$BatchSender" />
	<field name="host" class="com.sonicbase.socket.DatabaseSocketClient$BatchSender" />
	<field name="queue" class="com.sonicbase.socket.DatabaseSocketClient$BatchSender" />
	<class name="com.sonicbase.common.InsufficientLicense" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.InsufficientLicense" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.common.InsufficientLicense" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.sonicbase.common.InsufficientLicense" />
	<class name="com.sonicbase.schema.DataType$LongComparator" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.DataType$LongComparator" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$LongComparator" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.schema.DataType$LongComparator" />
	<method signature="void &lt;init&gt;(com.sonicbase.schema.DataType$1)" class="com.sonicbase.schema.DataType$LongComparator" />
	<class name="com.sonicbase.jdbcdriver.Parameter$Timestamp" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$Timestamp" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$Timestamp" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$Timestamp" />
	<method signature="void &lt;init&gt;(java.sql.Timestamp)" class="com.sonicbase.jdbcdriver.Parameter$Timestamp" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$Timestamp" />
	<method signature="void &lt;init&gt;(java.sql.Timestamp,java.util.Calendar)" class="com.sonicbase.jdbcdriver.Parameter$Timestamp" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$Timestamp" />
	<field name="cal" class="com.sonicbase.jdbcdriver.Parameter$Timestamp" />
	<class name="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.String getInstallDir()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void pushServersConfig()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void shutdown()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void startMasterMonitor()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean shouldDisableNow()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.String getDiskAvailWindows()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void access$4100(com.sonicbase.server.DatabaseServer,java.lang.Double)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="sun.misc.Unsafe getUnsafe()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject reserveNextIdFromReplica(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void doRestore(java.lang.String)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean access$1600(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject updateServersConfig(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="int getShardCount()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void replayLogs()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void prepareDataFromRestore()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void setRole(java.lang.String)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void access$3100(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.DatabaseCommon access$700(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.server.UpdateManager getUpdateManager()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void access$3000(com.sonicbase.server.DatabaseServer,java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void validateLicense(com.sonicbase.util.JsonDict)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean access$500(com.sonicbase.server.DatabaseServer,int,int,int[],int[])" class="com.sonicbase.server.DatabaseServer" />
	<method signature="byte[] handleCommand(java.lang.String,byte[],long,long,boolean,boolean)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.String access$1400(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.index.Repartitioner getRepartitioner()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void freeUnsafeIds(java.lang.Object)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.String fixReplica(java.lang.String,java.lang.String)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="int getReplica()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void syncDbNames()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject finishRestore(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void doDeleteFileSystemBackups(java.lang.String,int)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void access$800(com.sonicbase.server.DatabaseServer,int,int,java.util.concurrent.atomic.AtomicBoolean,boolean)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="org.apache.log4j.Logger access$1900()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="byte[][] fromUnsafeToRecords(java.lang.Object)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock getBatchWriteLock()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.server.DeleteManager getDeleteManager()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void setShardCount(int)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="int access$1500(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject getOSStats(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.Thread[][] getDeathMonitorThreads()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean isThrottleInsert()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="int access$900(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void getJavaMemStats(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject pushMaxRecordId(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void doBackup()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="double getCpuUtilizationWindows()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void doDeleteAWSBackups(java.lang.String,java.lang.String,java.lang.Integer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject doRestoreAWS(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.util.Map getIndices()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.server.SchemaManager getSchemaManager()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.Boolean access$1702(com.sonicbase.server.DatabaseServer,java.lang.Boolean)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="double getResGigWindows()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void setMinSizeForRepartition(int)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="long getSchemaVersion()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.util.JsonDict access$100(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="double access$4302(com.sonicbase.server.DatabaseServer,double)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.Exception access$2702(com.sonicbase.server.DatabaseServer,java.lang.Exception)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.client.DatabaseClient getClient()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void startLicenseValidator()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject areAllLongRunningCommandsComplete(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.server.DeleteManager access$2100(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean access$3202(com.sonicbase.server.DatabaseServer,boolean)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean access$4200()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.String getDataDir()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void pushMaxRecordId(java.lang.String,long)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="byte[][] fromUnsafeToKeys(java.lang.Object)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void restoreFileSystemSingleDir(java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.DatabaseCommon getCommon()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean access$2902(com.sonicbase.server.DatabaseServer,boolean)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void shutdownDeathMonitor()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="long getCommandCount()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void startRepartitioner()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject doRestoreFileSystem(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean electNewMaster(int,int,int[],int[])" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void setConfig(com.sonicbase.util.JsonDict,java.lang.String,java.lang.String,int,boolean,java.util.concurrent.atomic.AtomicBoolean,boolean,java.lang.String,java.lang.String,boolean)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.AWSClient access$3500(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="int access$200(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="org.apache.log4j.Logger getClientErrorLogger()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.AWSClient getAWSClient()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void pushSchema()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="int getShard()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean isNoLongerMaster()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void getSchemaFromPossibleMaster()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean onlyQueueCommands()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void disable()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.server.LogManager access$2500(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void disableLogProcessor()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.Object toUnsafeFromRecords(byte[][])" class="com.sonicbase.server.DatabaseServer" />
	<method signature="org.apache.log4j.Logger getErrorLogger()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.client.DatabaseClient$Replica getRole()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="int getReplicationFactor()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.Logger access$600(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.Double checkResidentMemory()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void setConfig(com.sonicbase.util.JsonDict,java.lang.String,java.lang.String,int,java.util.concurrent.atomic.AtomicBoolean,java.lang.String,java.lang.String,boolean)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject reloadServer(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject reconfigureCluster(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.server.LongRunningCommands getLongRunningCommands()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void access$3400(com.sonicbase.server.DatabaseServer,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void setConfig(com.sonicbase.util.JsonDict,java.lang.String,java.lang.String,int,boolean,java.util.concurrent.atomic.AtomicBoolean,java.lang.String,boolean)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void setThrottleInsert(boolean)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean haveProLicense()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="byte[] startBackup(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject getDatabaseFile(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void checkHealthOfServer(int,int,java.util.concurrent.atomic.AtomicBoolean,boolean)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="int access$300(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void backupAWSSingleDir(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject prepareSourceForServerReload(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.Object toUnsafeFromKeys(byte[][])" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject prepareForRestore(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject electNewMaster(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.String getCluster()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean isIdInField(java.lang.String,java.lang.String)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void setBackupConfig(com.sonicbase.util.JsonDict)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject doBackupFileSystem(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.util.Map getServers()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject prepareToComeAlive(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.Double access$4000(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.util.JsonDict getConfig()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void scheduleBackup()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.util.concurrent.atomic.AtomicInteger getBatchRepartCount()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void startDeathMonitor()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean access$4500()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void truncateTablesQuietly()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="int getRecordsByIdPartitionCount()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject isServerReloadFinished(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void access$4900(com.sonicbase.server.DatabaseServer,com.sonicbase.common.ComArray)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="byte[] handleCommand(java.lang.String,byte[],boolean,boolean)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.util.concurrent.ThreadPoolExecutor getExecutor()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.String access$1800(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void recoverFromSnapshot()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="int access$400(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean isUsingMultipleReplicas()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="double access$4402(com.sonicbase.server.DatabaseServer,double)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void restoreAWSSingleDir(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void access$3600(com.sonicbase.server.DatabaseServer,java.lang.String)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject isEntireBackupComplete(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void overrideProLicense()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject finishBackup(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.String decryptF(byte[],java.security.Key,javax.crypto.Cipher)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void purge(java.lang.String)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void access$1100(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean access$1602(com.sonicbase.server.DatabaseServer,boolean)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject allocateRecordIds(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject isRestoreComplete(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean isRunning()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.util.Map getDebugServers()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.Exception access$3302(com.sonicbase.server.DatabaseServer,java.lang.Exception)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void runSnapshot()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.util.List getDbNames(java.lang.String)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void checkJavaHeap(java.lang.Double)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.String getDiskAvailable()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void initServersForUnitTest(java.lang.String,int,boolean,com.sonicbase.server.DatabaseServer$ServersConfig)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean isMac()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.index.Indices getIndices(java.lang.String)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.server.TransactionManager getTransactionManager()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void access$2000(com.sonicbase.server.DatabaseServer,java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.util.concurrent.atomic.AtomicBoolean getAboveMemoryThreshold()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void backupFileSystemSingleDir(java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject doBackupAWS(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.String access$2400(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject promoteEntireReplicaToMaster(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void access$2800(com.sonicbase.server.DatabaseServer,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void purgeMemory()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.String createLicense(int)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean isWindows()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean access$4700()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.server.LongRunningCommands access$2200(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject isBackupComplete(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject prepareForBackup(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void initDeathOverride(int,int)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject promoteToMaster(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean access$4802(com.sonicbase.server.DatabaseServer,boolean)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject startRestore(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="int getTestWriteCallCount()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean isUnix()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.server.DatabaseServer$OSStats doGetOSStats()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void setReplicaDeadForRestart(int)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.util.List dont_use_handleCommands(java.util.List,boolean,boolean)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.String access$4600(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void shutdownRepartitioner()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void startLongRunningCommands()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject setMaxRecordId(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject getLastBackupDir(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void enableSnapshot(boolean)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.ComObject isEntireRestoreComplete(com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.server.SnapshotManager getSnapshotManager()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void startMemoryMonitor()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.lang.String format8601(java.util.Date)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock getBatchReadLock()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean isApplyingQueuesAndInteractive()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.common.Record evaluateRecordForQuery(com.sonicbase.schema.TableSchema,com.sonicbase.common.Record,com.sonicbase.query.impl.ExpressionImpl,com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.client.DatabaseClient getDatabaseClient()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean access$2900(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="byte[] encryptF(java.lang.String,java.security.Key,javax.crypto.Cipher)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="void downloadFilesForReload(com.sonicbase.common.ComArray)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.server.SnapshotManager access$2300(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer" />
	<method signature="com.sonicbase.server.LogManager getLogManager()" class="com.sonicbase.server.DatabaseServer" />
	<method signature="boolean access$2602(com.sonicbase.server.DatabaseServer,boolean)" class="com.sonicbase.server.DatabaseServer" />
	<field name="exception" class="com.sonicbase.server.DatabaseServer" />
	<field name="masterAddress" class="com.sonicbase.server.DatabaseServer" />
	<field name="cluster" class="com.sonicbase.server.DatabaseServer" />
	<field name="replicationFactor" class="com.sonicbase.server.DatabaseServer" />
	<field name="readManager" class="com.sonicbase.server.DatabaseServer" />
	<field name="replica" class="com.sonicbase.server.DatabaseServer" />
	<field name="dataDir" class="com.sonicbase.server.DatabaseServer" />
	<field name="logger" class="com.sonicbase.server.DatabaseServer" />
	<field name="commandCount" class="com.sonicbase.server.DatabaseServer" />
	<field name="pid" class="com.sonicbase.server.DatabaseServer" />
	<field name="logManager" class="com.sonicbase.server.DatabaseServer" />
	<field name="shutdownDeathMonitor" class="com.sonicbase.server.DatabaseServer" />
	<field name="deathMonitorThreads" class="com.sonicbase.server.DatabaseServer" />
	<field name="deathMonitorMutex" class="com.sonicbase.server.DatabaseServer" />
	<field name="isRestoreComplete" class="com.sonicbase.server.DatabaseServer" />
	<field name="clientErrorLogger" class="com.sonicbase.server.DatabaseServer" />
	<field name="LICENSE_KEY" class="com.sonicbase.server.DatabaseServer" />
	<field name="deathOverride" class="com.sonicbase.server.DatabaseServer" />
	<field name="executor" class="com.sonicbase.server.DatabaseServer" />
	<field name="deleteManager" class="com.sonicbase.server.DatabaseServer" />
	<field name="host" class="com.sonicbase.server.DatabaseServer" />
	<field name="transactionManager" class="com.sonicbase.server.DatabaseServer" />
	<field name="avgTransRate" class="com.sonicbase.server.DatabaseServer" />
	<field name="nextIdLock" class="com.sonicbase.server.DatabaseServer" />
	<field name="useUnsafe" class="com.sonicbase.server.DatabaseServer" />
	<field name="algorithm" class="com.sonicbase.server.DatabaseServer" />
	<field name="longRunningCommands" class="com.sonicbase.server.DatabaseServer" />
	<field name="batchLock" class="com.sonicbase.server.DatabaseServer" />
	<field name="lastBackupDir" class="com.sonicbase.server.DatabaseServer" />
	<field name="xmx" class="com.sonicbase.server.DatabaseServer" />
	<field name="schemaManager" class="com.sonicbase.server.DatabaseServer" />
	<field name="buffers" class="com.sonicbase.server.DatabaseServer" />
	<field name="debugServers" class="com.sonicbase.server.DatabaseServer" />
	<field name="finalRestoreException" class="com.sonicbase.server.DatabaseServer" />
	<field name="repartitioner" class="com.sonicbase.server.DatabaseServer" />
	<field name="gclog" class="com.sonicbase.server.DatabaseServer" />
	<field name="commandHandler" class="com.sonicbase.server.DatabaseServer" />
	<field name="port" class="com.sonicbase.server.DatabaseServer" />
	<field name="usingMultipleReplicas" class="com.sonicbase.server.DatabaseServer" />
	<field name="finalBackupException" class="com.sonicbase.server.DatabaseServer" />
	<field name="errorLogger" class="com.sonicbase.server.DatabaseServer" />
	<field name="updateManager" class="com.sonicbase.server.DatabaseServer" />
	<field name="ENABLE_RECORD_COMPRESSION" class="com.sonicbase.server.DatabaseServer" />
	<field name="shutdown" class="com.sonicbase.server.DatabaseServer" />
	<field name="FOUR_SERVER_LICENSE" class="com.sonicbase.server.DatabaseServer" />
	<field name="isServerRoloadRunning" class="com.sonicbase.server.DatabaseServer" />
	<field name="restoreException" class="com.sonicbase.server.DatabaseServer" />
	<field name="role" class="com.sonicbase.server.DatabaseServer" />
	<field name="batchRepartCount" class="com.sonicbase.server.DatabaseServer" />
	<field name="doingRestore" class="com.sonicbase.server.DatabaseServer" />
	<field name="isBackupComplete" class="com.sonicbase.server.DatabaseServer" />
	<field name="haveProLicense" class="com.sonicbase.server.DatabaseServer" />
	<field name="dead" class="com.sonicbase.server.DatabaseServer" />
	<field name="snapshotManager" class="com.sonicbase.server.DatabaseServer" />
	<field name="unsafe" class="com.sonicbase.server.DatabaseServer" />
	<field name="disableNow" class="com.sonicbase.server.DatabaseServer" />
	<field name="replicaDeadForRestart" class="com.sonicbase.server.DatabaseServer" />
	<field name="servers" class="com.sonicbase.server.DatabaseServer" />
	<field name="common" class="com.sonicbase.server.DatabaseServer" />
	<field name="indexes" class="com.sonicbase.server.DatabaseServer" />
	<field name="isRunning" class="com.sonicbase.server.DatabaseServer" />
	<field name="batchReadLock" class="com.sonicbase.server.DatabaseServer" />
	<field name="awsClient" class="com.sonicbase.server.DatabaseServer" />
	<field name="backupConfig" class="com.sonicbase.server.DatabaseServer" />
	<field name="installDir" class="com.sonicbase.server.DatabaseServer" />
	<field name="client" class="com.sonicbase.server.DatabaseServer" />
	<field name="aboveMemoryThreshold" class="com.sonicbase.server.DatabaseServer" />
	<field name="logSlicePoint" class="com.sonicbase.server.DatabaseServer" />
	<field name="shard" class="com.sonicbase.server.DatabaseServer" />
	<field name="doingBackup" class="com.sonicbase.server.DatabaseServer" />
	<field name="deathReportThread" class="com.sonicbase.server.DatabaseServer" />
	<field name="restoreAwsMutex" class="com.sonicbase.server.DatabaseServer" />
	<field name="recordsByIdPartitionCount" class="com.sonicbase.server.DatabaseServer" />
	<field name="cronIdentity" class="com.sonicbase.server.DatabaseServer" />
	<field name="deathOverrideMutex" class="com.sonicbase.server.DatabaseServer" />
	<field name="OS" class="com.sonicbase.server.DatabaseServer" />
	<field name="overrideProLicense" class="com.sonicbase.server.DatabaseServer" />
	<field name="nextRecordId" class="com.sonicbase.server.DatabaseServer" />
	<field name="applyingQueuesAndInteractive" class="com.sonicbase.server.DatabaseServer" />
	<field name="masterPort" class="com.sonicbase.server.DatabaseServer" />
	<field name="throttleInsert" class="com.sonicbase.server.DatabaseServer" />
	<field name="backupException" class="com.sonicbase.server.DatabaseServer" />
	<field name="avgRecRate" class="com.sonicbase.server.DatabaseServer" />
	<field name="bytes" class="com.sonicbase.server.DatabaseServer" />
	<field name="onlyQueueCommands" class="com.sonicbase.server.DatabaseServer" />
	<field name="compressRecords" class="com.sonicbase.server.DatabaseServer" />
	<field name="config" class="com.sonicbase.server.DatabaseServer" />
	<field name="shardCount" class="com.sonicbase.server.DatabaseServer" />
	<field name="batchWriteLock" class="com.sonicbase.server.DatabaseServer" />
	<class name="com.sonicbase.bench.TestServers$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.research.socket.NettyServer[])" class="com.sonicbase.bench.TestServers$1" />
	<method signature="java.lang.Object call()" class="com.sonicbase.bench.TestServers$1" />
	<field name="val$dbServers" class="com.sonicbase.bench.TestServers$1" />
	<class name="com.sonicbase.bench.TestServers$2" />
	<method signature="java.lang.Object call()" class="com.sonicbase.bench.TestServers$2" />
	<method signature="void &lt;init&gt;(int,com.sonicbase.research.socket.NettyServer[])" class="com.sonicbase.bench.TestServers$2" />
	<field name="val$dbServers" class="com.sonicbase.bench.TestServers$2" />
	<field name="val$shard" class="com.sonicbase.bench.TestServers$2" />
	<class name="com.sonicbase.schema.DataType$TimeConverter" />
	<method signature="java.lang.Object convert(java.lang.Object)" class="com.sonicbase.schema.DataType$TimeConverter" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.DataType$TimeConverter" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$TimeConverter" />
	<method signature="void &lt;init&gt;(com.sonicbase.schema.DataType$1)" class="com.sonicbase.schema.DataType$TimeConverter" />
	<class name="com.sonicbase.query.DatabaseException" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.DatabaseException" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.DatabaseException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="com.sonicbase.query.DatabaseException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="com.sonicbase.query.DatabaseException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.sonicbase.query.DatabaseException" />
	<class name="com.sonicbase.schema.DataType$13" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$13" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.schema.DataType$13" />
	<class name="com.sonicbase.query.impl.SelectStatementImpl$1" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.SelectStatementImpl$1" />
	<field name="$SwitchMap$com$sonicbase$schema$DataType$Type" class="com.sonicbase.query.impl.SelectStatementImpl$1" />
	<class name="com.sonicbase.schema.DataType$14" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$14" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.schema.DataType$14" />
	<class name="com.sonicbase.schema.DataType$15" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$15" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.schema.DataType$15" />
	<class name="com.sonicbase.schema.DataType$16" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$16" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.schema.DataType$16" />
	<class name="com.sonicbase.query.impl.GroupByContext$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.query.impl.GroupByContext)" class="com.sonicbase.query.impl.GroupByContext$1" />
	<method signature="int compare(java.lang.Object[],java.lang.Object[])" class="com.sonicbase.query.impl.GroupByContext$1" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.query.impl.GroupByContext$1" />
	<field name="this$0" class="com.sonicbase.query.impl.GroupByContext$1" />
	<class name="com.sonicbase.schema.DataType$10" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$10" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.schema.DataType$10" />
	<class name="com.sonicbase.jdbcdriver.Parameter$Long" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$Long" />
	<method signature="void &lt;init&gt;(long)" class="com.sonicbase.jdbcdriver.Parameter$Long" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$Long" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$Long" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$Long" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$Long" />
	<class name="com.sonicbase.query.impl.ExpressionImpl$NextReturn" />
	<method signature="void setIds(java.lang.Object[][][])" class="com.sonicbase.query.impl.ExpressionImpl$NextReturn" />
	<method signature="void setTableNames(java.lang.String[])" class="com.sonicbase.query.impl.ExpressionImpl$NextReturn" />
	<method signature="java.lang.String[] getTableNames()" class="com.sonicbase.query.impl.ExpressionImpl$NextReturn" />
	<method signature="void setFields(java.util.concurrent.ConcurrentHashMap)" class="com.sonicbase.query.impl.ExpressionImpl$NextReturn" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ExpressionImpl$NextReturn" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.ExpressionImpl$NextReturn" />
	<method signature="java.util.concurrent.ConcurrentHashMap getFields()" class="com.sonicbase.query.impl.ExpressionImpl$NextReturn" />
	<method signature="java.lang.Object[][][] getIds()" class="com.sonicbase.query.impl.ExpressionImpl$NextReturn" />
	<method signature="void &lt;init&gt;(java.lang.String[],java.lang.Object[][][])" class="com.sonicbase.query.impl.ExpressionImpl$NextReturn" />
	<method signature="java.lang.Object[][][] getKeys()" class="com.sonicbase.query.impl.ExpressionImpl$NextReturn" />
	<method signature="void setFields(java.lang.String,java.lang.String[])" class="com.sonicbase.query.impl.ExpressionImpl$NextReturn" />
	<field name="tableNames" class="com.sonicbase.query.impl.ExpressionImpl$NextReturn" />
	<field name="ids" class="com.sonicbase.query.impl.ExpressionImpl$NextReturn" />
	<field name="fields" class="com.sonicbase.query.impl.ExpressionImpl$NextReturn" />
	<class name="com.sonicbase.schema.DataType$11" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$11" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.schema.DataType$11" />
	<class name="com.sonicbase.schema.DataType$12" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$12" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.schema.DataType$12" />
	<class name="com.sonicbase.jdbcdriver.Parameter$Double" />
	<method signature="void &lt;init&gt;(double)" class="com.sonicbase.jdbcdriver.Parameter$Double" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$Double" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$Double" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$Double" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$Double" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$Double" />
	<class name="com.sonicbase.schema.DataType$17" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$17" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.schema.DataType$17" />
	<class name="com.sonicbase.server.TransactionManager$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.TransactionManager,java.util.Comparator[])" class="com.sonicbase.server.TransactionManager$1" />
	<method signature="int compare(java.lang.Object[],java.lang.Object[])" class="com.sonicbase.server.TransactionManager$1" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.server.TransactionManager$1" />
	<field name="this$0" class="com.sonicbase.server.TransactionManager$1" />
	<field name="val$comparators" class="com.sonicbase.server.TransactionManager$1" />
	<class name="com.sonicbase.schema.DataType$18" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$18" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.schema.DataType$18" />
	<class name="com.sonicbase.schema.DataType$19" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$19" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.schema.DataType$19" />
	<class name="com.sonicbase.client.DatabaseClient$Entry" />
	<method signature="java.lang.String getKey()" class="com.sonicbase.client.DatabaseClient$Entry" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.client.DatabaseClient$Entry" />
	<method signature="java.lang.String access$1200(com.sonicbase.client.DatabaseClient$Entry)" class="com.sonicbase.client.DatabaseClient$Entry" />
	<method signature="java.lang.String access$1100(com.sonicbase.client.DatabaseClient$Entry)" class="com.sonicbase.client.DatabaseClient$Entry" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient,java.lang.String,java.lang.String,int,java.lang.String)" class="com.sonicbase.client.DatabaseClient$Entry" />
	<field name="result" class="com.sonicbase.client.DatabaseClient$Entry" />
	<field name="this$0" class="com.sonicbase.client.DatabaseClient$Entry" />
	<field name="index" class="com.sonicbase.client.DatabaseClient$Entry" />
	<field name="shard" class="com.sonicbase.client.DatabaseClient$Entry" />
	<field name="table" class="com.sonicbase.client.DatabaseClient$Entry" />
	<class name="com.sonicbase.common.Logger" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.Logger" />
	<method signature="void warn(java.lang.String)" class="com.sonicbase.common.Logger" />
	<method signature="void error(java.lang.String,java.lang.Throwable)" class="com.sonicbase.common.Logger" />
	<method signature="java.lang.String access$200()" class="com.sonicbase.common.Logger" />
	<method signature="void errorLocalOnly(java.lang.String,java.lang.Throwable)" class="com.sonicbase.common.Logger" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient,int,int)" class="com.sonicbase.common.Logger" />
	<method signature="void info(java.lang.String)" class="com.sonicbase.common.Logger" />
	<method signature="void sendErrorToServer(java.lang.String,java.lang.Throwable)" class="com.sonicbase.common.Logger" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient)" class="com.sonicbase.common.Logger" />
	<method signature="void setIsClient(boolean)" class="com.sonicbase.common.Logger" />
	<method signature="void setReady()" class="com.sonicbase.common.Logger" />
	<method signature="void error(java.lang.String)" class="com.sonicbase.common.Logger" />
	<method signature="boolean access$100()" class="com.sonicbase.common.Logger" />
	<method signature="java.util.concurrent.ArrayBlockingQueue access$000()" class="com.sonicbase.common.Logger" />
	<method signature="org.apache.log4j.Logger access$300()" class="com.sonicbase.common.Logger" />
	<field name="hostName" class="com.sonicbase.common.Logger" />
	<field name="replica" class="com.sonicbase.common.Logger" />
	<field name="sendThread" class="com.sonicbase.common.Logger" />
	<field name="ready" class="com.sonicbase.common.Logger" />
	<field name="logger" class="com.sonicbase.common.Logger" />
	<field name="databaseClient" class="com.sonicbase.common.Logger" />
	<field name="isClient" class="com.sonicbase.common.Logger" />
	<field name="shard" class="com.sonicbase.common.Logger" />
	<field name="queue" class="com.sonicbase.common.Logger" />
	<class name="com.sonicbase.jdbcdriver.Parameter$Boolean" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$Boolean" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$Boolean" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$Boolean" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$Boolean" />
	<method signature="void &lt;init&gt;(boolean)" class="com.sonicbase.jdbcdriver.Parameter$Boolean" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$Boolean" />
	<class name="com.sonicbase.query.impl.ExpressionImpl$IdEntry" />
	<method signature="int getOffset()" class="com.sonicbase.query.impl.ExpressionImpl$IdEntry" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ExpressionImpl$IdEntry" />
	<method signature="java.lang.Object[] getValue()" class="com.sonicbase.query.impl.ExpressionImpl$IdEntry" />
	<method signature="void &lt;init&gt;(int,java.lang.Object[])" class="com.sonicbase.query.impl.ExpressionImpl$IdEntry" />
	<field name="offset" class="com.sonicbase.query.impl.ExpressionImpl$IdEntry" />
	<field name="value" class="com.sonicbase.query.impl.ExpressionImpl$IdEntry" />
	<class name="com.sonicbase.server.DatabaseServer$10" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer$10" />
	<method signature="int compare(java.lang.String,java.lang.String)" class="com.sonicbase.server.DatabaseServer$10" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.server.DatabaseServer$10" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$10" />
	<class name="com.sonicbase.server.DatabaseServer$12" />
	<method signature="void run()" class="com.sonicbase.server.DatabaseServer$12" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer,com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer$12" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$12" />
	<field name="val$cobj" class="com.sonicbase.server.DatabaseServer$12" />
	<class name="com.sonicbase.schema.DataType$BlobConverter" />
	<method signature="java.lang.Object convert(java.lang.Object)" class="com.sonicbase.schema.DataType$BlobConverter" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.DataType$BlobConverter" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$BlobConverter" />
	<method signature="void &lt;init&gt;(com.sonicbase.schema.DataType$1)" class="com.sonicbase.schema.DataType$BlobConverter" />
	<class name="com.sonicbase.server.DatabaseServer$11" />
	<method signature="void run()" class="com.sonicbase.server.DatabaseServer$11" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer,com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer$11" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$11" />
	<field name="val$cobj" class="com.sonicbase.server.DatabaseServer$11" />
	<class name="com.sonicbase.server.DatabaseServer$14" />
	<method signature="void run()" class="com.sonicbase.server.DatabaseServer$14" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer$14" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$14" />
	<class name="com.sonicbase.server.DatabaseServer$13" />
	<method signature="void run()" class="com.sonicbase.server.DatabaseServer$13" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer,com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer$13" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$13" />
	<field name="val$cobj" class="com.sonicbase.server.DatabaseServer$13" />
	<class name="com.sonicbase.server.TransactionManager$RecordLock" />
	<method signature="java.lang.String getTableName()" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<method signature="int access$302(com.sonicbase.server.TransactionManager$RecordLock,int)" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<method signature="java.lang.String access$102(com.sonicbase.server.TransactionManager$RecordLock,java.lang.String)" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<method signature="java.lang.String getIndexName()" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<method signature="java.lang.Object[] access$200(com.sonicbase.server.TransactionManager$RecordLock)" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<method signature="java.lang.String access$502(com.sonicbase.server.TransactionManager$RecordLock,java.lang.String)" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<method signature="com.sonicbase.server.TransactionManager$Transaction access$402(com.sonicbase.server.TransactionManager$RecordLock,com.sonicbase.server.TransactionManager$Transaction)" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<method signature="java.lang.String access$100(com.sonicbase.server.TransactionManager$RecordLock)" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<method signature="java.lang.Object[] access$202(com.sonicbase.server.TransactionManager$RecordLock,java.lang.Object[])" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<method signature="int access$308(com.sonicbase.server.TransactionManager$RecordLock)" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<method signature="com.sonicbase.server.TransactionManager$Transaction access$400(com.sonicbase.server.TransactionManager$RecordLock)" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<method signature="java.lang.Object[] getPrimaryKey()" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<method signature="int access$300(com.sonicbase.server.TransactionManager$RecordLock)" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<field name="lockCount" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<field name="indexName" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<field name="transaction" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<field name="tableName" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<field name="primaryKey" class="com.sonicbase.server.TransactionManager$RecordLock" />
	<class name="com.sonicbase.common.ComObject$Type" />
	<method signature="com.sonicbase.common.ComObject$Type[] values()" class="com.sonicbase.common.ComObject$Type" />
	<method signature="com.sonicbase.common.ComObject$Type valueOf(java.lang.String)" class="com.sonicbase.common.ComObject$Type" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.ComObject$Type" />
	<method signature="void &lt;init&gt;(java.lang.String,int,int)" class="com.sonicbase.common.ComObject$Type" />
	<field name="doubleType" class="com.sonicbase.common.ComObject$Type" />
	<field name="arrayType" class="com.sonicbase.common.ComObject$Type" />
	<field name="booleanType" class="com.sonicbase.common.ComObject$Type" />
	<field name="intType" class="com.sonicbase.common.ComObject$Type" />
	<field name="smallIntType" class="com.sonicbase.common.ComObject$Type" />
	<field name="timeType" class="com.sonicbase.common.ComObject$Type" />
	<field name="timeStampType" class="com.sonicbase.common.ComObject$Type" />
	<field name="longType" class="com.sonicbase.common.ComObject$Type" />
	<field name="objectType" class="com.sonicbase.common.ComObject$Type" />
	<field name="floatType" class="com.sonicbase.common.ComObject$Type" />
	<field name="dateType" class="com.sonicbase.common.ComObject$Type" />
	<field name="byteArrayType" class="com.sonicbase.common.ComObject$Type" />
	<field name="tinyIntType" class="com.sonicbase.common.ComObject$Type" />
	<field name="stringType" class="com.sonicbase.common.ComObject$Type" />
	<field name="bigDecimalType" class="com.sonicbase.common.ComObject$Type" />
	<field name="tag" class="com.sonicbase.common.ComObject$Type" />
	<field name="$VALUES" class="com.sonicbase.common.ComObject$Type" />
	<class name="com.sonicbase.server.DatabaseServer$15" />
	<method signature="void run()" class="com.sonicbase.server.DatabaseServer$15" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer$15" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$15" />
	<class name="com.sonicbase.query.Statement" />
	<method signature="com.sonicbase.query.BinaryExpression createBinaryExpression(com.sonicbase.query.Expression,com.sonicbase.query.BinaryExpression$Operator,com.sonicbase.query.Expression)" class="com.sonicbase.query.Statement" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.Statement" />
	<method signature="com.sonicbase.query.BinaryExpression createBinaryExpression(java.lang.String,com.sonicbase.query.BinaryExpression$Operator,long)" class="com.sonicbase.query.Statement" />
	<method signature="com.sonicbase.query.BinaryExpression createBinaryExpression(java.lang.String,com.sonicbase.query.BinaryExpression$Operator,java.lang.String)" class="com.sonicbase.query.Statement" />
	<method signature="com.sonicbase.query.InExpression createInExpression()" class="com.sonicbase.query.Statement" />
	<class name="com.sonicbase.server.DatabaseServer$NetMonitor" />
	<method signature="void run()" class="com.sonicbase.server.DatabaseServer$NetMonitor" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.DatabaseServer$NetMonitor" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer$NetMonitor" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$NetMonitor" />
	<class name="com.sonicbase.bench.TestMisc" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.bench.TestMisc" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.bench.TestMisc" />
	<method signature="void test()" class="com.sonicbase.bench.TestMisc" />
	<class name="com.sonicbase.schema.DataType$ByteArrayComparator" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.DataType$ByteArrayComparator" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$ByteArrayComparator" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.schema.DataType$ByteArrayComparator" />
	<method signature="void &lt;init&gt;(com.sonicbase.schema.DataType$1)" class="com.sonicbase.schema.DataType$ByteArrayComparator" />
	<class name="com.sonicbase.server.ReadManager$PreparedIndexLookup" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.ReadManager$PreparedIndexLookup" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.ReadManager)" class="com.sonicbase.server.ReadManager$PreparedIndexLookup" />
	<field name="lastTimeUsed" class="com.sonicbase.server.ReadManager$PreparedIndexLookup" />
	<field name="orderByExpressions" class="com.sonicbase.server.ReadManager$PreparedIndexLookup" />
	<field name="expression" class="com.sonicbase.server.ReadManager$PreparedIndexLookup" />
	<field name="this$0" class="com.sonicbase.server.ReadManager$PreparedIndexLookup" />
	<field name="count" class="com.sonicbase.server.ReadManager$PreparedIndexLookup" />
	<field name="evaluateExpression" class="com.sonicbase.server.ReadManager$PreparedIndexLookup" />
	<field name="tableId" class="com.sonicbase.server.ReadManager$PreparedIndexLookup" />
	<field name="indexId" class="com.sonicbase.server.ReadManager$PreparedIndexLookup" />
	<field name="forceSelectOnServer" class="com.sonicbase.server.ReadManager$PreparedIndexLookup" />
	<field name="columnOffsets" class="com.sonicbase.server.ReadManager$PreparedIndexLookup" />
	<class name="com.sonicbase.common.DatabaseCommon" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="long getSchemaVersion()" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="java.lang.String keyToString(java.lang.Object[])" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="java.util.Map getTables(java.lang.String)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="java.util.Map getTablesById(java.lang.String)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="byte[] serializeSchema(long)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="byte[] serializeConfig(long)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void setHaveProLicense(boolean)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="com.sonicbase.schema.Schema getSchema(java.lang.String)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void updateTable(java.lang.String,java.lang.String,com.sonicbase.schema.TableSchema)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="byte[] serializeKey(com.sonicbase.schema.TableSchema,java.lang.String,java.lang.Object[])" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="com.sonicbase.server.DatabaseServer$ServersConfig getServersConfig()" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void setReplica(int)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="java.lang.Object[] deserializeFields(java.lang.String,com.sonicbase.common.DatabaseCommon,byte[],int,com.sonicbase.schema.TableSchema,long,java.util.Set,java.util.concurrent.atomic.AtomicLong,boolean)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="java.lang.Object[] deserializeKey(com.sonicbase.schema.TableSchema,byte[])" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void serializeFields(java.lang.Object[],java.io.DataOutputStream,com.sonicbase.schema.TableSchema,long,boolean)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void dropTable(java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="java.lang.Object[] deserializeKey(com.sonicbase.schema.TableSchema,java.io.DataInputStream)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void deserializeConfig(byte[])" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void loadSchema(java.lang.String)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void deserializeSchema(byte[])" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="java.util.concurrent.locks.Lock getSchemaReadLock(java.lang.String)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void serializeSchema(java.lang.String,java.io.DataOutputStream)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void setServersConfig(com.sonicbase.server.DatabaseServer$ServersConfig)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void createSchemaLocks(java.lang.String)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="int compareKey(java.util.Comparator[],java.lang.Object[],java.lang.Object[])" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void deserializeSchema(java.io.DataInputStream)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void deserializeConfig(java.io.DataInputStream)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="java.util.concurrent.locks.Lock getSchemaWriteLock(java.lang.String)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void setSchema(java.lang.String,com.sonicbase.schema.Schema)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void loadServersConfig(java.lang.String)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void saveServersConfig(java.lang.String)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void setShard(int)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="boolean haveProLicense()" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void serializeSchema(java.io.DataOutputStream,long)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void saveSchema(java.lang.String)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void addTable(java.lang.String,java.lang.String,com.sonicbase.schema.TableSchema)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="int getReplica()" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="void addDatabase(java.lang.String)" class="com.sonicbase.common.DatabaseCommon" />
	<method signature="int getShard()" class="com.sonicbase.common.DatabaseCommon" />
	<field name="schema" class="com.sonicbase.common.DatabaseCommon" />
	<field name="masterReplicas" class="com.sonicbase.common.DatabaseCommon" />
	<field name="schemaVersion" class="com.sonicbase.common.DatabaseCommon" />
	<field name="replica" class="com.sonicbase.common.DatabaseCommon" />
	<field name="schemaReadLock" class="com.sonicbase.common.DatabaseCommon" />
	<field name="logger" class="com.sonicbase.common.DatabaseCommon" />
	<field name="serversConfig" class="com.sonicbase.common.DatabaseCommon" />
	<field name="haveProLicense" class="com.sonicbase.common.DatabaseCommon" />
	<field name="schemaReadWriteLock" class="com.sonicbase.common.DatabaseCommon" />
	<field name="shard" class="com.sonicbase.common.DatabaseCommon" />
	<field name="schemaWriteLock" class="com.sonicbase.common.DatabaseCommon" />
	<field name="deadNodes" class="com.sonicbase.common.DatabaseCommon" />
	<class name="com.sonicbase.jdbcdriver.Parameter$ParameterBase" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$ParameterBase" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$ParameterBase" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$ParameterBase" />
	<method signature="java.lang.Object getValue()" class="com.sonicbase.jdbcdriver.Parameter$ParameterBase" />
	<method signature="void &lt;init&gt;(java.lang.Object)" class="com.sonicbase.jdbcdriver.Parameter$ParameterBase" />
	<field name="value" class="com.sonicbase.jdbcdriver.Parameter$ParameterBase" />
	<class name="com.sonicbase.common.Record" />
	<method signature="com.sonicbase.schema.TableSchema getTableSchema()" class="com.sonicbase.common.Record" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.Record" />
	<method signature="void setDbViewFlags(long)" class="com.sonicbase.common.Record" />
	<method signature="void recoverFromSnapshot(java.lang.String,com.sonicbase.common.DatabaseCommon,byte[],int,java.util.Set,boolean)" class="com.sonicbase.common.Record" />
	<method signature="long getTransId(byte[])" class="com.sonicbase.common.Record" />
	<method signature="void deserialize(java.lang.String,com.sonicbase.common.DatabaseCommon,byte[],java.util.Set,boolean)" class="com.sonicbase.common.Record" />
	<method signature="long getDbViewFlags(byte[])" class="com.sonicbase.common.Record" />
	<method signature="long getDbViewNumber(byte[])" class="com.sonicbase.common.Record" />
	<method signature="void &lt;init&gt;(com.sonicbase.schema.TableSchema)" class="com.sonicbase.common.Record" />
	<method signature="void deserialize(java.lang.String,com.sonicbase.common.DatabaseCommon,byte[],java.util.Set)" class="com.sonicbase.common.Record" />
	<method signature="long getSerializedSchemaVersion()" class="com.sonicbase.common.Record" />
	<method signature="void setDbViewNumber(long)" class="com.sonicbase.common.Record" />
	<method signature="java.lang.Object[] getFields()" class="com.sonicbase.common.Record" />
	<method signature="long getSequence2()" class="com.sonicbase.common.Record" />
	<method signature="long getSequence1()" class="com.sonicbase.common.Record" />
	<method signature="long getSequence0()" class="com.sonicbase.common.Record" />
	<method signature="void snapshot(java.io.DataOutputStream,com.sonicbase.common.DatabaseCommon)" class="com.sonicbase.common.Record" />
	<method signature="void setId(long)" class="com.sonicbase.common.Record" />
	<method signature="long getTransId()" class="com.sonicbase.common.Record" />
	<method signature="void setSequence0(long)" class="com.sonicbase.common.Record" />
	<method signature="long getDbViewNumber()" class="com.sonicbase.common.Record" />
	<method signature="void setSequence2(long)" class="com.sonicbase.common.Record" />
	<method signature="long getDbViewFlags()" class="com.sonicbase.common.Record" />
	<method signature="void setSequence1(long)" class="com.sonicbase.common.Record" />
	<method signature="java.lang.Object getField(java.lang.String)" class="com.sonicbase.common.Record" />
	<method signature="void &lt;init&gt;(java.lang.String,com.sonicbase.common.DatabaseCommon,byte[])" class="com.sonicbase.common.Record" />
	<method signature="byte[] serialize(com.sonicbase.common.DatabaseCommon)" class="com.sonicbase.common.Record" />
	<method signature="long readFlags(byte[])" class="com.sonicbase.common.Record" />
	<method signature="long getTableId(byte[])" class="com.sonicbase.common.Record" />
	<method signature="void &lt;init&gt;(java.lang.String,com.sonicbase.common.DatabaseCommon,byte[],java.util.Set,boolean)" class="com.sonicbase.common.Record" />
	<method signature="void setTransId(long)" class="com.sonicbase.common.Record" />
	<method signature="void setFields(java.lang.Object[])" class="com.sonicbase.common.Record" />
	<method signature="long getId()" class="com.sonicbase.common.Record" />
	<field name="sequence0" class="com.sonicbase.common.Record" />
	<field name="dbViewNumber" class="com.sonicbase.common.Record" />
	<field name="transId" class="com.sonicbase.common.Record" />
	<field name="dbViewFlags" class="com.sonicbase.common.Record" />
	<field name="serializedSchemaVersion" class="com.sonicbase.common.Record" />
	<field name="id" class="com.sonicbase.common.Record" />
	<field name="fields" class="com.sonicbase.common.Record" />
	<field name="DB_VIEW_FLAG_DELETING" class="com.sonicbase.common.Record" />
	<field name="DB_VIEW_FLAG_ADDING" class="com.sonicbase.common.Record" />
	<field name="tableSchema" class="com.sonicbase.common.Record" />
	<field name="sequence1" class="com.sonicbase.common.Record" />
	<field name="sequence2" class="com.sonicbase.common.Record" />
	<class name="com.sonicbase.jdbcdriver.ResultSetProxy$Table" />
	<method signature="java.lang.String getName()" class="com.sonicbase.jdbcdriver.ResultSetProxy$Table" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.ResultSetProxy$Table" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy$Table" />
	<field name="name" class="com.sonicbase.jdbcdriver.ResultSetProxy$Table" />
	<class name="com.sonicbase.server.SnapshotManager" />
	<method signature="void deleteSnapshots()" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void doDeleteInProcessDirs(java.io.File)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void restoreAWS(java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void backupFileSystem(java.lang.String,java.lang.String)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="java.lang.String lockSnapshot(java.lang.String)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="boolean access$300(com.sonicbase.server.SnapshotManager)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void restoreFileSystem(java.lang.String,java.lang.String)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void recoverFromSnapshot(java.lang.String)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void backupFileSystemSchema(java.lang.String,java.lang.String)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="boolean isRecovering()" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void backupAWS(java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="java.lang.String getSnapshotRootDir(java.lang.String)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void deleteOldSnapshots(java.lang.String)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void deleteInProcessDirs()" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void runSnapshot(java.lang.String)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void getFilesForCurrentSnapshot(java.util.List)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="int getHighestSafeSnapshotVersion(java.io.File)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="double getPercentRecoverComplete()" class="com.sonicbase.server.SnapshotManager" />
	<method signature="java.lang.Exception getErrorRecovering()" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void runSnapshotLoop()" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void enableSnapshot(boolean)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="com.sonicbase.server.DatabaseServer access$100(com.sonicbase.server.SnapshotManager)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void unlockSnapshot(int)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="long access$200(com.sonicbase.server.SnapshotManager)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void abortSnapshot()" class="com.sonicbase.server.SnapshotManager" />
	<method signature="int getHighestUnsafeSnapshotVersion(java.io.File)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="java.util.concurrent.atomic.AtomicLong access$000(com.sonicbase.server.SnapshotManager)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void backupAWSSchema(java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="java.io.File getSnapshotReplicaDir()" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void pauseSnapshotRolling(boolean)" class="com.sonicbase.server.SnapshotManager" />
	<method signature="void getFilesFromDirectory(java.io.File,java.util.List)" class="com.sonicbase.server.SnapshotManager" />
	<field name="server" class="com.sonicbase.server.SnapshotManager" />
	<field name="finishedFileCount" class="com.sonicbase.server.SnapshotManager" />
	<field name="lockedSnapshots" class="com.sonicbase.server.SnapshotManager" />
	<field name="logger" class="com.sonicbase.server.SnapshotManager" />
	<field name="INDEX_STR" class="com.sonicbase.server.SnapshotManager" />
	<field name="pauseSnapshotRolling" class="com.sonicbase.server.SnapshotManager" />
	<field name="totalFileCount" class="com.sonicbase.server.SnapshotManager" />
	<field name="SNAPSHOT_SERIALIZATION_VERSION_20" class="com.sonicbase.server.SnapshotManager" />
	<field name="isRecovering" class="com.sonicbase.server.SnapshotManager" />
	<field name="SNAPSHOT_SERIALIZATION_VERSION_21" class="com.sonicbase.server.SnapshotManager" />
	<field name="SNAPSHOT_BUCKET_COUNT" class="com.sonicbase.server.SnapshotManager" />
	<field name="SNAPSHOT_SERIALIZATION_VERSION" class="com.sonicbase.server.SnapshotManager" />
	<field name="DURATION_STR" class="com.sonicbase.server.SnapshotManager" />
	<field name="lastSnapshot" class="com.sonicbase.server.SnapshotManager" />
	<field name="RATE_STR" class="com.sonicbase.server.SnapshotManager" />
	<field name="SNAPSHOT_SERIALIZATION_VERSION_19" class="com.sonicbase.server.SnapshotManager" />
	<field name="totalBytes" class="com.sonicbase.server.SnapshotManager" />
	<field name="SNAPSHOT_STR" class="com.sonicbase.server.SnapshotManager" />
	<field name="finishedBytes" class="com.sonicbase.server.SnapshotManager" />
	<field name="errorRecovering" class="com.sonicbase.server.SnapshotManager" />
	<field name="snapshotThread" class="com.sonicbase.server.SnapshotManager" />
	<field name="enableSnapshot" class="com.sonicbase.server.SnapshotManager" />
	<class name="com.sonicbase.index.Repartitioner$OffsetEntry" />
	<method signature="int getPartitionOffset()" class="com.sonicbase.index.Repartitioner$OffsetEntry" />
	<method signature="long getOffset()" class="com.sonicbase.index.Repartitioner$OffsetEntry" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.index.Repartitioner$OffsetEntry" />
	<method signature="void &lt;init&gt;(long,int)" class="com.sonicbase.index.Repartitioner$OffsetEntry" />
	<field name="offset" class="com.sonicbase.index.Repartitioner$OffsetEntry" />
	<field name="partitionOffset" class="com.sonicbase.index.Repartitioner$OffsetEntry" />
	<class name="com.sonicbase.util.JsonDict" />
	<method signature="com.sonicbase.util.JsonDict getDict(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="int size()" class="com.sonicbase.util.JsonDict" />
	<method signature="com.sonicbase.util.JsonDict put(java.lang.String,double)" class="com.sonicbase.util.JsonDict" />
	<method signature="com.sonicbase.util.JsonDict put(java.lang.String,java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.util.JsonDict" />
	<method signature="com.sonicbase.util.JsonDict putDict(java.lang.String,com.sonicbase.util.JsonDict)" class="com.sonicbase.util.JsonDict" />
	<method signature="java.lang.Long getLong(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="boolean isDict(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="com.sonicbase.util.JsonArray putArray(java.lang.String,com.sonicbase.util.JsonArray)" class="com.sonicbase.util.JsonDict" />
	<method signature="boolean hasKey(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="com.sonicbase.util.JsonArray putArray(java.lang.String,java.util.List)" class="com.sonicbase.util.JsonDict" />
	<method signature="boolean isLong(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="com.sonicbase.util.JsonDict put(java.lang.String,long)" class="com.sonicbase.util.JsonDict" />
	<method signature="com.sonicbase.util.JsonDict put(java.lang.String,boolean)" class="com.sonicbase.util.JsonDict" />
	<method signature="com.sonicbase.util.JsonDict fromJson(com.google.gson.JsonObject)" class="com.sonicbase.util.JsonDict" />
	<method signature="com.sonicbase.util.JsonArray getArray(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="boolean isArray(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="java.lang.String toString(boolean)" class="com.sonicbase.util.JsonDict" />
	<method signature="com.sonicbase.util.JsonDict putDict(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.util.JsonDict" />
	<method signature="boolean isDouble(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="void remove(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="java.lang.String getString(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="java.util.List keys()" class="com.sonicbase.util.JsonDict" />
	<method signature="void toString(java.lang.StringBuilder,boolean)" class="com.sonicbase.util.JsonDict" />
	<method signature="int getInt(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="com.sonicbase.util.JsonDict fromString(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="com.sonicbase.util.JsonArray putArray(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="java.lang.Double getDouble(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="boolean isString(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="java.util.Set getEntrySet()" class="com.sonicbase.util.JsonDict" />
	<method signature="java.lang.Boolean getBoolean(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="java.lang.String toString()" class="com.sonicbase.util.JsonDict" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="boolean isBoolean(java.lang.String)" class="com.sonicbase.util.JsonDict" />
	<method signature="void add(com.sonicbase.util.JsonDict)" class="com.sonicbase.util.JsonDict" />
	<field name="dict" class="com.sonicbase.util.JsonDict" />
	<class name="com.sonicbase.schema.TableSchema" />
	<method signature="java.util.Map getIndices()" class="com.sonicbase.schema.TableSchema" />
	<method signature="java.lang.String getName()" class="com.sonicbase.schema.TableSchema" />
	<method signature="void addField(com.sonicbase.schema.FieldSchema)" class="com.sonicbase.schema.TableSchema" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.TableSchema" />
	<method signature="java.util.List getFieldsForVersion(long,long)" class="com.sonicbase.schema.TableSchema" />
	<method signature="java.util.Map getIndexesById()" class="com.sonicbase.schema.TableSchema" />
	<method signature="int getVersion()" class="com.sonicbase.schema.TableSchema" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.TableSchema" />
	<method signature="void setPrimaryKey(java.util.List)" class="com.sonicbase.schema.TableSchema" />
	<method signature="void setName(java.lang.String)" class="com.sonicbase.schema.TableSchema" />
	<method signature="int getTableId()" class="com.sonicbase.schema.TableSchema" />
	<method signature="void saveFields(long)" class="com.sonicbase.schema.TableSchema" />
	<method signature="void setFields(java.util.List)" class="com.sonicbase.schema.TableSchema" />
	<method signature="java.util.List getFields()" class="com.sonicbase.schema.TableSchema" />
	<method signature="java.lang.Integer getFieldOffset(java.lang.String)" class="com.sonicbase.schema.TableSchema" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.schema.TableSchema" />
	<method signature="com.sonicbase.schema.TableSchema deepCopy()" class="com.sonicbase.schema.TableSchema" />
	<method signature="void deserialize(java.io.DataInputStream,int)" class="com.sonicbase.schema.TableSchema" />
	<method signature="void addIndex(java.lang.String,boolean,java.lang.String[],com.sonicbase.schema.TableSchema$Partition[],int)" class="com.sonicbase.schema.TableSchema" />
	<method signature="void setTableId(int)" class="com.sonicbase.schema.TableSchema" />
	<method signature="java.util.Comparator[] getComparators(java.lang.String[])" class="com.sonicbase.schema.TableSchema" />
	<method signature="java.util.Map getIndexes()" class="com.sonicbase.schema.TableSchema" />
	<method signature="void setVersion(int)" class="com.sonicbase.schema.TableSchema" />
	<method signature="java.lang.String[] getPrimaryKey()" class="com.sonicbase.schema.TableSchema" />
	<method signature="void markChangesComplete()" class="com.sonicbase.schema.TableSchema" />
	<field name="indexes" class="com.sonicbase.schema.TableSchema" />
	<field name="indexesById" class="com.sonicbase.schema.TableSchema" />
	<field name="fieldOffsets" class="com.sonicbase.schema.TableSchema" />
	<field name="name" class="com.sonicbase.schema.TableSchema" />
	<field name="tableId" class="com.sonicbase.schema.TableSchema" />
	<field name="fields" class="com.sonicbase.schema.TableSchema" />
	<field name="version" class="com.sonicbase.schema.TableSchema" />
	<field name="previousFields" class="com.sonicbase.schema.TableSchema" />
	<field name="primaryKey" class="com.sonicbase.schema.TableSchema" />
	<class name="com.sonicbase.server.LogManager$LogWriter" />
	<method signature="void run()" class="com.sonicbase.server.LogManager$LogWriter" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.LogManager$LogWriter" />
	<method signature="void access$000(com.sonicbase.server.LogManager$LogWriter)" class="com.sonicbase.server.LogManager$LogWriter" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.LogManager,int,int,java.util.concurrent.ArrayBlockingQueue,java.lang.String,int,int)" class="com.sonicbase.server.LogManager$LogWriter" />
	<method signature="void closeAndCreateLog()" class="com.sonicbase.server.LogManager$LogWriter" />
	<field name="currQueueTime" class="com.sonicbase.server.LogManager$LogWriter" />
	<field name="offset" class="com.sonicbase.server.LogManager$LogWriter" />
	<field name="replica" class="com.sonicbase.server.LogManager$LogWriter" />
	<field name="dataDir" class="com.sonicbase.server.LogManager$LogWriter" />
	<field name="this$0" class="com.sonicbase.server.LogManager$LogWriter" />
	<field name="shard" class="com.sonicbase.server.LogManager$LogWriter" />
	<field name="writer" class="com.sonicbase.server.LogManager$LogWriter" />
	<field name="currLogRequests" class="com.sonicbase.server.LogManager$LogWriter" />
	<field name="peerReplicaNum" class="com.sonicbase.server.LogManager$LogWriter" />
	<class name="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,net.sf.jsqlparser.expression.operators.relational.ExpressionList,java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="java.lang.String getColumnName()" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(int,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="boolean equals(java.lang.Object)" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="java.lang.Object evaluateSingleRecord(com.sonicbase.schema.TableSchema[],com.sonicbase.common.Record[],com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="void setTableName(java.lang.String)" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="boolean canSortWithIndex()" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="com.sonicbase.query.impl.ColumnImpl getPrimaryColumn()" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="void getColumnsInExpression(java.util.List)" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="int hashCode()" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="java.lang.String getFunction()" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="java.lang.String getTableName()" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="boolean canUseIndex()" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$Type getType()" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="net.sf.jsqlparser.expression.operators.relational.ExpressionList getParameters()" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="void queryRewrite()" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="void setColumnName(java.lang.String)" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="java.lang.String toString()" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="void getColumns(java.util.Set)" class="com.sonicbase.query.impl.ColumnImpl" />
	<method signature="java.lang.String getAlias()" class="com.sonicbase.query.impl.ColumnImpl" />
	<field name="function" class="com.sonicbase.query.impl.ColumnImpl" />
	<field name="alias" class="com.sonicbase.query.impl.ColumnImpl" />
	<field name="parameters" class="com.sonicbase.query.impl.ColumnImpl" />
	<field name="tableName" class="com.sonicbase.query.impl.ColumnImpl" />
	<field name="columnName" class="com.sonicbase.query.impl.ColumnImpl" />
	<class name="com.sonicbase.jdbcdriver.Parameter$Time" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$Time" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$Time" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$Time" />
	<method signature="void &lt;init&gt;(java.sql.Time)" class="com.sonicbase.jdbcdriver.Parameter$Time" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$Time" />
	<method signature="void &lt;init&gt;(java.sql.Time,java.util.Calendar)" class="com.sonicbase.jdbcdriver.Parameter$Time" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$Time" />
	<field name="cal" class="com.sonicbase.jdbcdriver.Parameter$Time" />
	<class name="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="void setCount(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="byte[] getBytes(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="void getMoreServerResults(com.sonicbase.query.impl.SelectStatementImpl)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.io.InputStream getBinaryStream(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.sql.Date getDate(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.math.BigDecimal getBigDecimal(int,int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Integer getInt(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="void forceSelectOnServer()" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="byte[] getBytes(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="void getMoreResults()" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="boolean isBeforeFirst()" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="boolean last()" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="int getRow()" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.math.BigDecimal getBigDecimal(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.String getString(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Float getFloat(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="boolean isMatchingAlias(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.String[] getDescribeStrs()" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Short getShort(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.sql.Timestamp getTimestamp(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Double getDouble(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,com.sonicbase.client.DatabaseClient,com.sonicbase.query.impl.SelectStatementImpl,com.sonicbase.jdbcdriver.ParameterHandler,java.util.Set,com.sonicbase.query.impl.SelectContextImpl,com.sonicbase.common.Record[],java.util.List,java.lang.String,com.sonicbase.query.impl.Counter[],net.sf.jsqlparser.statement.select.Limit,net.sf.jsqlparser.statement.select.Offset,java.util.List,com.sonicbase.query.impl.GroupByContext)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.math.BigDecimal getBigDecimal(java.lang.Object,int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Integer getInt(java.lang.Object,com.sonicbase.query.impl.SelectStatementImpl$Function)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="boolean isFirst()" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Object getField(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$CachedRecord[][] getReadRecordsAndSerializedRecords()" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Integer getInt(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Object getCounterValue(com.sonicbase.query.impl.SelectStatementImpl$Function)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.sql.Date getDate(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.String getIndexUsed()" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.io.InputStream getBinaryStream(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Boolean getBoolean(java.lang.Object)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.String getString(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Byte getByte(java.lang.Object,java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.io.InputStream getUnicodeStream(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Byte getByte(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Long getLong(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$RecordCache getRecordCache()" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.io.InputStream getAsciiStream(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.math.BigDecimal getBigDecimal(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="boolean isAfterLast()" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$CachedRecord[][] readRecords(com.sonicbase.query.impl.ExpressionImpl$NextReturn)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.math.BigDecimal getBigDecimal(java.lang.String,int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.String getString(java.lang.Object)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.sql.Time getTime(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Byte getByte(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.String[] getActualColumn(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.io.Reader getCharacterStream(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="void setPageSize(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="void &lt;init&gt;(java.util.List)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Float getFloat(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="void close()" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.sql.Timestamp getTimestamp(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Boolean getBoolean(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Double getDouble(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="void sortResults(java.lang.String,com.sonicbase.common.DatabaseCommon,com.sonicbase.query.impl.SelectStatementImpl,com.sonicbase.query.impl.ExpressionImpl$CachedRecord[][],java.lang.String[])" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,com.sonicbase.client.DatabaseClient,com.sonicbase.query.impl.SelectStatementImpl,long)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Short getShort(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.sql.Time getTime(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Float getFloat(java.lang.Object,com.sonicbase.query.impl.SelectStatementImpl$Function)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Object getGroupByFunctionResults(java.lang.String,com.sonicbase.schema.DataType$Type)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Boolean getBoolean(java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Short getShort(java.lang.Object,java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.io.Reader getCharacterStream(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="com.sonicbase.common.Record doReadRecord(java.lang.Object[],java.lang.String)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="boolean isLast()" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Long getLong(int)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Long getLong(java.lang.Object,com.sonicbase.query.impl.SelectStatementImpl$Function)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Double getDouble(java.lang.Object,com.sonicbase.query.impl.SelectStatementImpl$Function)" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="boolean next()" class="com.sonicbase.query.impl.ResultSetImpl" />
	<method signature="java.lang.Object getField(java.lang.String[])" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="recordCache" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="lastReadRecords" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="selectContext" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="columns" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="currRecord" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="dbName" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="databaseClient" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="pageSize" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="isCount" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="LENGTH_STR" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="limit" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="currTotalPos" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="groupByContext" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="selectStatement" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="parms" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="mapResults" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="offset" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="counters" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="UTF8_STR" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="count" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="currPos" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="groupByColumns" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="indexUsed" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="describeStrs" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="readRecords" class="com.sonicbase.query.impl.ResultSetImpl" />
	<field name="uniqueRecords" class="com.sonicbase.query.impl.ResultSetImpl" />
	<class name="com.sonicbase.schema.RecordIndexPartition" />
	<method signature="void &lt;init&gt;(int)" class="com.sonicbase.schema.RecordIndexPartition" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.RecordIndexPartition" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.RecordIndexPartition" />
	<method signature="void setShardOwning(int)" class="com.sonicbase.schema.RecordIndexPartition" />
	<method signature="int getShardOwning()" class="com.sonicbase.schema.RecordIndexPartition" />
	<field name="shardOwning" class="com.sonicbase.schema.RecordIndexPartition" />
	<class name="com.sonicbase.schema.DataType$Incrementer" />
	<method signature="java.lang.Object increment(java.lang.Object)" class="com.sonicbase.schema.DataType$Incrementer" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.DataType$Incrementer" />
	<class name="com.sonicbase.server.TransactionManager$Transaction" />
	<method signature="void &lt;init&gt;(long)" class="com.sonicbase.server.TransactionManager$Transaction" />
	<method signature="java.util.concurrent.ConcurrentHashMap getRecords()" class="com.sonicbase.server.TransactionManager$Transaction" />
	<method signature="java.util.List access$000(com.sonicbase.server.TransactionManager$Transaction)" class="com.sonicbase.server.TransactionManager$Transaction" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.TransactionManager$Transaction" />
	<method signature="java.util.List getOperations()" class="com.sonicbase.server.TransactionManager$Transaction" />
	<method signature="java.util.List getLocks()" class="com.sonicbase.server.TransactionManager$Transaction" />
	<method signature="void addOperation(com.sonicbase.server.TransactionManager$OperationType,java.lang.String,byte[],boolean)" class="com.sonicbase.server.TransactionManager$Transaction" />
	<method signature="long access$600(com.sonicbase.server.TransactionManager$Transaction)" class="com.sonicbase.server.TransactionManager$Transaction" />
	<field name="operations" class="com.sonicbase.server.TransactionManager$Transaction" />
	<field name="records" class="com.sonicbase.server.TransactionManager$Transaction" />
	<field name="id" class="com.sonicbase.server.TransactionManager$Transaction" />
	<field name="locks" class="com.sonicbase.server.TransactionManager$Transaction" />
	<class name="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void reset()" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="boolean isNot()" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn evaluateOrExpression(int,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setColumns(java.util.List)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(int,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setGroupByContext(com.sonicbase.query.impl.GroupByContext)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl buildQueryTree(java.util.List)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="java.lang.Object evaluateSingleRecord(com.sonicbase.schema.TableSchema[],com.sonicbase.common.Record[],com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,com.sonicbase.query.BinaryExpression$Operator,com.sonicbase.schema.DataType$Type,java.lang.Object)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setTableName(java.lang.String)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="boolean canSortWithIndex()" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void doQueryRewrite()" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="boolean isColumnCompare(com.sonicbase.query.impl.ExpressionImpl)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="java.lang.String isIndexed(com.sonicbase.query.impl.ExpressionImpl,java.util.concurrent.atomic.AtomicBoolean)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="boolean canUseIndex()" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="boolean like(java.lang.String,java.lang.String)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void queryRewrite()" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn evaluateAndExpression(int,java.util.concurrent.atomic.AtomicReference,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setDebug(boolean)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setRecordCache(com.sonicbase.query.impl.ExpressionImpl$RecordCache)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="com.sonicbase.query.Expression getLeftExpression()" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn evaluateRelationalOp(int,java.util.concurrent.atomic.AtomicReference,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void processBatch(java.util.List,java.lang.String,com.sonicbase.schema.TableSchema,java.util.List)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setDbName(java.lang.String)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl getRightExpression()" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setLeftExpression(com.sonicbase.query.Expression)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setOrderByExpressions(java.util.List)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setOperator(com.sonicbase.query.BinaryExpression$Operator)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void extractAndExpressions(java.lang.String,java.util.List,java.util.List,com.sonicbase.query.impl.ExpressionImpl)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setViewVersion(long)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setReplica(java.lang.Integer)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setCounters(com.sonicbase.query.impl.Counter[])" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setParms(com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void getMostUsedIndex(java.util.Map,com.sonicbase.query.impl.ExpressionImpl)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="com.sonicbase.query.Expression getRightExpression()" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn evaluateOneSidedIndex(java.lang.String[],int,com.sonicbase.query.impl.ExpressionImpl,com.sonicbase.query.impl.ExpressionImpl,java.lang.String,com.sonicbase.query.BinaryExpression$Operator,java.lang.Object,java.lang.String,com.sonicbase.query.BinaryExpression$Operator,java.lang.Object,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void forceSelectOnServer(boolean)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ColumnImpl getPrimaryColumn()" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl getLeftExpression()" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void getColumnsInExpression(java.util.List)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setLimit(net.sf.jsqlparser.statement.select.Limit)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="java.lang.Object[] makeSingleKeyExpression(java.lang.String,java.lang.String,java.util.List,com.sonicbase.query.BinaryExpression$Operator,java.lang.String,java.util.List,com.sonicbase.query.BinaryExpression$Operator)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setTopLevelExpression(com.sonicbase.query.Expression)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setNot(boolean)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setRightExpression(com.sonicbase.query.Expression)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$Type getType()" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="int getAndOrCount(com.sonicbase.query.impl.ExpressionImpl)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void setClient(com.sonicbase.client.DatabaseClient)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="com.sonicbase.query.BinaryExpression$Operator getOperator()" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void access$000(com.sonicbase.query.impl.BinaryExpressionImpl,java.util.List,java.lang.String,com.sonicbase.schema.TableSchema,java.util.List)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="java.lang.String toString()" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void &lt;init&gt;(com.sonicbase.query.BinaryExpression$Operator)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<method signature="void getColumns(java.util.Set)" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<field name="originalLeftValue" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<field name="originalRightValue" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<field name="isNot" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<field name="indexName" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<field name="leftExpression" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<field name="exhausted" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<field name="rewroteQuery" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<field name="rightExpression" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<field name="operator" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<field name="columnName" class="com.sonicbase.query.impl.BinaryExpressionImpl" />
	<class name="com.sonicbase.common.ComObject" />
	<method signature="com.sonicbase.common.ComObject getObject(com.sonicbase.common.ComObject$Tag)" class="com.sonicbase.common.ComObject" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.ComObject" />
	<method signature="java.lang.Boolean getBoolean(com.sonicbase.common.ComObject$Tag)" class="com.sonicbase.common.ComObject" />
	<method signature="void deserialize(byte[])" class="com.sonicbase.common.ComObject" />
	<method signature="void &lt;init&gt;(java.io.DataInputStream)" class="com.sonicbase.common.ComObject" />
	<method signature="void put(com.sonicbase.common.ComObject$Tag,java.lang.String)" class="com.sonicbase.common.ComObject" />
	<method signature="void put(com.sonicbase.common.ComObject$Tag,long)" class="com.sonicbase.common.ComObject" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.common.ComObject" />
	<method signature="java.lang.Long getLong(com.sonicbase.common.ComObject$Tag)" class="com.sonicbase.common.ComObject" />
	<method signature="void put(com.sonicbase.common.ComObject$Tag,float)" class="com.sonicbase.common.ComObject" />
	<method signature="com.sonicbase.common.ComObject putObject(com.sonicbase.common.ComObject$Tag)" class="com.sonicbase.common.ComObject" />
	<method signature="void put(com.sonicbase.common.ComObject$Tag,double)" class="com.sonicbase.common.ComObject" />
	<method signature="byte[] getByteArray(com.sonicbase.common.ComObject$Tag)" class="com.sonicbase.common.ComObject" />
	<method signature="java.lang.String getString(com.sonicbase.common.ComObject$Tag)" class="com.sonicbase.common.ComObject" />
	<method signature="java.lang.Integer getInt(com.sonicbase.common.ComObject$Tag)" class="com.sonicbase.common.ComObject" />
	<method signature="void put(com.sonicbase.common.ComObject$Tag,byte[])" class="com.sonicbase.common.ComObject" />
	<method signature="void put(com.sonicbase.common.ComObject$Tag,boolean)" class="com.sonicbase.common.ComObject" />
	<method signature="java.lang.Float getFloat(com.sonicbase.common.ComObject$Tag)" class="com.sonicbase.common.ComObject" />
	<method signature="com.sonicbase.common.ComArray getArray(com.sonicbase.common.ComObject$Tag)" class="com.sonicbase.common.ComObject" />
	<method signature="java.lang.Double getDouble(com.sonicbase.common.ComObject$Tag)" class="com.sonicbase.common.ComObject" />
	<method signature="void remove(com.sonicbase.common.ComObject$Tag)" class="com.sonicbase.common.ComObject" />
	<method signature="void put(com.sonicbase.common.ComObject$Tag,int)" class="com.sonicbase.common.ComObject" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.common.ComObject" />
	<method signature="byte[] serialize()" class="com.sonicbase.common.ComObject" />
	<method signature="void &lt;init&gt;(byte[])" class="com.sonicbase.common.ComObject" />
	<method signature="com.sonicbase.common.ComArray putArray(com.sonicbase.common.ComObject$Tag,com.sonicbase.common.ComObject$Type)" class="com.sonicbase.common.ComObject" />
	<field name="tagsByTag" class="com.sonicbase.common.ComObject" />
	<field name="typesByTag" class="com.sonicbase.common.ComObject" />
	<field name="map" class="com.sonicbase.common.ComObject" />
	<class name="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="java.util.Comparator access$502(com.sonicbase.query.impl.GroupByContext$FieldContext,java.util.Comparator)" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="void setDataType(com.sonicbase.schema.DataType$Type)" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="java.lang.String access$200(com.sonicbase.query.impl.GroupByContext$FieldContext)" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="com.sonicbase.schema.DataType$Type access$400(com.sonicbase.query.impl.GroupByContext$FieldContext)" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="java.util.Comparator getComparator()" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="void setComparator(java.util.Comparator)" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="int access$300(com.sonicbase.query.impl.GroupByContext$FieldContext)" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="void setFieldOffset(int)" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="void setFieldName(java.lang.String)" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="java.lang.String access$202(com.sonicbase.query.impl.GroupByContext$FieldContext,java.lang.String)" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="com.sonicbase.schema.DataType$Type getDataType()" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="com.sonicbase.schema.DataType$Type access$402(com.sonicbase.query.impl.GroupByContext$FieldContext,com.sonicbase.schema.DataType$Type)" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="int access$302(com.sonicbase.query.impl.GroupByContext$FieldContext,int)" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="int getFieldOffset()" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<method signature="java.lang.String getFieldName()" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<field name="comparator" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<field name="fieldName" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<field name="fieldOffset" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<field name="dataType" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<field name="tableSchema" class="com.sonicbase.query.impl.GroupByContext$FieldContext" />
	<class name="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<method signature="byte[] processRequest(java.lang.String,byte[])" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<method signature="void channelReadComplete(io.netty.channel.ChannelHandlerContext)" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<method signature="byte[] returnException(java.lang.String,java.lang.Throwable)" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<method signature="void handlerRemoved(io.netty.channel.ChannelHandlerContext)" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<method signature="void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<method signature="void &lt;init&gt;(com.sonicbase.research.socket.NettyServer)" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<method signature="byte[] doProcessRequest(com.sonicbase.research.socket.NettyServer$Request)" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<method signature="void handlerAdded(io.netty.channel.ChannelHandlerContext)" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<method signature="void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<method signature="void processError(java.lang.String,java.util.List,java.lang.Throwable)" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<method signature="java.util.List doProcessRequests(java.util.List)" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<method signature="java.util.List processRequests(java.util.List)" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<field name="readState" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<field name="len" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<field name="respBuffer" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<field name="bodyLen" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<field name="intBuff" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<field name="this$0" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<field name="alloc" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<field name="command" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<field name="destBuff" class="com.sonicbase.research.socket.NettyServer$ServerHandler" />
	<class name="com.sonicbase.common.Logger$1" />
	<method signature="void run()" class="com.sonicbase.common.Logger$1" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.common.Logger$1" />
	<class name="com.sonicbase.index.Index" />
	<method signature="long size()" class="com.sonicbase.index.Index" />
	<method signature="java.lang.Object getMutex(java.lang.Object[])" class="com.sonicbase.index.Index" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.index.Index" />
	<method signature="java.util.Map$Entry floorEntry(java.lang.Object[])" class="com.sonicbase.index.Index" />
	<method signature="java.util.Map$Entry[] lowerEntries(java.lang.Object[],java.util.Map$Entry[])" class="com.sonicbase.index.Index" />
	<method signature="java.util.Map$Entry[] higherEntries(java.lang.Object[],java.util.Map$Entry[])" class="com.sonicbase.index.Index" />
	<method signature="java.lang.Object get(java.lang.Object[])" class="com.sonicbase.index.Index" />
	<method signature="void &lt;init&gt;(com.sonicbase.schema.TableSchema,java.lang.String,java.util.Comparator[])" class="com.sonicbase.index.Index" />
	<method signature="boolean iterate(com.sonicbase.index.Index$Visitor)" class="com.sonicbase.index.Index" />
	<method signature="void clear()" class="com.sonicbase.index.Index" />
	<method signature="java.lang.Object remove(java.lang.Object[])" class="com.sonicbase.index.Index" />
	<method signature="java.lang.Object put(java.lang.Object[],java.lang.Object)" class="com.sonicbase.index.Index" />
	<method signature="java.util.Map$Entry lastEntry()" class="com.sonicbase.index.Index" />
	<method signature="java.util.Map$Entry lowerEntry(java.lang.Object[])" class="com.sonicbase.index.Index" />
	<method signature="boolean isOrdered()" class="com.sonicbase.index.Index" />
	<method signature="java.util.Map$Entry ceilingEntry(java.lang.Object[])" class="com.sonicbase.index.Index" />
	<method signature="java.util.List equalsEntries(java.lang.Object[])" class="com.sonicbase.index.Index" />
	<method signature="java.lang.Iterable values()" class="com.sonicbase.index.Index" />
	<method signature="java.util.Map$Entry higherEntry(java.lang.Object[])" class="com.sonicbase.index.Index" />
	<method signature="java.util.List getKeyAtOffset(java.util.List,java.lang.Object[],java.lang.Object[])" class="com.sonicbase.index.Index" />
	<method signature="boolean visitTailMap(java.lang.Object[],com.sonicbase.index.Index$Visitor)" class="com.sonicbase.index.Index" />
	<method signature="java.lang.Object unsafePutIfAbsent(java.lang.Object[],java.lang.Object)" class="com.sonicbase.index.Index" />
	<method signature="java.util.Comparator[] getComparators()" class="com.sonicbase.index.Index" />
	<method signature="boolean visitHeadMap(java.lang.Object[],com.sonicbase.index.Index$Visitor)" class="com.sonicbase.index.Index" />
	<method signature="java.util.Map$Entry firstEntry()" class="com.sonicbase.index.Index" />
	<method signature="long getSize(java.lang.Object[],java.lang.Object[])" class="com.sonicbase.index.Index" />
	<field name="stringIndex" class="com.sonicbase.index.Index" />
	<field name="ordered" class="com.sonicbase.index.Index" />
	<field name="fastUtil" class="com.sonicbase.index.Index" />
	<field name="utf8Comparator" class="com.sonicbase.index.Index" />
	<field name="longSkipIndex" class="com.sonicbase.index.Index" />
	<field name="logger" class="com.sonicbase.index.Index" />
	<field name="stringSkipIndex" class="com.sonicbase.index.Index" />
	<field name="mutexes" class="com.sonicbase.index.Index" />
	<field name="comparator" class="com.sonicbase.index.Index" />
	<field name="size" class="com.sonicbase.index.Index" />
	<field name="objectIndex" class="com.sonicbase.index.Index" />
	<field name="objectSkipIndex" class="com.sonicbase.index.Index" />
	<field name="longIndex" class="com.sonicbase.index.Index" />
	<field name="comparators" class="com.sonicbase.index.Index" />
	<class name="com.sonicbase.jdbcdriver.Parameter$BinaryStream" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$BinaryStream" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$BinaryStream" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$BinaryStream" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$BinaryStream" />
	<method signature="void &lt;init&gt;(byte[],long)" class="com.sonicbase.jdbcdriver.Parameter$BinaryStream" />
	<method signature="void &lt;init&gt;(byte[])" class="com.sonicbase.jdbcdriver.Parameter$BinaryStream" />
	<field name="length" class="com.sonicbase.jdbcdriver.Parameter$BinaryStream" />
	<class name="com.sonicbase.schema.IndexSchema" />
	<method signature="void deleteLastPartitions()" class="com.sonicbase.schema.IndexSchema" />
	<method signature="java.lang.String getName()" class="com.sonicbase.schema.IndexSchema" />
	<method signature="int getIndexId()" class="com.sonicbase.schema.IndexSchema" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.IndexSchema" />
	<method signature="boolean isPrimaryKeyGroup()" class="com.sonicbase.schema.IndexSchema" />
	<method signature="void setIndexId(int)" class="com.sonicbase.schema.IndexSchema" />
	<method signature="com.sonicbase.schema.TableSchema$Partition[] getCurrPartitions()" class="com.sonicbase.schema.IndexSchema" />
	<method signature="void setIsPrimaryKeyGroup(boolean)" class="com.sonicbase.schema.IndexSchema" />
	<method signature="void setIsUnique(boolean)" class="com.sonicbase.schema.IndexSchema" />
	<method signature="void setComparators(java.util.Comparator[])" class="com.sonicbase.schema.IndexSchema" />
	<method signature="void &lt;init&gt;(java.lang.String,int,boolean,java.lang.String[],java.util.Comparator[],com.sonicbase.schema.TableSchema$Partition[],boolean,boolean)" class="com.sonicbase.schema.IndexSchema" />
	<method signature="void setCurrPartitions(com.sonicbase.schema.TableSchema$Partition[])" class="com.sonicbase.schema.IndexSchema" />
	<method signature="com.sonicbase.schema.TableSchema$Partition[] getLastPartitions()" class="com.sonicbase.schema.IndexSchema" />
	<method signature="void reshardPartitions(java.util.List)" class="com.sonicbase.schema.IndexSchema" />
	<method signature="boolean isUnique()" class="com.sonicbase.schema.IndexSchema" />
	<method signature="java.util.Comparator[] getComparators()" class="com.sonicbase.schema.IndexSchema" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.IndexSchema" />
	<method signature="boolean isPrimaryKey()" class="com.sonicbase.schema.IndexSchema" />
	<method signature="void setName(java.lang.String)" class="com.sonicbase.schema.IndexSchema" />
	<method signature="void setFields(java.lang.String[])" class="com.sonicbase.schema.IndexSchema" />
	<method signature="void setIsPrimaryKey(boolean)" class="com.sonicbase.schema.IndexSchema" />
	<method signature="void setLastPartitions(com.sonicbase.schema.TableSchema$Partition[])" class="com.sonicbase.schema.IndexSchema" />
	<method signature="java.lang.String[] getFields()" class="com.sonicbase.schema.IndexSchema" />
	<field name="lastPartitions" class="com.sonicbase.schema.IndexSchema" />
	<field name="isUnique" class="com.sonicbase.schema.IndexSchema" />
	<field name="name" class="com.sonicbase.schema.IndexSchema" />
	<field name="indexId" class="com.sonicbase.schema.IndexSchema" />
	<field name="isPrimaryKey" class="com.sonicbase.schema.IndexSchema" />
	<field name="isPrimaryKeyGroup" class="com.sonicbase.schema.IndexSchema" />
	<field name="fields" class="com.sonicbase.schema.IndexSchema" />
	<field name="currPartitions" class="com.sonicbase.schema.IndexSchema" />
	<field name="comparators" class="com.sonicbase.schema.IndexSchema" />
	<class name="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<method signature="int access$100(com.sonicbase.jdbcdriver.ResultSetProxy$FieldType)" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<method signature="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType valueOf(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<method signature="void &lt;init&gt;(java.lang.String,int,java.lang.String,int)" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<method signature="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType[] values()" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<method signature="java.lang.String access$000(com.sonicbase.jdbcdriver.ResultSetProxy$FieldType)" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="FLOAT" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="BLOB" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="ARRAY" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="BINARY" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="DECIMAL" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="CHAR" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="type" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="NCHAR" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="NVARCHAR" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="JAVA_OBJECT" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="TIMESTAMP" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="DOUBLE" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="TINYINT" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="$VALUES" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="INTEGER" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="NCLOB" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="NUMERIC" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="LONGVARCHAR" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="NULL" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="CLOB" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="LONGNVARCHAR" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="DISTINCT" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="BIGINT" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="TIME" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="OID" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="BIT" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="BOOLEAN" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="OTHER" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="DATE" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="REF" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="SQLXML" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="BYTEA" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="SMALLINT" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="DATALINK" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="REAL" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="VARCHAR" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="name" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="VARBINARY" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="LONGVARBINARY" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="STRUCT" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<field name="ROWID" class="com.sonicbase.jdbcdriver.ResultSetProxy$FieldType" />
	<class name="com.sonicbase.research.socket.NettyServer$3" />
	<method signature="void run()" class="com.sonicbase.research.socket.NettyServer$3" />
	<method signature="void &lt;init&gt;(com.sonicbase.research.socket.NettyServer,com.sonicbase.server.DatabaseServer,java.util.concurrent.atomic.AtomicBoolean)" class="com.sonicbase.research.socket.NettyServer$3" />
	<field name="val$isRunning" class="com.sonicbase.research.socket.NettyServer$3" />
	<field name="this$0" class="com.sonicbase.research.socket.NettyServer$3" />
	<field name="val$databaseServer" class="com.sonicbase.research.socket.NettyServer$3" />
	<class name="com.sonicbase.research.socket.NettyServer$2" />
	<method signature="void run()" class="com.sonicbase.research.socket.NettyServer$2" />
	<method signature="void &lt;init&gt;(com.sonicbase.research.socket.NettyServer)" class="com.sonicbase.research.socket.NettyServer$2" />
	<field name="this$0" class="com.sonicbase.research.socket.NettyServer$2" />
	<class name="com.sonicbase.research.socket.NettyServer$1" />
	<method signature="void initChannel(io.netty.channel.socket.SocketChannel)" class="com.sonicbase.research.socket.NettyServer$1" />
	<method signature="void initChannel(io.netty.channel.Channel)" class="com.sonicbase.research.socket.NettyServer$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.research.socket.NettyServer)" class="com.sonicbase.research.socket.NettyServer$1" />
	<field name="this$0" class="com.sonicbase.research.socket.NettyServer$1" />
	<class name="com.sonicbase.common.Logger$Error" />
	<method signature="void &lt;init&gt;(com.sonicbase.common.Logger,com.sonicbase.client.DatabaseClient,java.lang.String,java.lang.Throwable)" class="com.sonicbase.common.Logger$Error" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.Logger$Error" />
	<field name="msg" class="com.sonicbase.common.Logger$Error" />
	<field name="e" class="com.sonicbase.common.Logger$Error" />
	<field name="this$0" class="com.sonicbase.common.Logger$Error" />
	<field name="client" class="com.sonicbase.common.Logger$Error" />
	<class name="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="int executeUpdate(java.lang.String,int)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setTime(int,java.sql.Time,java.util.Calendar)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setMaxRows(int)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setBinaryStream(int,java.io.InputStream,long)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="int executeUpdate()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setNCharacterStream(int,java.io.Reader,long)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setCursorName(java.lang.String)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="int getFetchDirection()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setQueryTimeout(int)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="int getResultSetType()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="java.sql.ResultSet executeQuery(java.lang.String)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="boolean isCloseOnCompletion()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="boolean getMoreResults()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void addBatch()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="com.sonicbase.jdbcdriver.ParameterHandler getParms()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setNull(int,int)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setNCharacterStream(int,java.io.Reader)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setBinaryStream(int,java.io.InputStream,int)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setRowId(int,java.sql.RowId)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setObject(int,java.lang.Object,int)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="int executeUpdate(java.lang.String)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setTimestamp(int,java.sql.Timestamp)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="int getFetchSize()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void addBatch(java.lang.String)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="int getUpdateCount()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="java.sql.SQLWarning getWarnings()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="boolean execute(java.lang.String)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setMaxFieldSize(int)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setEscapeProcessing(boolean)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setInt(int,int)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setDouble(int,double)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setNClob(int,java.io.Reader,long)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setBinaryStream(int,java.io.InputStream)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="boolean execute(java.lang.String,java.lang.String[])" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setClob(int,java.io.Reader)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setNClob(int,java.sql.NClob)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setFloat(int,float)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setBytes(int,byte[])" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setBoolean(int,boolean)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setRef(int,java.sql.Ref)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setClob(int,java.io.Reader,long)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="java.sql.ParameterMetaData getParameterMetaData()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setFetchSize(int)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setNClob(int,java.io.Reader)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="int executeUpdate(java.lang.String,int[])" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setPoolable(boolean)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setAsciiStream(int,java.io.InputStream,long)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="boolean execute(java.lang.String,int)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="int getMaxRows()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setFetchDirection(int)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setCharacterStream(int,java.io.Reader,long)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="boolean execute()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setObject(int,java.lang.Object,int,int)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setAsciiStream(int,java.io.InputStream,int)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setClob(int,java.sql.Clob)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="java.sql.ResultSet getResultSet()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="java.lang.Object unwrap(java.lang.Class)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setDate(int,java.sql.Date,java.util.Calendar)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="java.sql.ResultSetMetaData getMetaData()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="boolean isWrapperFor(java.lang.Class)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setShort(int,short)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setSQLXML(int,java.sql.SQLXML)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setLong(int,long)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setBlob(int,java.io.InputStream)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setString(int,java.lang.String)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="int getResultSetHoldability()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setDate(int,java.sql.Date)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="boolean getMoreResults(int)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void cancel()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setUnicodeStream(int,java.io.InputStream,int)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setCharacterStream(int,java.io.Reader)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="int getMaxFieldSize()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="java.sql.ResultSet executeQuery()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setObject(int,java.lang.Object)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setNString(int,java.lang.String)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="java.sql.Connection getConnection()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="int getResultSetConcurrency()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="boolean isClosed()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setBigDecimal(int,java.math.BigDecimal)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setTime(int,java.sql.Time)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setByte(int,byte)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void clearWarnings()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setAsciiStream(int,java.io.InputStream)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setArray(int,java.sql.Array)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void closeOnCompletion()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="boolean isPoolable()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setBlob(int,java.io.InputStream,long)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void clearBatch()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void close()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="boolean execute(java.lang.String,int[])" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="int[] executeBatch()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setBlob(int,java.sql.Blob)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setURL(int,java.net.URL)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="int getQueryTimeout()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setCharacterStream(int,java.io.Reader,int)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="int executeUpdate(java.lang.String,java.lang.String[])" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.ConnectionProxy,com.sonicbase.client.DatabaseClient,java.lang.String)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="java.sql.ResultSet getGeneratedKeys()" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<method signature="void setNull(int,int,java.lang.String)" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<field name="maxRows" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<field name="maxFieldSize" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<field name="fetchSize" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<field name="dbName" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<field name="databaseClient" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<field name="connectionProxy" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<field name="fetchDirection" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<field name="sql" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<field name="parms" class="com.sonicbase.jdbcdriver.StatementProxy" />
	<class name="com.sonicbase.util.DataUtil" />
	<method signature="void writeVLong(java.io.DataOutput,long,com.sonicbase.util.DataUtil$ResultLength)" class="com.sonicbase.util.DataUtil" />
	<method signature="long readVLong(java.io.DataInput,com.sonicbase.util.DataUtil$ResultLength)" class="com.sonicbase.util.DataUtil" />
	<method signature="float readFloat(byte[],int)" class="com.sonicbase.util.DataUtil" />
	<method signature="void writeFloat(float,byte[],int)" class="com.sonicbase.util.DataUtil" />
	<method signature="long readVLong(java.io.DataInput)" class="com.sonicbase.util.DataUtil" />
	<method signature="void writeDouble(double,byte[],int)" class="com.sonicbase.util.DataUtil" />
	<method signature="void writeVLong(byte[],long,com.sonicbase.util.DataUtil$ResultLength)" class="com.sonicbase.util.DataUtil" />
	<method signature="long readVLong(byte[],int,com.sonicbase.util.DataUtil$ResultLength)" class="com.sonicbase.util.DataUtil" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.util.DataUtil" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.util.DataUtil" />
	<method signature="void writeVLong(java.io.DataOutputStream,long)" class="com.sonicbase.util.DataUtil" />
	<method signature="double readDouble(byte[],int)" class="com.sonicbase.util.DataUtil" />
	<class name="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<method signature="void testAlias3()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<method signature="void testHaving()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<method signature="void testCase()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<method signature="void testAlterTable()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<method signature="void testInsertColumn()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<method signature="void beforeClass()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<method signature="void testInsertFromSelect()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<method signature="void testCreateTableLike()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<method signature="void testChangeFieldDataType()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<method signature="void testToDate()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<method signature="void testCopyTable()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<method signature="void testDropTable()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<method signature="void testDropIndex()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<method signature="void testUnion()" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<field name="conn" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<field name="recordCount" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<field name="ids" class="com.sonicbase.bench.TestDatabaseAdvancedToDo" />
	<class name="com.sonicbase.query.impl.ResultSetImpl$1" />
	<method signature="void &lt;init&gt;(int[],int[],boolean[],java.util.Comparator[])" class="com.sonicbase.query.impl.ResultSetImpl$1" />
	<method signature="int compare(com.sonicbase.query.impl.ExpressionImpl$CachedRecord[],com.sonicbase.query.impl.ExpressionImpl$CachedRecord[])" class="com.sonicbase.query.impl.ResultSetImpl$1" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.query.impl.ResultSetImpl$1" />
	<field name="val$tableOffsets" class="com.sonicbase.query.impl.ResultSetImpl$1" />
	<field name="val$fieldOffsets" class="com.sonicbase.query.impl.ResultSetImpl$1" />
	<field name="val$ascendingFlags" class="com.sonicbase.query.impl.ResultSetImpl$1" />
	<field name="val$comparators" class="com.sonicbase.query.impl.ResultSetImpl$1" />
	<class name="com.sonicbase.query.impl.ExpressionImpl$RecordCache" />
	<method signature="void clear()" class="com.sonicbase.query.impl.ExpressionImpl$RecordCache" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$CachedRecord get(java.lang.String,java.lang.Object[])" class="com.sonicbase.query.impl.ExpressionImpl$RecordCache" />
	<method signature="void put(java.lang.String,java.lang.Object[],com.sonicbase.query.impl.ExpressionImpl$CachedRecord)" class="com.sonicbase.query.impl.ExpressionImpl$RecordCache" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ExpressionImpl$RecordCache" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.ExpressionImpl$RecordCache" />
	<method signature="java.util.Map getRecordsForTable()" class="com.sonicbase.query.impl.ExpressionImpl$RecordCache" />
	<method signature="boolean containsKey(java.lang.String,java.lang.Object[])" class="com.sonicbase.query.impl.ExpressionImpl$RecordCache" />
	<field name="recordsForTable" class="com.sonicbase.query.impl.ExpressionImpl$RecordCache" />
	<class name="com.sonicbase.index.Repartitioner$9" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Repartitioner,int,com.sonicbase.common.ComObject)" class="com.sonicbase.index.Repartitioner$9" />
	<method signature="java.lang.Object call()" class="com.sonicbase.index.Repartitioner$9" />
	<field name="val$replica" class="com.sonicbase.index.Repartitioner$9" />
	<field name="this$0" class="com.sonicbase.index.Repartitioner$9" />
	<field name="val$cobj" class="com.sonicbase.index.Repartitioner$9" />
	<class name="com.sonicbase.query.impl.ExpressionImpl$CachedRecord" />
	<method signature="void setSerializedRecord(byte[])" class="com.sonicbase.query.impl.ExpressionImpl$CachedRecord" />
	<method signature="void setRecord(com.sonicbase.common.Record)" class="com.sonicbase.query.impl.ExpressionImpl$CachedRecord" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ExpressionImpl$CachedRecord" />
	<method signature="com.sonicbase.common.Record getRecord()" class="com.sonicbase.query.impl.ExpressionImpl$CachedRecord" />
	<method signature="byte[] getSerializedRecord()" class="com.sonicbase.query.impl.ExpressionImpl$CachedRecord" />
	<method signature="void &lt;init&gt;(com.sonicbase.common.Record,byte[])" class="com.sonicbase.query.impl.ExpressionImpl$CachedRecord" />
	<field name="serializedRecord" class="com.sonicbase.query.impl.ExpressionImpl$CachedRecord" />
	<field name="record" class="com.sonicbase.query.impl.ExpressionImpl$CachedRecord" />
	<class name="com.sonicbase.index.Repartitioner$7" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Repartitioner,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.ThreadPoolExecutor,java.lang.String,java.lang.String,com.sonicbase.index.Index,com.sonicbase.schema.IndexSchema,java.lang.String,int[],com.sonicbase.schema.TableSchema,com.sonicbase.common.ComObject,java.util.concurrent.atomic.AtomicInteger)" class="com.sonicbase.index.Repartitioner$7" />
	<method signature="boolean visit(java.lang.Object[],java.lang.Object)" class="com.sonicbase.index.Repartitioner$7" />
	<field name="val$countSubmitted" class="com.sonicbase.index.Repartitioner$7" />
	<field name="val$indexName" class="com.sonicbase.index.Repartitioner$7" />
	<field name="val$fieldOffsets" class="com.sonicbase.index.Repartitioner$7" />
	<field name="val$index" class="com.sonicbase.index.Repartitioner$7" />
	<field name="val$cobj" class="com.sonicbase.index.Repartitioner$7" />
	<field name="val$tableName" class="com.sonicbase.index.Repartitioner$7" />
	<field name="val$countFinished" class="com.sonicbase.index.Repartitioner$7" />
	<field name="val$currEntries" class="com.sonicbase.index.Repartitioner$7" />
	<field name="this$0" class="com.sonicbase.index.Repartitioner$7" />
	<field name="val$dbName" class="com.sonicbase.index.Repartitioner$7" />
	<field name="val$countVisited" class="com.sonicbase.index.Repartitioner$7" />
	<field name="val$tableSchema" class="com.sonicbase.index.Repartitioner$7" />
	<field name="val$executor" class="com.sonicbase.index.Repartitioner$7" />
	<field name="val$indexSchema" class="com.sonicbase.index.Repartitioner$7" />
	<class name="com.sonicbase.client.DatabaseClient$1" />
	<method signature="java.lang.Object call()" class="com.sonicbase.client.DatabaseClient$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient,java.util.List,int,java.util.List,java.lang.Object,java.util.List,java.util.concurrent.atomic.AtomicInteger)" class="com.sonicbase.client.DatabaseClient$1" />
	<field name="val$cobjs1" class="com.sonicbase.client.DatabaseClient$1" />
	<field name="this$0" class="com.sonicbase.client.DatabaseClient$1" />
	<field name="val$offset" class="com.sonicbase.client.DatabaseClient$1" />
	<field name="val$withRecordPrepared" class="com.sonicbase.client.DatabaseClient$1" />
	<field name="val$withRecordProcessed" class="com.sonicbase.client.DatabaseClient$1" />
	<field name="val$totalCount" class="com.sonicbase.client.DatabaseClient$1" />
	<field name="val$mutex" class="com.sonicbase.client.DatabaseClient$1" />
	<class name="com.sonicbase.index.Repartitioner$8" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Repartitioner,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.ThreadPoolExecutor,java.lang.String,java.lang.String,com.sonicbase.index.Index,com.sonicbase.schema.IndexSchema,java.lang.String,int[],com.sonicbase.schema.TableSchema,com.sonicbase.common.ComObject,java.util.concurrent.atomic.AtomicInteger)" class="com.sonicbase.index.Repartitioner$8" />
	<method signature="boolean visit(java.lang.Object[],java.lang.Object)" class="com.sonicbase.index.Repartitioner$8" />
	<field name="val$countSubmitted" class="com.sonicbase.index.Repartitioner$8" />
	<field name="val$indexName" class="com.sonicbase.index.Repartitioner$8" />
	<field name="val$fieldOffsets" class="com.sonicbase.index.Repartitioner$8" />
	<field name="val$index" class="com.sonicbase.index.Repartitioner$8" />
	<field name="val$cobj" class="com.sonicbase.index.Repartitioner$8" />
	<field name="val$tableName" class="com.sonicbase.index.Repartitioner$8" />
	<field name="val$countFinished" class="com.sonicbase.index.Repartitioner$8" />
	<field name="val$currEntries" class="com.sonicbase.index.Repartitioner$8" />
	<field name="this$0" class="com.sonicbase.index.Repartitioner$8" />
	<field name="val$dbName" class="com.sonicbase.index.Repartitioner$8" />
	<field name="val$countVisited" class="com.sonicbase.index.Repartitioner$8" />
	<field name="val$tableSchema" class="com.sonicbase.index.Repartitioner$8" />
	<field name="val$executor" class="com.sonicbase.index.Repartitioner$8" />
	<field name="val$indexSchema" class="com.sonicbase.index.Repartitioner$8" />
	<class name="com.sonicbase.index.Repartitioner$5" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.index.Repartitioner$5" />
	<method signature="int compare(com.sonicbase.index.Repartitioner$OffsetEntry,com.sonicbase.index.Repartitioner$OffsetEntry)" class="com.sonicbase.index.Repartitioner$5" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.index.Repartitioner$5" />
	<class name="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void reset()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="boolean isForceSelectOnServer()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.client.DatabaseClient getClient()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl deserializeExpression(java.io.DataInputStream)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="int getNextShard()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.common.Record doReadRecord(java.lang.String,com.sonicbase.client.DatabaseClient,boolean,com.sonicbase.jdbcdriver.ParameterHandler,com.sonicbase.query.Expression,com.sonicbase.query.impl.ExpressionImpl$RecordCache,java.lang.Object[],java.lang.String,java.util.List,long,boolean)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void setColumns(java.util.List)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(int,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void setGroupByContext(com.sonicbase.query.impl.GroupByContext)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void serializeExpression(com.sonicbase.query.impl.ExpressionImpl,java.io.DataOutputStream)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void writeColumns(com.sonicbase.schema.TableSchema,java.util.List,com.sonicbase.common.ComArray)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="java.util.List getColumns()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="java.lang.Object evaluateSingleRecord(com.sonicbase.schema.TableSchema[],com.sonicbase.common.Record[],com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void setTableName(java.lang.String)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.common.Record[] aggregateResults(com.sonicbase.common.Record[],com.sonicbase.common.Record[])" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="java.util.HashMap doReadRecords(java.lang.String,com.sonicbase.client.DatabaseClient,int,boolean,com.sonicbase.schema.TableSchema,java.util.List,java.lang.String[],java.util.List,com.sonicbase.query.impl.ExpressionImpl$RecordCache,long)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="java.util.concurrent.ConcurrentHashMap access$700()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="boolean canSortWithIndex()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.jdbcdriver.ParameterHandler getParms()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.query.impl.SelectContextImpl lookupIds(java.lang.String,com.sonicbase.common.DatabaseCommon,com.sonicbase.client.DatabaseClient,int,int,java.lang.String,java.lang.String,boolean,com.sonicbase.query.BinaryExpression$Operator,com.sonicbase.query.BinaryExpression$Operator,java.util.List,java.lang.Object[],com.sonicbase.jdbcdriver.ParameterHandler,com.sonicbase.query.Expression,java.lang.Object[],java.lang.Object[],java.lang.Object[],java.util.List,java.lang.String,int,com.sonicbase.query.impl.ExpressionImpl$RecordCache,java.util.concurrent.atomic.AtomicReference,boolean,long,com.sonicbase.query.impl.Counter[],com.sonicbase.query.impl.GroupByContext,boolean)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="java.lang.Object[][] aggregateResults(java.lang.Object[][],java.lang.Object[][])" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void aggregateKeys(java.util.Map,int,java.lang.Object[][])" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="java.lang.String getTableName()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="java.util.List getOrderByExpressions()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="boolean canUseIndex()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="java.lang.Integer getReplica()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="long getViewVersion()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void evaluateCounter(com.sonicbase.common.DatabaseCommon,com.sonicbase.client.DatabaseClient,java.lang.String,com.sonicbase.query.impl.Counter)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void aggregateRecords(java.util.Map,int,byte[])" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void aggregateRecords(java.util.Map,int,com.sonicbase.common.Record[])" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void queryRewrite()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="java.lang.Object getValueFromExpression(com.sonicbase.jdbcdriver.ParameterHandler,com.sonicbase.query.impl.ExpressionImpl)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void setDebug(boolean)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="byte[][] aggregateResults(byte[][],byte[][])" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void setRecordCache(com.sonicbase.query.impl.ExpressionImpl$RecordCache)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="org.apache.log4j.Logger access$1000()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn batchLookupIds(java.lang.String,com.sonicbase.common.DatabaseCommon,com.sonicbase.client.DatabaseClient,boolean,int,com.sonicbase.schema.TableSchema,com.sonicbase.query.BinaryExpression$Operator,java.util.Map$Entry,java.util.List,java.util.List,int,java.util.concurrent.atomic.AtomicReference,com.sonicbase.query.impl.ExpressionImpl$RecordCache,long)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void access$500(java.util.Map,int,java.lang.Object[][])" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void setDbName(java.lang.String)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="java.lang.Object[][][] aggregateResults(java.lang.Object[][][],java.lang.Object[][][])" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$RecordCache getRecordCache()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn access$100(java.lang.String,com.sonicbase.common.DatabaseCommon,com.sonicbase.client.DatabaseClient,boolean,int,com.sonicbase.schema.TableSchema,com.sonicbase.query.BinaryExpression$Operator,java.util.Map$Entry,java.util.List,java.util.List,int,java.util.concurrent.atomic.AtomicReference,com.sonicbase.query.impl.ExpressionImpl$RecordCache,long)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void setOrderByExpressions(java.util.List)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.query.impl.GroupByContext getGroupByContext()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void setViewVersion(long)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void setReplica(java.lang.Integer)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void setCounters(com.sonicbase.query.impl.Counter[])" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void setParms(com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="boolean handlePreparedNotFound(java.lang.Throwable)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void forceSelectOnServer(boolean)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ColumnImpl getPrimaryColumn()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void getColumnsInExpression(java.util.List)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl deserializeExpression(byte[])" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="java.lang.Object[] buildKey(java.util.List,java.lang.String[])" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void setLimit(net.sf.jsqlparser.statement.select.Limit)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void setTopLevelExpression(com.sonicbase.query.Expression)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void setNextShard(int)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.query.impl.Counter[] getCounters()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void setNextKey(java.lang.Object[])" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$Type getType()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void setClient(com.sonicbase.client.DatabaseClient)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.query.Expression getTopLevelExpression()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="java.util.HashMap readRecords(java.lang.String,com.sonicbase.client.DatabaseClient,int,boolean,com.sonicbase.schema.TableSchema,java.util.List,java.lang.String[],java.util.List,com.sonicbase.query.impl.ExpressionImpl$RecordCache,long)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.common.Record doReadRecord(java.lang.String,com.sonicbase.client.DatabaseClient,boolean,com.sonicbase.query.impl.ExpressionImpl$RecordCache,java.lang.Object[],java.lang.String,java.util.List,com.sonicbase.query.Expression,com.sonicbase.jdbcdriver.ParameterHandler,long,boolean)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="com.sonicbase.query.impl.SelectContextImpl tableScan(java.lang.String,com.sonicbase.client.DatabaseClient,int,com.sonicbase.schema.TableSchema,java.util.List,com.sonicbase.query.impl.ExpressionImpl,com.sonicbase.jdbcdriver.ParameterHandler,java.util.List,int,java.lang.Object[],com.sonicbase.query.impl.ExpressionImpl$RecordCache,com.sonicbase.query.impl.Counter[],com.sonicbase.query.impl.GroupByContext)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="java.lang.Object[] getNextKey()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="java.util.Map access$000()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void access$400(com.sonicbase.schema.TableSchema,java.util.List,com.sonicbase.common.ComArray)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void aggregateRecords(java.util.Map,int,byte[][])" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="byte[] serializeExpression(com.sonicbase.query.impl.ExpressionImpl)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void stopPreparedReaper()" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void writeColumns(com.sonicbase.schema.TableSchema,java.util.List,java.io.DataOutputStream,com.sonicbase.util.DataUtil$ResultLength)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void getColumns(java.util.Set)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<method signature="void startPreparedReaper(com.sonicbase.client.DatabaseClient)" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="orderByExpressions" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="recordCache" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="replica" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="columns" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="logger" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="dbName" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="tableName" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="viewVersion" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="typesById" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="preparedIndexLookups" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="limit" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="client" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="groupByContext" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="topLevelExpression" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="indexBegin" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="parms" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="debug" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="counters" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="indexCount" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="METRICS" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="forceSelectOnServer" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="preparedReaper" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="nextShard" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="dbViewNum" class="com.sonicbase.query.impl.ExpressionImpl" />
	<field name="nextKey" class="com.sonicbase.query.impl.ExpressionImpl" />
	<class name="com.sonicbase.server.LongRunningCommands$Type" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.LongRunningCommands$Type" />
	<method signature="com.sonicbase.server.LongRunningCommands$Type valueOf(java.lang.String)" class="com.sonicbase.server.LongRunningCommands$Type" />
	<method signature="com.sonicbase.server.LongRunningCommands$Type[] values()" class="com.sonicbase.server.LongRunningCommands$Type" />
	<method signature="void &lt;init&gt;(java.lang.String,int,int)" class="com.sonicbase.server.LongRunningCommands$Type" />
	<field name="single" class="com.sonicbase.server.LongRunningCommands$Type" />
	<field name="compound" class="com.sonicbase.server.LongRunningCommands$Type" />
	<field name="value" class="com.sonicbase.server.LongRunningCommands$Type" />
	<field name="$VALUES" class="com.sonicbase.server.LongRunningCommands$Type" />
	<class name="com.sonicbase.index.Repartitioner$6" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Repartitioner$GetKeyAtOffset,java.lang.String,java.util.Map$Entry,java.lang.String,java.lang.String,java.util.List)" class="com.sonicbase.index.Repartitioner$6" />
	<method signature="java.lang.Object call()" class="com.sonicbase.index.Repartitioner$6" />
	<field name="val$entry" class="com.sonicbase.index.Repartitioner$6" />
	<field name="val$getKey" class="com.sonicbase.index.Repartitioner$6" />
	<field name="val$indexName" class="com.sonicbase.index.Repartitioner$6" />
	<field name="val$newPartitions" class="com.sonicbase.index.Repartitioner$6" />
	<field name="val$dbName" class="com.sonicbase.index.Repartitioner$6" />
	<field name="val$tableName" class="com.sonicbase.index.Repartitioner$6" />
	<class name="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="void setNot(boolean)" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="boolean isNot()" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="boolean canUseIndex()" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl getExpression()" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$Type getType()" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="void setExpression(com.sonicbase.query.impl.ExpressionImpl)" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(int,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="java.lang.Object evaluateSingleRecord(com.sonicbase.schema.TableSchema[],com.sonicbase.common.Record[],com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="void queryRewrite()" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="boolean canSortWithIndex()" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="com.sonicbase.query.impl.ColumnImpl getPrimaryColumn()" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<method signature="void getColumns(java.util.Set)" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<field name="expression" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<field name="isNot" class="com.sonicbase.query.impl.ParenthesisImpl" />
	<class name="com.sonicbase.client.DatabaseClient$4" />
	<method signature="java.util.Map call()" class="com.sonicbase.client.DatabaseClient$4" />
	<method signature="java.lang.Object call()" class="com.sonicbase.client.DatabaseClient$4" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient,int,int)" class="com.sonicbase.client.DatabaseClient$4" />
	<field name="val$replica" class="com.sonicbase.client.DatabaseClient$4" />
	<field name="this$0" class="com.sonicbase.client.DatabaseClient$4" />
	<field name="val$shard" class="com.sonicbase.client.DatabaseClient$4" />
	<class name="com.sonicbase.index.Repartitioner$3" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Repartitioner,java.util.Comparator[])" class="com.sonicbase.index.Repartitioner$3" />
	<method signature="int compare(com.sonicbase.schema.TableSchema$Partition,com.sonicbase.schema.TableSchema$Partition)" class="com.sonicbase.index.Repartitioner$3" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.index.Repartitioner$3" />
	<field name="this$0" class="com.sonicbase.index.Repartitioner$3" />
	<field name="val$comparators" class="com.sonicbase.index.Repartitioner$3" />
	<class name="com.sonicbase.client.DatabaseClient$5" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient,com.sonicbase.client.DatabaseClient$KeyInfo)" class="com.sonicbase.client.DatabaseClient$5" />
	<method signature="int compare(java.lang.Object[],java.lang.Object[])" class="com.sonicbase.client.DatabaseClient$5" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.client.DatabaseClient$5" />
	<field name="this$0" class="com.sonicbase.client.DatabaseClient$5" />
	<field name="val$keyInfo" class="com.sonicbase.client.DatabaseClient$5" />
	<class name="com.sonicbase.index.Repartitioner$4" />
	<method signature="java.lang.Object call()" class="com.sonicbase.index.Repartitioner$4" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Repartitioner,java.lang.String,java.lang.String,java.lang.String,int,int[])" class="com.sonicbase.index.Repartitioner$4" />
	<field name="val$masters" class="com.sonicbase.index.Repartitioner$4" />
	<field name="val$indexName" class="com.sonicbase.index.Repartitioner$4" />
	<field name="this$0" class="com.sonicbase.index.Repartitioner$4" />
	<field name="val$dbName" class="com.sonicbase.index.Repartitioner$4" />
	<field name="val$shard" class="com.sonicbase.index.Repartitioner$4" />
	<field name="val$finalTableName" class="com.sonicbase.index.Repartitioner$4" />
	<class name="com.sonicbase.server.DatabaseServer$NullHostnameVerifier" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.DatabaseServer$NullHostnameVerifier" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.server.DatabaseServer$NullHostnameVerifier" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer$1)" class="com.sonicbase.server.DatabaseServer$NullHostnameVerifier" />
	<method signature="boolean verify(java.lang.String,javax.net.ssl.SSLSession)" class="com.sonicbase.server.DatabaseServer$NullHostnameVerifier" />
	<class name="com.sonicbase.client.DatabaseClient$2" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient,java.util.List,int,java.util.List,java.util.List)" class="com.sonicbase.client.DatabaseClient$2" />
	<method signature="java.lang.Object call()" class="com.sonicbase.client.DatabaseClient$2" />
	<field name="val$prepared" class="com.sonicbase.client.DatabaseClient$2" />
	<field name="val$cobjs2" class="com.sonicbase.client.DatabaseClient$2" />
	<field name="this$0" class="com.sonicbase.client.DatabaseClient$2" />
	<field name="val$offset" class="com.sonicbase.client.DatabaseClient$2" />
	<field name="val$processed" class="com.sonicbase.client.DatabaseClient$2" />
	<class name="com.sonicbase.index.Repartitioner$1" />
	<method signature="java.lang.Object call()" class="com.sonicbase.index.Repartitioner$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Repartitioner,long[],int,java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.index.Repartitioner$1" />
	<field name="val$indexName" class="com.sonicbase.index.Repartitioner$1" />
	<field name="val$currTableName" class="com.sonicbase.index.Repartitioner$1" />
	<field name="this$0" class="com.sonicbase.index.Repartitioner$1" />
	<field name="val$offset" class="com.sonicbase.index.Repartitioner$1" />
	<field name="val$dbName" class="com.sonicbase.index.Repartitioner$1" />
	<field name="val$currPartitionSizes" class="com.sonicbase.index.Repartitioner$1" />
	<class name="com.sonicbase.client.DatabaseClient$3" />
	<method signature="java.lang.Object call()" class="com.sonicbase.client.DatabaseClient$3" />
	<method signature="byte[] call()" class="com.sonicbase.client.DatabaseClient$3" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient,java.lang.String,int,long,java.lang.String,com.sonicbase.common.ComObject,com.sonicbase.client.DatabaseClient$Replica,boolean)" class="com.sonicbase.client.DatabaseClient$3" />
	<field name="val$ignoreDeath" class="com.sonicbase.client.DatabaseClient$3" />
	<field name="val$replica" class="com.sonicbase.client.DatabaseClient$3" />
	<field name="val$batchKey" class="com.sonicbase.client.DatabaseClient$3" />
	<field name="val$command" class="com.sonicbase.client.DatabaseClient$3" />
	<field name="val$auth_user" class="com.sonicbase.client.DatabaseClient$3" />
	<field name="this$0" class="com.sonicbase.client.DatabaseClient$3" />
	<field name="val$body" class="com.sonicbase.client.DatabaseClient$3" />
	<field name="val$shard" class="com.sonicbase.client.DatabaseClient$3" />
	<class name="com.sonicbase.index.Repartitioner$2" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Repartitioner)" class="com.sonicbase.index.Repartitioner$2" />
	<method signature="java.util.List getKeyAtOffset(java.lang.String,int,java.lang.String,java.lang.String,java.util.List)" class="com.sonicbase.index.Repartitioner$2" />
	<field name="this$0" class="com.sonicbase.index.Repartitioner$2" />
	<class name="com.sonicbase.client.DatabaseClient$6" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.client.DatabaseClient$6" />
	<field name="$SwitchMap$com$sonicbase$schema$DataType$Type" class="com.sonicbase.client.DatabaseClient$6" />
	<class name="com.sonicbase.util.SerializationHelper" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.util.SerializationHelper" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.util.SerializationHelper" />
	<class name="com.sonicbase.bench.TestConcurrentSkipListMap$2" />
	<method signature="void run()" class="com.sonicbase.bench.TestConcurrentSkipListMap$2" />
	<method signature="void &lt;init&gt;(java.util.Random,java.util.concurrent.ConcurrentSkipListMap,int,long)" class="com.sonicbase.bench.TestConcurrentSkipListMap$2" />
	<field name="val$map" class="com.sonicbase.bench.TestConcurrentSkipListMap$2" />
	<field name="val$begin" class="com.sonicbase.bench.TestConcurrentSkipListMap$2" />
	<field name="val$offset" class="com.sonicbase.bench.TestConcurrentSkipListMap$2" />
	<field name="val$rand" class="com.sonicbase.bench.TestConcurrentSkipListMap$2" />
	<class name="com.sonicbase.index.Index$1" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.index.Index$1" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.index.Index$1" />
	<class name="com.sonicbase.bench.TestConcurrentSkipListMap$1" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.bench.TestConcurrentSkipListMap$1" />
	<method signature="int compare(java.lang.Object[],java.lang.Object[])" class="com.sonicbase.bench.TestConcurrentSkipListMap$1" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.bench.TestConcurrentSkipListMap$1" />
	<class name="com.sonicbase.common.SchemaOutOfSyncException" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.SchemaOutOfSyncException" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.common.SchemaOutOfSyncException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.sonicbase.common.SchemaOutOfSyncException" />
	<class name="com.sonicbase.index.Index$2" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Index,java.util.Comparator[])" class="com.sonicbase.index.Index$2" />
	<method signature="int compare(java.lang.Object[],java.lang.Object[])" class="com.sonicbase.index.Index$2" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.index.Index$2" />
	<field name="this$0" class="com.sonicbase.index.Index$2" />
	<field name="val$comparators" class="com.sonicbase.index.Index$2" />
	<class name="com.sonicbase.index.Repartitioner" />
	<method signature="boolean undeleteIndexEntry(java.lang.String,java.lang.String,java.lang.String,java.lang.Object[],byte[])" class="com.sonicbase.index.Repartitioner" />
	<method signature="void doProcessEntries(com.sonicbase.index.Repartitioner$MoveProcessor[],java.lang.String,java.lang.String,java.util.List,com.sonicbase.index.Index,com.sonicbase.schema.IndexSchema,java.lang.String,int[],com.sonicbase.schema.TableSchema,com.sonicbase.common.ComObject)" class="com.sonicbase.index.Repartitioner" />
	<method signature="void deleteRecordsOnOtherReplicas(java.lang.String,java.lang.String,java.lang.String,java.util.concurrent.ConcurrentLinkedQueue)" class="com.sonicbase.index.Repartitioner" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer,com.sonicbase.common.DatabaseCommon)" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.common.ComObject deleteMovedRecords(com.sonicbase.common.ComObject)" class="com.sonicbase.index.Repartitioner" />
	<method signature="void shutdown()" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.server.DatabaseServer access$300(com.sonicbase.index.Repartitioner)" class="com.sonicbase.index.Repartitioner" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.index.Repartitioner" />
	<method signature="void setMinSizeForRepartition(int)" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.common.ComObject isShardRepartitioningComplete(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.index.Repartitioner$GlobalIndexCounts getIndexCounts(java.lang.String,com.sonicbase.client.DatabaseClient)" class="com.sonicbase.index.Repartitioner" />
	<method signature="void calculatePartitions(java.lang.String,int,java.util.List,java.lang.String,java.lang.String,long[],long,com.sonicbase.index.Repartitioner$GetKeyAtOffset)" class="com.sonicbase.index.Repartitioner" />
	<method signature="void access$2100(com.sonicbase.index.Repartitioner,com.sonicbase.index.Repartitioner$MoveProcessor[],java.lang.String,java.lang.String,java.util.List,com.sonicbase.index.Index,com.sonicbase.schema.IndexSchema,java.lang.String,int[],com.sonicbase.schema.TableSchema,com.sonicbase.common.ComObject)" class="com.sonicbase.index.Repartitioner" />
	<method signature="void logCurrPartitions(java.lang.String,java.lang.String,java.lang.String,com.sonicbase.schema.TableSchema$Partition[])" class="com.sonicbase.index.Repartitioner" />
	<method signature="java.util.List access$100(com.sonicbase.index.Repartitioner,java.lang.String,int,java.lang.String,java.lang.String,java.util.List)" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.common.ComObject rebalanceOrderedIndex(com.sonicbase.common.ComObject)" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.common.Logger access$400()" class="com.sonicbase.index.Repartitioner" />
	<method signature="void stopShardsFromRepartitioning()" class="com.sonicbase.index.Repartitioner" />
	<method signature="long getPartitionSize(java.lang.String,int,java.lang.String,java.lang.String)" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.common.ComObject moveIndexEntries(com.sonicbase.common.ComObject)" class="com.sonicbase.index.Repartitioner" />
	<method signature="void resetDeletingComplete()" class="com.sonicbase.index.Repartitioner" />
	<method signature="void logPartitionsToApply(java.lang.String,java.lang.String,java.lang.String,java.util.List)" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.common.ComObject stopRepartitioning(com.sonicbase.common.ComObject)" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.common.ComObject doRebalanceOrderedIndex(com.sonicbase.common.ComObject)" class="com.sonicbase.index.Repartitioner" />
	<method signature="int getCompareValue(java.util.Comparator[],java.lang.Object[],java.lang.Object[])" class="com.sonicbase.index.Repartitioner" />
	<method signature="void access$1300(com.sonicbase.index.Repartitioner,java.lang.String,java.lang.String,java.lang.String,boolean,int,java.util.List)" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.common.ComObject getKeyAtOffset(com.sonicbase.common.ComObject)" class="com.sonicbase.index.Repartitioner" />
	<method signature="byte[] finishRebalance(java.lang.String,byte[])" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.common.ComObject isRepartitioningComplete(com.sonicbase.common.ComObject)" class="com.sonicbase.index.Repartitioner" />
	<method signature="byte[] beginRebalance(java.lang.String,java.util.List)" class="com.sonicbase.index.Repartitioner" />
	<method signature="void deleteIndexEntry(java.lang.String,java.lang.String,java.lang.Object[])" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.common.ComObject notifyRepartitioningComplete(com.sonicbase.common.ComObject)" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.index.Repartitioner$MoveProcessor[] access$2000(com.sonicbase.index.Repartitioner)" class="com.sonicbase.index.Repartitioner" />
	<method signature="void run()" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.common.ComObject beginRebalance(com.sonicbase.common.ComObject)" class="com.sonicbase.index.Repartitioner" />
	<method signature="java.util.List findOrderedPartitionForRecord(boolean,boolean,int[],com.sonicbase.common.DatabaseCommon,com.sonicbase.schema.TableSchema,java.lang.String,java.util.List,com.sonicbase.query.BinaryExpression$Operator,com.sonicbase.query.BinaryExpression$Operator,java.lang.Object[],java.lang.Object[])" class="com.sonicbase.index.Repartitioner" />
	<method signature="long access$000(com.sonicbase.index.Repartitioner,java.lang.String,int,java.lang.String,java.lang.String)" class="com.sonicbase.index.Repartitioner" />
	<method signature="void resetRepartitioningComplete()" class="com.sonicbase.index.Repartitioner" />
	<method signature="boolean isRepartitioningComplete()" class="com.sonicbase.index.Repartitioner" />
	<method signature="void doSelectPartitions(com.sonicbase.schema.TableSchema$Partition[],com.sonicbase.schema.TableSchema,java.lang.String,com.sonicbase.query.BinaryExpression$Operator,java.util.Comparator[],java.lang.Object[],boolean,java.util.List)" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.common.ComObject getPartitionSize(com.sonicbase.common.ComObject)" class="com.sonicbase.index.Repartitioner" />
	<method signature="boolean addToRebalance(java.util.List,java.util.Map$Entry,java.lang.String,com.sonicbase.index.Repartitioner$IndexCounts,boolean)" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.common.DatabaseCommon access$200(com.sonicbase.index.Repartitioner)" class="com.sonicbase.index.Repartitioner" />
	<method signature="java.util.List getKeyAtOffset(java.lang.String,int,java.lang.String,java.lang.String,java.util.List)" class="com.sonicbase.index.Repartitioner" />
	<method signature="java.util.concurrent.ConcurrentHashMap getIndicesToDeleteFrom(java.lang.String,java.lang.String)" class="com.sonicbase.index.Repartitioner" />
	<method signature="void moveIndexEntriesToShard(java.lang.String,java.lang.String,java.lang.String,boolean,int,java.util.List)" class="com.sonicbase.index.Repartitioner" />
	<method signature="com.sonicbase.common.ComObject getIndexCounts(com.sonicbase.common.ComObject)" class="com.sonicbase.index.Repartitioner" />
	<method signature="void doSelectPartitions(com.sonicbase.schema.TableSchema$Partition[],com.sonicbase.schema.TableSchema,java.lang.String,com.sonicbase.query.BinaryExpression$Operator,java.util.Comparator[],java.lang.Object[],java.lang.Object[],boolean,java.util.List)" class="com.sonicbase.index.Repartitioner" />
	<field name="tableToDeleteEntriesFrom" class="com.sonicbase.index.Repartitioner" />
	<field name="databaseServer" class="com.sonicbase.index.Repartitioner" />
	<field name="moveProcessors" class="com.sonicbase.index.Repartitioner" />
	<field name="logger" class="com.sonicbase.index.Repartitioner" />
	<field name="minSizeForRepartition" class="com.sonicbase.index.Repartitioner" />
	<field name="entriesToDelete" class="com.sonicbase.index.Repartitioner" />
	<field name="INDEX_STR" class="com.sonicbase.index.Repartitioner" />
	<field name="currTableRepartitioning" class="com.sonicbase.index.Repartitioner" />
	<field name="isShardRepartitioningComplete" class="com.sonicbase.index.Repartitioner" />
	<field name="deletingComplete" class="com.sonicbase.index.Repartitioner" />
	<field name="indices" class="com.sonicbase.index.Repartitioner" />
	<field name="isRebalancing" class="com.sonicbase.index.Repartitioner" />
	<field name="NAME_STR" class="com.sonicbase.index.Repartitioner" />
	<field name="common" class="com.sonicbase.index.Repartitioner" />
	<field name="currIndexRepartitioning" class="com.sonicbase.index.Repartitioner" />
	<field name="repartitioningRecordsByIdComplete" class="com.sonicbase.index.Repartitioner" />
	<field name="repartitioningComplete" class="com.sonicbase.index.Repartitioner" />
	<field name="beginRepartitioningThread" class="com.sonicbase.index.Repartitioner" />
	<field name="isRepartitioningIndex" class="com.sonicbase.index.Repartitioner" />
	<field name="shutdown" class="com.sonicbase.index.Repartitioner" />
	<field name="isComplete" class="com.sonicbase.index.Repartitioner" />
	<class name="com.sonicbase.index.Index$3" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Index)" class="com.sonicbase.index.Index$3" />
	<method signature="int compare(java.lang.Long,java.lang.Long)" class="com.sonicbase.index.Index$3" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.index.Index$3" />
	<field name="this$0" class="com.sonicbase.index.Index$3" />
	<class name="com.sonicbase.index.Index$4" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Index,java.util.Comparator[])" class="com.sonicbase.index.Index$4" />
	<method signature="int compare(java.lang.Object[],java.lang.Object[])" class="com.sonicbase.index.Index$4" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.index.Index$4" />
	<field name="this$0" class="com.sonicbase.index.Index$4" />
	<field name="val$comparators" class="com.sonicbase.index.Index$4" />
	<class name="com.sonicbase.index.Index$5" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Index,java.util.Comparator[])" class="com.sonicbase.index.Index$5" />
	<method signature="int compare(java.lang.Object[],java.lang.Object[])" class="com.sonicbase.index.Index$5" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.index.Index$5" />
	<field name="this$0" class="com.sonicbase.index.Index$5" />
	<field name="val$comparators" class="com.sonicbase.index.Index$5" />
	<class name="com.sonicbase.index.Index$6" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Index,java.util.Comparator[])" class="com.sonicbase.index.Index$6" />
	<method signature="int compare(java.lang.Object[],java.lang.Object[])" class="com.sonicbase.index.Index$6" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.index.Index$6" />
	<field name="this$0" class="com.sonicbase.index.Index$6" />
	<field name="val$comparators" class="com.sonicbase.index.Index$6" />
	<class name="com.sonicbase.server.DatabaseServer$NullX509TrustManager" />
	<method signature="void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)" class="com.sonicbase.server.DatabaseServer$NullX509TrustManager" />
	<method signature="void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)" class="com.sonicbase.server.DatabaseServer$NullX509TrustManager" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.DatabaseServer$NullX509TrustManager" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.server.DatabaseServer$NullX509TrustManager" />
	<method signature="java.security.cert.X509Certificate[] getAcceptedIssuers()" class="com.sonicbase.server.DatabaseServer$NullX509TrustManager" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer$1)" class="com.sonicbase.server.DatabaseServer$NullX509TrustManager" />
	<class name="com.sonicbase.index.Index$7" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Index,java.util.Comparator[])" class="com.sonicbase.index.Index$7" />
	<method signature="int compare(java.lang.Object[],java.lang.Object[])" class="com.sonicbase.index.Index$7" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.index.Index$7" />
	<field name="this$0" class="com.sonicbase.index.Index$7" />
	<field name="val$comparators" class="com.sonicbase.index.Index$7" />
	<class name="com.sonicbase.index.Index$8" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Index,java.lang.Object[],java.util.concurrent.atomic.AtomicLong)" class="com.sonicbase.index.Index$8" />
	<method signature="boolean visit(java.lang.Object[],java.lang.Object)" class="com.sonicbase.index.Index$8" />
	<field name="this$0" class="com.sonicbase.index.Index$8" />
	<field name="val$maxKey" class="com.sonicbase.index.Index$8" />
	<field name="val$currOffset" class="com.sonicbase.index.Index$8" />
	<class name="com.sonicbase.jdbcdriver.Parameter$UnicodeStream" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$UnicodeStream" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$UnicodeStream" />
	<method signature="void &lt;init&gt;(java.io.InputStream,int)" class="com.sonicbase.jdbcdriver.Parameter$UnicodeStream" />
	<field name="length" class="com.sonicbase.jdbcdriver.Parameter$UnicodeStream" />
	<class name="com.sonicbase.index.Index$9" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Index,java.lang.Object[],java.util.List,java.util.concurrent.atomic.AtomicLong,java.util.List,java.util.concurrent.atomic.AtomicInteger)" class="com.sonicbase.index.Index$9" />
	<method signature="boolean visit(java.lang.Object[],java.lang.Object)" class="com.sonicbase.index.Index$9" />
	<field name="val$offsets" class="com.sonicbase.index.Index$9" />
	<field name="val$ret" class="com.sonicbase.index.Index$9" />
	<field name="this$0" class="com.sonicbase.index.Index$9" />
	<field name="val$maxKey" class="com.sonicbase.index.Index$9" />
	<field name="val$currOffset" class="com.sonicbase.index.Index$9" />
	<field name="val$curr" class="com.sonicbase.index.Index$9" />
	<class name="com.sonicbase.jdbcdriver.Parameter$Byte" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$Byte" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$Byte" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$Byte" />
	<method signature="void &lt;init&gt;(byte)" class="com.sonicbase.jdbcdriver.Parameter$Byte" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$Byte" />
	<class name="com.sonicbase.server.DatabaseServer$ResultType" />
	<method signature="int getType()" class="com.sonicbase.server.DatabaseServer$ResultType" />
	<method signature="com.sonicbase.server.DatabaseServer$ResultType[] values()" class="com.sonicbase.server.DatabaseServer$ResultType" />
	<method signature="com.sonicbase.server.DatabaseServer$ResultType valueOf(java.lang.String)" class="com.sonicbase.server.DatabaseServer$ResultType" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.DatabaseServer$ResultType" />
	<method signature="void &lt;init&gt;(java.lang.String,int,int)" class="com.sonicbase.server.DatabaseServer$ResultType" />
	<field name="schema" class="com.sonicbase.server.DatabaseServer$ResultType" />
	<field name="bool" class="com.sonicbase.server.DatabaseServer$ResultType" />
	<field name="records" class="com.sonicbase.server.DatabaseServer$ResultType" />
	<field name="integer" class="com.sonicbase.server.DatabaseServer$ResultType" />
	<field name="type" class="com.sonicbase.server.DatabaseServer$ResultType" />
	<field name="$VALUES" class="com.sonicbase.server.DatabaseServer$ResultType" />
	<class name="com.sonicbase.query.impl.WrongTableException" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.WrongTableException" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.WrongTableException" />
	<class name="com.sonicbase.schema.DataType$Utf8Comparator" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.DataType$Utf8Comparator" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$Utf8Comparator" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.schema.DataType$Utf8Comparator" />
	<method signature="void &lt;init&gt;(com.sonicbase.schema.DataType$1)" class="com.sonicbase.schema.DataType$Utf8Comparator" />
	<class name="com.sonicbase.research.socket.NettyServer$RequestHandler" />
	<method signature="java.lang.String handleCommandOld(java.lang.String,java.lang.String)" class="com.sonicbase.research.socket.NettyServer$RequestHandler" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.research.socket.NettyServer$RequestHandler" />
	<method signature="java.lang.String handleCommand(java.lang.String,java.lang.String)" class="com.sonicbase.research.socket.NettyServer$RequestHandler" />
	<class name="com.sonicbase.common.WindowsTerminal" />
	<method signature="void enableAnsi()" class="com.sonicbase.common.WindowsTerminal" />
	<method signature="java.lang.String getConsoleSize()" class="com.sonicbase.common.WindowsTerminal" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.WindowsTerminal" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.common.WindowsTerminal" />
	<class name="com.sonicbase.query.impl.ExpressionImpl$RecordToRead" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ExpressionImpl$RecordToRead" />
	<method signature="void &lt;init&gt;(int,long)" class="com.sonicbase.query.impl.ExpressionImpl$RecordToRead" />
	<field name="tableId" class="com.sonicbase.query.impl.ExpressionImpl$RecordToRead" />
	<field name="id" class="com.sonicbase.query.impl.ExpressionImpl$RecordToRead" />
	<class name="com.sonicbase.schema.DataType$1" />
	<method signature="java.lang.Object convert(java.lang.Object)" class="com.sonicbase.schema.DataType$1" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$1" />
	<class name="com.sonicbase.query.Connection" />
	<method signature="com.sonicbase.query.UpdateStatement createUpdateStatement()" class="com.sonicbase.query.Connection" />
	<method signature="com.sonicbase.query.CreateTableStatement createCreateTableStatement()" class="com.sonicbase.query.Connection" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.Connection" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.sonicbase.query.Connection" />
	<method signature="com.sonicbase.query.CreateIndexStatement createCreateIndexStatement()" class="com.sonicbase.query.Connection" />
	<method signature="com.sonicbase.query.SelectStatement createSelectStatement()" class="com.sonicbase.query.Connection" />
	<method signature="com.sonicbase.query.InsertStatement createInsertStatement()" class="com.sonicbase.query.Connection" />
	<field name="client" class="com.sonicbase.query.Connection" />
	<class name="com.sonicbase.server.DatabaseServer$Shard" />
	<method signature="void serialize(java.io.DataOutputStream,long)" class="com.sonicbase.server.DatabaseServer$Shard" />
	<method signature="void &lt;init&gt;(java.io.DataInputStream,long)" class="com.sonicbase.server.DatabaseServer$Shard" />
	<method signature="int getMasterReplica()" class="com.sonicbase.server.DatabaseServer$Shard" />
	<method signature="void setMasterReplica(int)" class="com.sonicbase.server.DatabaseServer$Shard" />
	<method signature="com.sonicbase.server.DatabaseServer$Host[] getReplicas()" class="com.sonicbase.server.DatabaseServer$Shard" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.DatabaseServer$Shard" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer$Host[])" class="com.sonicbase.server.DatabaseServer$Shard" />
	<method signature="boolean contains(java.lang.String,int)" class="com.sonicbase.server.DatabaseServer$Shard" />
	<method signature="com.sonicbase.server.DatabaseServer$Host[] access$3900(com.sonicbase.server.DatabaseServer$Shard)" class="com.sonicbase.server.DatabaseServer$Shard" />
	<field name="replicas" class="com.sonicbase.server.DatabaseServer$Shard" />
	<field name="masterReplica" class="com.sonicbase.server.DatabaseServer$Shard" />
	<class name="com.sonicbase.query.impl.UpdateStatementImpl" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient)" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl getWhereClause()" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<method signature="java.util.List getColumns()" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<method signature="java.lang.String getTableName()" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<method signature="void setTableName(java.lang.String)" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<method signature="void setWhereClause(com.sonicbase.query.Expression)" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<method signature="java.lang.Object execute(java.lang.String,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<method signature="void addSetExpression(com.sonicbase.query.Expression)" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<method signature="void addColumn(net.sf.jsqlparser.schema.Column)" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<method signature="java.util.List getSetExpressions()" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<method signature="int getCurrParmNum()" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<field name="recordCache" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<field name="whereClause" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<field name="columns" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<field name="client" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<field name="setExpressions" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<field name="tableName" class="com.sonicbase.query.impl.UpdateStatementImpl" />
	<class name="com.sonicbase.server.LogManager" />
	<method signature="void startLoggingForPeer(int)" class="com.sonicbase.server.LogManager" />
	<method signature="double getPercentApplyQueuesComplete()" class="com.sonicbase.server.LogManager" />
	<method signature="void backupLogDirToAWS(com.sonicbase.common.AWSClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.File)" class="com.sonicbase.server.LogManager" />
	<method signature="void restoreAWS(java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.LogManager" />
	<method signature="boolean access$100(com.sonicbase.server.LogManager)" class="com.sonicbase.server.LogManager" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.LogManager" />
	<method signature="void applyLogsAfterSlice(java.lang.String)" class="com.sonicbase.server.LogManager" />
	<method signature="java.lang.String sliceLogs(boolean)" class="com.sonicbase.server.LogManager" />
	<method signature="com.sonicbase.server.DatabaseServer$LogRequest dont_use_logRequests(java.util.List,boolean)" class="com.sonicbase.server.LogManager" />
	<method signature="void replayQueues(java.io.File,java.lang.String,boolean,boolean)" class="com.sonicbase.server.LogManager" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.LogManager" />
	<method signature="void applyQueues()" class="com.sonicbase.server.LogManager" />
	<method signature="com.sonicbase.server.DatabaseServer access$700(com.sonicbase.server.LogManager)" class="com.sonicbase.server.LogManager" />
	<method signature="void restoreFileSystem(java.lang.String,java.lang.String)" class="com.sonicbase.server.LogManager" />
	<method signature="java.lang.String access$600(com.sonicbase.server.LogManager)" class="com.sonicbase.server.LogManager" />
	<method signature="java.lang.String access$402(com.sonicbase.server.LogManager,java.lang.String)" class="com.sonicbase.server.LogManager" />
	<method signature="long getNextSequencenNum()" class="com.sonicbase.server.LogManager" />
	<method signature="void enableLogProcessor(boolean)" class="com.sonicbase.server.LogManager" />
	<method signature="void restoreLogDir(java.io.File,java.io.File)" class="com.sonicbase.server.LogManager" />
	<method signature="java.lang.String access$502(com.sonicbase.server.LogManager,java.lang.String)" class="com.sonicbase.server.LogManager" />
	<method signature="java.lang.String access$400(com.sonicbase.server.LogManager)" class="com.sonicbase.server.LogManager" />
	<method signature="void backupFileSystem(java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.LogManager" />
	<method signature="com.sonicbase.common.Logger access$300(com.sonicbase.server.LogManager)" class="com.sonicbase.server.LogManager" />
	<method signature="void logRequestForPeer(java.lang.String,byte[],long,long,int)" class="com.sonicbase.server.LogManager" />
	<method signature="void deletePeerLogs(int)" class="com.sonicbase.server.LogManager" />
	<method signature="void bindQueues()" class="com.sonicbase.server.LogManager" />
	<method signature="java.io.File getLogReplicaDir()" class="com.sonicbase.server.LogManager" />
	<method signature="java.util.concurrent.atomic.AtomicLong access$200(com.sonicbase.server.LogManager)" class="com.sonicbase.server.LogManager" />
	<method signature="void replayLogs()" class="com.sonicbase.server.LogManager" />
	<method signature="void backupAWS(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.LogManager" />
	<method signature="com.sonicbase.common.ComObject getLogFile(com.sonicbase.common.ComObject)" class="com.sonicbase.server.LogManager" />
	<method signature="void skipToMaxSequenceNumber()" class="com.sonicbase.server.LogManager" />
	<method signature="void deleteLogs()" class="com.sonicbase.server.LogManager" />
	<method signature="com.sonicbase.common.ComObject deletePeerLogs(com.sonicbase.common.ComObject)" class="com.sonicbase.server.LogManager" />
	<method signature="void pushMaxSequenceNum()" class="com.sonicbase.server.LogManager" />
	<method signature="void receiveExternalLog(int,java.lang.String,byte[])" class="com.sonicbase.server.LogManager" />
	<method signature="void unbindQueues()" class="com.sonicbase.server.LogManager" />
	<method signature="void getLogsFromPeer(int)" class="com.sonicbase.server.LogManager" />
	<method signature="void backupLogDir(java.lang.String,java.io.File,java.io.File)" class="com.sonicbase.server.LogManager" />
	<method signature="boolean hasLogsForPeer(int)" class="com.sonicbase.server.LogManager" />
	<method signature="com.sonicbase.server.DatabaseServer$LogRequest logRequest(java.lang.String,byte[],boolean,java.lang.String,java.lang.Long,java.lang.Long)" class="com.sonicbase.server.LogManager" />
	<method signature="long getCountLogged()" class="com.sonicbase.server.LogManager" />
	<method signature="java.lang.String getLogRoot()" class="com.sonicbase.server.LogManager" />
	<method signature="void deleteOldLogs(long)" class="com.sonicbase.server.LogManager" />
	<method signature="boolean access$102(com.sonicbase.server.LogManager,boolean)" class="com.sonicbase.server.LogManager" />
	<method signature="com.sonicbase.common.ComObject setMaxSequenceNum(com.sonicbase.common.ComObject)" class="com.sonicbase.server.LogManager" />
	<method signature="com.sonicbase.common.ComObject sendLogsToPeer(int)" class="com.sonicbase.server.LogManager" />
	<method signature="void applyLogsFromPeers(java.lang.String)" class="com.sonicbase.server.LogManager" />
	<field name="server" class="com.sonicbase.server.LogManager" />
	<field name="databaseServer" class="com.sonicbase.server.LogManager" />
	<field name="SEQUENCE_NUM_ALLOC_COUNT" class="com.sonicbase.server.LogManager" />
	<field name="maxAllocatedLogSequenceNumber" class="com.sonicbase.server.LogManager" />
	<field name="UTF8_STR" class="com.sonicbase.server.LogManager" />
	<field name="logger" class="com.sonicbase.server.LogManager" />
	<field name="logProcessors" class="com.sonicbase.server.LogManager" />
	<field name="sliceFilename" class="com.sonicbase.server.LogManager" />
	<field name="currFilename" class="com.sonicbase.server.LogManager" />
	<field name="logRequests" class="com.sonicbase.server.LogManager" />
	<field name="logSequenceNumber" class="com.sonicbase.server.LogManager" />
	<field name="shouldSlice" class="com.sonicbase.server.LogManager" />
	<field name="countLogged" class="com.sonicbase.server.LogManager" />
	<field name="unbindQueues" class="com.sonicbase.server.LogManager" />
	<field name="logLock" class="com.sonicbase.server.LogManager" />
	<field name="executor" class="com.sonicbase.server.LogManager" />
	<field name="allCurrentSources" class="com.sonicbase.server.LogManager" />
	<field name="peerLogProcessors" class="com.sonicbase.server.LogManager" />
	<field name="peerLogRequests" class="com.sonicbase.server.LogManager" />
	<field name="didSlice" class="com.sonicbase.server.LogManager" />
	<class name="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="byte[] getBytes(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.SQLXML getSQLXML(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Date getDate(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Ref getRef(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="int getFetchDirection()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Date getDate(int,java.util.Calendar)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateInt(java.lang.String,int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Blob getBlob(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateObject(java.lang.String,java.lang.Object,int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean isBeforeFirst()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBigDecimal(int,java.math.BigDecimal)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.lang.String getString(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBinaryStream(int,java.io.InputStream)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.lang.Object getObject(java.lang.String,java.util.Map)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBoolean(java.lang.String,boolean)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateClob(java.lang.String,java.io.Reader)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Timestamp getTimestamp(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="int getInt(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateByte(int,byte)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBlob(java.lang.String,java.io.InputStream,long)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean getBoolean(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateClob(java.lang.String,java.io.Reader,long)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Time getTime(java.lang.String,java.util.Calendar)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateRowId(java.lang.String,java.sql.RowId)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="int getConcurrency()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateRow()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateRef(java.lang.String,java.sql.Ref)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="int getHoldability()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateNull(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateAsciiStream(java.lang.String,java.io.InputStream)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.math.BigDecimal getBigDecimal(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Timestamp getTimestamp(int,java.util.Calendar)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateString(int,java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBinaryStream(int,java.io.InputStream,long)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void moveToInsertRow()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.math.BigDecimal getBigDecimal(java.lang.String,int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateClob(int,java.io.Reader)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateString(java.lang.String,java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Time getTime(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.ConnectionProxy,com.sonicbase.query.impl.ResultSetImpl)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="long getLong(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateObject(int,java.lang.Object,int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBinaryStream(int,java.io.InputStream,int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="short getShort(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.io.Reader getCharacterStream(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateFloat(java.lang.String,float)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.lang.Object getObject(int,java.util.Map)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.lang.String getCursorName()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateTimestamp(int,java.sql.Timestamp)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.math.BigDecimal getBigDecimal(int,int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.io.InputStream getUnicodeStream(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBinaryStream(java.lang.String,java.io.InputStream,long)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateNClob(java.lang.String,java.io.Reader,long)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateRowId(int,java.sql.RowId)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Clob getClob(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void setFetchDirection(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void beforeFirst()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateObject(java.lang.String,java.lang.Object)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="int getRow()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateNClob(java.lang.String,java.io.Reader)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBytes(int,byte[])" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateNCharacterStream(int,java.io.Reader)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateSQLXML(int,java.sql.SQLXML)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="int getInt(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateClob(int,java.sql.Clob)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.lang.Object unwrap(java.lang.Class)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean wasNull()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean isFirst()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBlob(int,java.io.InputStream)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateNull(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateLong(int,long)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateCharacterStream(int,java.io.Reader,long)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateTime(int,java.sql.Time)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.io.InputStream getUnicodeStream(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean first()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.io.InputStream getAsciiStream(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean rowDeleted()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.lang.String getNString(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void insertRow()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateCharacterStream(int,java.io.Reader,int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="long getLong(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBlob(int,java.io.InputStream,long)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateNCharacterStream(java.lang.String,java.io.Reader)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateNClob(int,java.io.Reader)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Array getArray(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBinaryStream(java.lang.String,java.io.InputStream,int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBlob(int,java.sql.Blob)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateNCharacterStream(java.lang.String,java.io.Reader,long)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.io.InputStream getAsciiStream(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.io.Reader getNCharacterStream(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateShort(java.lang.String,short)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Date getDate(java.lang.String,java.util.Calendar)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBytes(java.lang.String,byte[])" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean isLast()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="short getShort(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateObject(int,java.lang.Object)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.lang.Object getObject(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.io.InputStream getBinaryStream(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="byte getByte(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean rowInserted()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateAsciiStream(int,java.io.InputStream,int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void deleteRow()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.NClob getNClob(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean last()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateDate(java.lang.String,java.sql.Date)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Blob getBlob(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBinaryStream(java.lang.String,java.io.InputStream)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void cancelRowUpdates()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateClob(java.lang.String,java.sql.Clob)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.lang.Object getObject(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.net.URL getURL(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateAsciiStream(int,java.io.InputStream,long)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Statement getStatement()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean relative(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateDouble(int,double)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateDouble(java.lang.String,double)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateShort(int,short)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Date getDate(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.io.InputStream getBinaryStream(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="int getFetchSize()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.lang.String getString(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateLong(java.lang.String,long)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.SQLWarning getWarnings()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.lang.Object getObject(java.lang.String,java.lang.Class)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean getBoolean(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Ref getRef(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateArray(int,java.sql.Array)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.io.Reader getNCharacterStream(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="float getFloat(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="double getDouble(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="int findColumn(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean previous()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateTimestamp(java.lang.String,java.sql.Timestamp)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.RowId getRowId(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean absolute(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateRef(int,java.sql.Ref)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Timestamp getTimestamp(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Array getArray(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateNString(int,java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateClob(int,java.io.Reader,long)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Time getTime(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean rowUpdated()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void setFetchSize(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Time getTime(int,java.util.Calendar)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateAsciiStream(int,java.io.InputStream)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean next()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateNString(java.lang.String,java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.net.URL getURL(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.NClob getNClob(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="int getType()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateNClob(java.lang.String,java.sql.NClob)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateDate(int,java.sql.Date)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateAsciiStream(java.lang.String,java.io.InputStream,int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBlob(java.lang.String,java.io.InputStream)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="byte[] getBytes(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void afterLast()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void refreshRow()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateCharacterStream(int,java.io.Reader)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.lang.Object getObject(int,java.lang.Class)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.math.BigDecimal getBigDecimal(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="byte getByte(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBlob(java.lang.String,java.sql.Blob)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.ResultSetMetaData getMetaData()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean isWrapperFor(java.lang.Class)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Clob getClob(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.SQLXML getSQLXML(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateSQLXML(java.lang.String,java.sql.SQLXML)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBoolean(int,boolean)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateNCharacterStream(int,java.io.Reader,long)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateByte(java.lang.String,byte)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean isClosed()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateBigDecimal(java.lang.String,java.math.BigDecimal)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="float getFloat(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="boolean isAfterLast()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="double getDouble(int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateNClob(int,java.io.Reader,long)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void clearWarnings()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.sql.RowId getRowId(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateInt(int,int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateCharacterStream(java.lang.String,java.io.Reader,int)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateTime(java.lang.String,java.sql.Time)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.io.Reader getCharacterStream(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void moveToCurrentRow()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateAsciiStream(java.lang.String,java.io.InputStream,long)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void close()" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="java.lang.String getNString(java.lang.String)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateCharacterStream(java.lang.String,java.io.Reader)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateArray(java.lang.String,java.sql.Array)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateCharacterStream(java.lang.String,java.io.Reader,long)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateNClob(int,java.sql.NClob)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<method signature="void updateFloat(int,float)" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<field name="currResultSetOffset" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<field name="currRow" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<field name="lookupTypeByName" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<field name="loadedBlobs" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<field name="wasNull" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<field name="resultSets" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<field name="LOGGER" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<field name="resultSet" class="com.sonicbase.jdbcdriver.ResultSetProxy" />
	<class name="com.sonicbase.server.DatabaseServer$StatsMonitor" />
	<method signature="void run()" class="com.sonicbase.server.DatabaseServer$StatsMonitor" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer,com.sonicbase.server.DatabaseServer$1)" class="com.sonicbase.server.DatabaseServer$StatsMonitor" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.DatabaseServer$StatsMonitor" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer$StatsMonitor" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$StatsMonitor" />
	<class name="com.sonicbase.index.Index$MyEntry" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.index.Index$MyEntry" />
	<method signature="void &lt;init&gt;(java.lang.Object,java.lang.Object)" class="com.sonicbase.index.Index$MyEntry" />
	<method signature="java.lang.Object getKey()" class="com.sonicbase.index.Index$MyEntry" />
	<method signature="java.lang.Object getValue()" class="com.sonicbase.index.Index$MyEntry" />
	<method signature="java.lang.Object setValue(java.lang.Object)" class="com.sonicbase.index.Index$MyEntry" />
	<field name="value" class="com.sonicbase.index.Index$MyEntry" />
	<field name="key" class="com.sonicbase.index.Index$MyEntry" />
	<class name="com.sonicbase.common.ComObject$Tag" />
	<method signature="com.sonicbase.common.ComObject$Tag[] values()" class="com.sonicbase.common.ComObject$Tag" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.ComObject$Tag" />
	<method signature="com.sonicbase.common.ComObject$Tag valueOf(java.lang.String)" class="com.sonicbase.common.ComObject$Tag" />
	<method signature="void &lt;init&gt;(java.lang.String,int,int,com.sonicbase.common.ComObject$Type)" class="com.sonicbase.common.ComObject$Tag" />
	<field name="exception" class="com.sonicbase.common.ComObject$Tag" />
	<field name="countColumn" class="com.sonicbase.common.ComObject$Tag" />
	<field name="keyBytes" class="com.sonicbase.common.ComObject$Tag" />
	<field name="prefix" class="com.sonicbase.common.ComObject$Tag" />
	<field name="dbName" class="com.sonicbase.common.ComObject$Tag" />
	<field name="serversConfig" class="com.sonicbase.common.ComObject$Tag" />
	<field name="type" class="com.sonicbase.common.ComObject$Tag" />
	<field name="sequence1" class="com.sonicbase.common.ComObject$Tag" />
	<field name="tableName" class="com.sonicbase.common.ComObject$Tag" />
	<field name="countTableName" class="com.sonicbase.common.ComObject$Tag" />
	<field name="viewVersion" class="com.sonicbase.common.ComObject$Tag" />
	<field name="sequence0" class="com.sonicbase.common.ComObject$Tag" />
	<field name="tables" class="com.sonicbase.common.ComObject$Tag" />
	<field name="nextId" class="com.sonicbase.common.ComObject$Tag" />
	<field name="filenames" class="com.sonicbase.common.ComObject$Tag" />
	<field name="id" class="com.sonicbase.common.ComObject$Tag" />
	<field name="preparedId" class="com.sonicbase.common.ComObject$Tag" />
	<field name="phase" class="com.sonicbase.common.ComObject$Tag" />
	<field name="sequenceNumber" class="com.sonicbase.common.ComObject$Tag" />
	<field name="method" class="com.sonicbase.common.ComObject$Tag" />
	<field name="counters" class="com.sonicbase.common.ComObject$Tag" />
	<field name="evaluateExpression" class="com.sonicbase.common.ComObject$Tag" />
	<field name="forceSelectOnServer" class="com.sonicbase.common.ComObject$Tag" />
	<field name="originalLeftKey" class="com.sonicbase.common.ComObject$Tag" />
	<field name="originalRightKey" class="com.sonicbase.common.ComObject$Tag" />
	<field name="tableRecords" class="com.sonicbase.common.ComObject$Tag" />
	<field name="transactionId" class="com.sonicbase.common.ComObject$Tag" />
	<field name="bucket" class="com.sonicbase.common.ComObject$Tag" />
	<field name="filename" class="com.sonicbase.common.ComObject$Tag" />
	<field name="size" class="com.sonicbase.common.ComObject$Tag" />
	<field name="force" class="com.sonicbase.common.ComObject$Tag" />
	<field name="configBytes" class="com.sonicbase.common.ComObject$Tag" />
	<field name="status" class="com.sonicbase.common.ComObject$Tag" />
	<field name="shared" class="com.sonicbase.common.ComObject$Tag" />
	<field name="isCommitting" class="com.sonicbase.common.ComObject$Tag" />
	<field name="insertObject" class="com.sonicbase.common.ComObject$Tag" />
	<field name="createTableStatement" class="com.sonicbase.common.ComObject$Tag" />
	<field name="resGig" class="com.sonicbase.common.ComObject$Tag" />
	<field name="haveProLicense" class="com.sonicbase.common.ComObject$Tag" />
	<field name="singleValue" class="com.sonicbase.common.ComObject$Tag" />
	<field name="resultSetId" class="com.sonicbase.common.ComObject$Tag" />
	<field name="slave" class="com.sonicbase.common.ComObject$Tag" />
	<field name="retKeys" class="com.sonicbase.common.ComObject$Tag" />
	<field name="isExcpliciteTrans" class="com.sonicbase.common.ComObject$Tag" />
	<field name="binaryFileContent" class="com.sonicbase.common.ComObject$Tag" />
	<field name="indexId" class="com.sonicbase.common.ComObject$Tag" />
	<field name="shard" class="com.sonicbase.common.ComObject$Tag" />
	<field name="legacyGroupContext" class="com.sonicbase.common.ComObject$Tag" />
	<field name="parms" class="com.sonicbase.common.ComObject$Tag" />
	<field name="schemaBytes" class="com.sonicbase.common.ComObject$Tag" />
	<field name="primaryKeyIndexName" class="com.sonicbase.common.ComObject$Tag" />
	<field name="recordBytes" class="com.sonicbase.common.ComObject$Tag" />
	<field name="legacySelectStatement" class="com.sonicbase.common.ComObject$Tag" />
	<field name="indices" class="com.sonicbase.common.ComObject$Tag" />
	<field name="stage" class="com.sonicbase.common.ComObject$Tag" />
	<field name="javaMemMin" class="com.sonicbase.common.ComObject$Tag" />
	<field name="columnName" class="com.sonicbase.common.ComObject$Tag" />
	<field name="isComplete" class="com.sonicbase.common.ComObject$Tag" />
	<field name="orderByExpressions" class="com.sonicbase.common.ComObject$Tag" />
	<field name="replica" class="com.sonicbase.common.ComObject$Tag" />
	<field name="recordLength" class="com.sonicbase.common.ComObject$Tag" />
	<field name="isUnique" class="com.sonicbase.common.ComObject$Tag" />
	<field name="masterSlave" class="com.sonicbase.common.ComObject$Tag" />
	<field name="longKey" class="com.sonicbase.common.ComObject$Tag" />
	<field name="insertObjects" class="com.sonicbase.common.ComObject$Tag" />
	<field name="electedMaster" class="com.sonicbase.common.ComObject$Tag" />
	<field name="subDirectory" class="com.sonicbase.common.ComObject$Tag" />
	<field name="keyLength" class="com.sonicbase.common.ComObject$Tag" />
	<field name="primaryKeyBytes" class="com.sonicbase.common.ComObject$Tag" />
	<field name="javaMemMax" class="com.sonicbase.common.ComObject$Tag" />
	<field name="leftKey" class="com.sonicbase.common.ComObject$Tag" />
	<field name="host" class="com.sonicbase.common.ComObject$Tag" />
	<field name="columnOffsets" class="com.sonicbase.common.ComObject$Tag" />
	<field name="legacyCounter" class="com.sonicbase.common.ComObject$Tag" />
	<field name="avgTransRate" class="com.sonicbase.common.ComObject$Tag" />
	<field name="tag" class="com.sonicbase.common.ComObject$Tag" />
	<field name="maxBackupCount" class="com.sonicbase.common.ComObject$Tag" />
	<field name="$VALUES" class="com.sonicbase.common.ComObject$Tag" />
	<field name="keyCount" class="com.sonicbase.common.ComObject$Tag" />
	<field name="selectedMasteReplica" class="com.sonicbase.common.ComObject$Tag" />
	<field name="offset" class="com.sonicbase.common.ComObject$Tag" />
	<field name="countLong" class="com.sonicbase.common.ComObject$Tag" />
	<field name="indexName" class="com.sonicbase.common.ComObject$Tag" />
	<field name="dataType" class="com.sonicbase.common.ComObject$Tag" />
	<field name="count" class="com.sonicbase.common.ComObject$Tag" />
	<field name="cpu" class="com.sonicbase.common.ComObject$Tag" />
	<field name="finished" class="com.sonicbase.common.ComObject$Tag" />
	<field name="isClient" class="com.sonicbase.common.ComObject$Tag" />
	<field name="serializationVersion" class="com.sonicbase.common.ComObject$Tag" />
	<field name="maxId" class="com.sonicbase.common.ComObject$Tag" />
	<field name="port" class="com.sonicbase.common.ComObject$Tag" />
	<field name="diskAvail" class="com.sonicbase.common.ComObject$Tag" />
	<field name="files" class="com.sonicbase.common.ComObject$Tag" />
	<field name="leftOperator" class="com.sonicbase.common.ComObject$Tag" />
	<field name="fileContent" class="com.sonicbase.common.ComObject$Tag" />
	<field name="records" class="com.sonicbase.common.ComObject$Tag" />
	<field name="rightKey" class="com.sonicbase.common.ComObject$Tag" />
	<field name="keys" class="com.sonicbase.common.ComObject$Tag" />
	<field name="requestedMasterShard" class="com.sonicbase.common.ComObject$Tag" />
	<field name="dbNames" class="com.sonicbase.common.ComObject$Tag" />
	<field name="error" class="com.sonicbase.common.ComObject$Tag" />
	<field name="directory" class="com.sonicbase.common.ComObject$Tag" />
	<field name="fieldsStr" class="com.sonicbase.common.ComObject$Tag" />
	<field name="legacyExpression" class="com.sonicbase.common.ComObject$Tag" />
	<field name="highestId" class="com.sonicbase.common.ComObject$Tag" />
	<field name="schemaVersion" class="com.sonicbase.common.ComObject$Tag" />
	<field name="percentComplete" class="com.sonicbase.common.ComObject$Tag" />
	<field name="message" class="com.sonicbase.common.ComObject$Tag" />
	<field name="command" class="com.sonicbase.common.ComObject$Tag" />
	<field name="isPrepared" class="com.sonicbase.common.ComObject$Tag" />
	<field name="avgRecRate" class="com.sonicbase.common.ComObject$Tag" />
	<field name="offsets" class="com.sonicbase.common.ComObject$Tag" />
	<field name="bytes" class="com.sonicbase.common.ComObject$Tag" />
	<field name="rightOperator" class="com.sonicbase.common.ComObject$Tag" />
	<field name="tableId" class="com.sonicbase.common.ComObject$Tag" />
	<field name="requestedMasterReplica" class="com.sonicbase.common.ComObject$Tag" />
	<class name="com.sonicbase.jdbcdriver.Parameter$Float" />
	<method signature="void &lt;init&gt;(float)" class="com.sonicbase.jdbcdriver.Parameter$Float" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$Float" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$Float" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$Float" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$Float" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$Float" />
	<class name="com.sonicbase.schema.DataType$TimestampConverter" />
	<method signature="java.lang.Object convert(java.lang.Object)" class="com.sonicbase.schema.DataType$TimestampConverter" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.DataType$TimestampConverter" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$TimestampConverter" />
	<method signature="void &lt;init&gt;(com.sonicbase.schema.DataType$1)" class="com.sonicbase.schema.DataType$TimestampConverter" />
	<class name="com.sonicbase.server.LongRunningCommands" />
	<method signature="java.io.File getReplicaRoot()" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="int getHighestSafeSnapshotVersion(java.io.File)" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="void getFiles(java.util.List)" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="void restoreAWS(java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="void backupFileSystem(java.lang.String,java.lang.String)" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="void restoreFileSystem(java.lang.String,java.lang.String)" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="void load()" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="int getCommandCount()" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="com.sonicbase.server.DatabaseServer access$100(com.sonicbase.server.LongRunningCommands)" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="void save()" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="void deleteOldFiles()" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="void backupAWS(java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="void execute()" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="void addCommand(com.sonicbase.server.LongRunningCommands$SingleCommand)" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="com.sonicbase.server.LongRunningCommands$SingleCommand createSingleCommand(java.lang.String,byte[])" class="com.sonicbase.server.LongRunningCommands" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.server.LongRunningCommands" />
	<field name="server" class="com.sonicbase.server.LongRunningCommands" />
	<field name="lookupTypeById" class="com.sonicbase.server.LongRunningCommands" />
	<field name="logger" class="com.sonicbase.server.LongRunningCommands" />
	<field name="commands" class="com.sonicbase.server.LongRunningCommands" />
	<class name="com.sonicbase.schema.TableSchema$Partition" />
	<method signature="boolean isUnboundUpper()" class="com.sonicbase.schema.TableSchema$Partition" />
	<method signature="void serialize(com.sonicbase.schema.TableSchema,java.lang.String,java.io.DataOutputStream)" class="com.sonicbase.schema.TableSchema$Partition" />
	<method signature="int access$002(com.sonicbase.schema.TableSchema$Partition,int)" class="com.sonicbase.schema.TableSchema$Partition" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.TableSchema$Partition" />
	<method signature="void setShardOwning(int)" class="com.sonicbase.schema.TableSchema$Partition" />
	<method signature="int access$000(com.sonicbase.schema.TableSchema$Partition)" class="com.sonicbase.schema.TableSchema$Partition" />
	<method signature="int getShardOwning()" class="com.sonicbase.schema.TableSchema$Partition" />
	<method signature="java.lang.Object[] access$202(com.sonicbase.schema.TableSchema$Partition,java.lang.Object[])" class="com.sonicbase.schema.TableSchema$Partition" />
	<method signature="void setUpperKey(java.lang.Object[])" class="com.sonicbase.schema.TableSchema$Partition" />
	<method signature="boolean access$100(com.sonicbase.schema.TableSchema$Partition)" class="com.sonicbase.schema.TableSchema$Partition" />
	<method signature="void setUnboundUpper(boolean)" class="com.sonicbase.schema.TableSchema$Partition" />
	<method signature="java.lang.Object[] access$200(com.sonicbase.schema.TableSchema$Partition)" class="com.sonicbase.schema.TableSchema$Partition" />
	<method signature="void &lt;init&gt;(int)" class="com.sonicbase.schema.TableSchema$Partition" />
	<method signature="java.lang.Object[] getUpperKey()" class="com.sonicbase.schema.TableSchema$Partition" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.TableSchema$Partition" />
	<method signature="void deserialize(com.sonicbase.schema.TableSchema,java.io.DataInputStream)" class="com.sonicbase.schema.TableSchema$Partition" />
	<field name="unboundUpper" class="com.sonicbase.schema.TableSchema$Partition" />
	<field name="upperKey" class="com.sonicbase.schema.TableSchema$Partition" />
	<field name="shardOwning" class="com.sonicbase.schema.TableSchema$Partition" />
	<class name="com.sonicbase.server.DatabaseServer$Host" />
	<method signature="void serialize(java.io.DataOutputStream,long)" class="com.sonicbase.server.DatabaseServer$Host" />
	<method signature="boolean access$1002(com.sonicbase.server.DatabaseServer$Host,boolean)" class="com.sonicbase.server.DatabaseServer$Host" />
	<method signature="void &lt;init&gt;(java.io.DataInputStream,long)" class="com.sonicbase.server.DatabaseServer$Host" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.DatabaseServer$Host" />
	<method signature="int getPort()" class="com.sonicbase.server.DatabaseServer$Host" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,int)" class="com.sonicbase.server.DatabaseServer$Host" />
	<method signature="boolean isDead()" class="com.sonicbase.server.DatabaseServer$Host" />
	<method signature="int access$3800(com.sonicbase.server.DatabaseServer$Host)" class="com.sonicbase.server.DatabaseServer$Host" />
	<method signature="java.lang.String getPublicAddress()" class="com.sonicbase.server.DatabaseServer$Host" />
	<method signature="boolean access$1000(com.sonicbase.server.DatabaseServer$Host)" class="com.sonicbase.server.DatabaseServer$Host" />
	<method signature="java.lang.String getPrivateAddress()" class="com.sonicbase.server.DatabaseServer$Host" />
	<method signature="void setDead(boolean)" class="com.sonicbase.server.DatabaseServer$Host" />
	<method signature="java.lang.String access$3700(com.sonicbase.server.DatabaseServer$Host)" class="com.sonicbase.server.DatabaseServer$Host" />
	<field name="privateAddress" class="com.sonicbase.server.DatabaseServer$Host" />
	<field name="port" class="com.sonicbase.server.DatabaseServer$Host" />
	<field name="publicAddress" class="com.sonicbase.server.DatabaseServer$Host" />
	<field name="dead" class="com.sonicbase.server.DatabaseServer$Host" />
	<class name="com.sonicbase.query.impl.SelectStatementImpl$Function" />
	<method signature="java.lang.String getName()" class="com.sonicbase.query.impl.SelectStatementImpl$Function" />
	<method signature="net.sf.jsqlparser.expression.operators.relational.ExpressionList getParms()" class="com.sonicbase.query.impl.SelectStatementImpl$Function" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.SelectStatementImpl$Function" />
	<method signature="void &lt;init&gt;(java.lang.String,net.sf.jsqlparser.expression.operators.relational.ExpressionList)" class="com.sonicbase.query.impl.SelectStatementImpl$Function" />
	<field name="name" class="com.sonicbase.query.impl.SelectStatementImpl$Function" />
	<field name="parms" class="com.sonicbase.query.impl.SelectStatementImpl$Function" />
	<class name="com.sonicbase.query.impl.DiskBasedResultSet$MergeRow" />
	<method signature="com.sonicbase.common.Record[] access$002(com.sonicbase.query.impl.DiskBasedResultSet$MergeRow,com.sonicbase.common.Record[])" class="com.sonicbase.query.impl.DiskBasedResultSet$MergeRow" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.DiskBasedResultSet$MergeRow" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.DiskBasedResultSet$MergeRow" />
	<method signature="com.sonicbase.common.Record[] access$000(com.sonicbase.query.impl.DiskBasedResultSet$MergeRow)" class="com.sonicbase.query.impl.DiskBasedResultSet$MergeRow" />
	<method signature="int access$100(com.sonicbase.query.impl.DiskBasedResultSet$MergeRow)" class="com.sonicbase.query.impl.DiskBasedResultSet$MergeRow" />
	<method signature="int access$102(com.sonicbase.query.impl.DiskBasedResultSet$MergeRow,int)" class="com.sonicbase.query.impl.DiskBasedResultSet$MergeRow" />
	<field name="streamOffset" class="com.sonicbase.query.impl.DiskBasedResultSet$MergeRow" />
	<field name="row" class="com.sonicbase.query.impl.DiskBasedResultSet$MergeRow" />
	<class name="com.sonicbase.server.DatabaseServer$BackupJob" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.DatabaseServer$BackupJob" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.server.DatabaseServer$BackupJob" />
	<method signature="void execute(org.quartz.JobExecutionContext)" class="com.sonicbase.server.DatabaseServer$BackupJob" />
	<class name="com.sonicbase.index.Repartitioner$MoveProcessor$1$1" />
	<method signature="void run()" class="com.sonicbase.index.Repartitioner$MoveProcessor$1$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Repartitioner$MoveProcessor$1,java.util.List)" class="com.sonicbase.index.Repartitioner$MoveProcessor$1$1" />
	<field name="val$list" class="com.sonicbase.index.Repartitioner$MoveProcessor$1$1" />
	<field name="this$2" class="com.sonicbase.index.Repartitioner$MoveProcessor$1$1" />
	<class name="com.sonicbase.query.impl.DiskBasedResultSet" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<method signature="void getKeepers(java.lang.String,com.sonicbase.server.DatabaseServer,java.lang.String[],java.util.Map,boolean[][],java.lang.String,java.lang.String)" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer,long)" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer,com.sonicbase.query.impl.SelectStatementImpl,java.lang.String[],long)" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<method signature="byte[][][] nextPage(int,int)" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<method signature="void writeRecordsToFile(java.io.File,com.sonicbase.query.impl.ExpressionImpl$CachedRecord[][],int)" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<method signature="void updateAccessTime(java.io.File)" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<method signature="void mergeSort(java.lang.String,java.io.File)" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<method signature="com.sonicbase.common.Record[] readRow(java.lang.String,java.io.DataInputStream,com.sonicbase.util.DataUtil$ResultLength)" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<method signature="java.io.DataOutputStream writeRow(com.sonicbase.common.Record[],java.io.DataOutputStream,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicInteger,java.io.File,com.sonicbase.util.DataUtil$ResultLength)" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<method signature="void delete()" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<method signature="void mergeNFiles(java.lang.String,java.io.File,java.io.File[])" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<method signature="void &lt;init&gt;(java.lang.String,com.sonicbase.server.DatabaseServer,java.lang.String[],com.sonicbase.query.impl.ResultSetImpl,int,com.sonicbase.query.impl.SelectStatementImpl)" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<method signature="void mergeTwoFiles(java.lang.String,java.io.File,java.io.File,java.io.File,boolean)" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<method signature="long getResultSetId()" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<method signature="void deleteOldResultSets(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<field name="server" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<field name="tableNames" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<field name="select" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<field name="nextResultSetId" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<field name="logger" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<field name="count" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<field name="resultSetId" class="com.sonicbase.query.impl.DiskBasedResultSet" />
	<class name="com.sonicbase.schema.DataType$Type" />
	<method signature="void &lt;init&gt;(java.lang.String,int,int,java.util.Comparator,com.sonicbase.schema.DataType$Converter,java.lang.Object,com.sonicbase.schema.DataType$Incrementer)" class="com.sonicbase.schema.DataType$Type" />
	<method signature="com.sonicbase.schema.DataType$Type valueOf(int)" class="com.sonicbase.schema.DataType$Type" />
	<method signature="java.util.Comparator getComparatorForValue(java.lang.Object)" class="com.sonicbase.schema.DataType$Type" />
	<method signature="int getValue()" class="com.sonicbase.schema.DataType$Type" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.DataType$Type" />
	<method signature="com.sonicbase.schema.DataType$Type valueOf(java.lang.String)" class="com.sonicbase.schema.DataType$Type" />
	<method signature="com.sonicbase.schema.DataType$Type[] values()" class="com.sonicbase.schema.DataType$Type" />
	<method signature="com.sonicbase.schema.DataType$Incrementer getIncrementer()" class="com.sonicbase.schema.DataType$Type" />
	<method signature="java.lang.Object getInitialValue()" class="com.sonicbase.schema.DataType$Type" />
	<method signature="com.sonicbase.schema.DataType$Converter getConverter()" class="com.sonicbase.schema.DataType$Type" />
	<method signature="java.util.Comparator getComparator()" class="com.sonicbase.schema.DataType$Type" />
	<field name="FLOAT" class="com.sonicbase.schema.DataType$Type" />
	<field name="BLOB" class="com.sonicbase.schema.DataType$Type" />
	<field name="ARRAY" class="com.sonicbase.schema.DataType$Type" />
	<field name="converter" class="com.sonicbase.schema.DataType$Type" />
	<field name="BINARY" class="com.sonicbase.schema.DataType$Type" />
	<field name="DECIMAL" class="com.sonicbase.schema.DataType$Type" />
	<field name="CHAR" class="com.sonicbase.schema.DataType$Type" />
	<field name="NCHAR" class="com.sonicbase.schema.DataType$Type" />
	<field name="NVARCHAR" class="com.sonicbase.schema.DataType$Type" />
	<field name="JAVA_OBJECT" class="com.sonicbase.schema.DataType$Type" />
	<field name="TIMESTAMP" class="com.sonicbase.schema.DataType$Type" />
	<field name="DOUBLE" class="com.sonicbase.schema.DataType$Type" />
	<field name="value" class="com.sonicbase.schema.DataType$Type" />
	<field name="initialValue" class="com.sonicbase.schema.DataType$Type" />
	<field name="TINYINT" class="com.sonicbase.schema.DataType$Type" />
	<field name="$VALUES" class="com.sonicbase.schema.DataType$Type" />
	<field name="INTEGER" class="com.sonicbase.schema.DataType$Type" />
	<field name="PARAMETER" class="com.sonicbase.schema.DataType$Type" />
	<field name="NCLOB" class="com.sonicbase.schema.DataType$Type" />
	<field name="NUMERIC" class="com.sonicbase.schema.DataType$Type" />
	<field name="LONGVARCHAR" class="com.sonicbase.schema.DataType$Type" />
	<field name="NULL" class="com.sonicbase.schema.DataType$Type" />
	<field name="CLOB" class="com.sonicbase.schema.DataType$Type" />
	<field name="LONGNVARCHAR" class="com.sonicbase.schema.DataType$Type" />
	<field name="DISTINCT" class="com.sonicbase.schema.DataType$Type" />
	<field name="BIGINT" class="com.sonicbase.schema.DataType$Type" />
	<field name="TIME" class="com.sonicbase.schema.DataType$Type" />
	<field name="BIT" class="com.sonicbase.schema.DataType$Type" />
	<field name="incrementer" class="com.sonicbase.schema.DataType$Type" />
	<field name="BOOLEAN" class="com.sonicbase.schema.DataType$Type" />
	<field name="OTHER" class="com.sonicbase.schema.DataType$Type" />
	<field name="DATE" class="com.sonicbase.schema.DataType$Type" />
	<field name="comparator" class="com.sonicbase.schema.DataType$Type" />
	<field name="REF" class="com.sonicbase.schema.DataType$Type" />
	<field name="SQLXML" class="com.sonicbase.schema.DataType$Type" />
	<field name="SMALLINT" class="com.sonicbase.schema.DataType$Type" />
	<field name="DATALINK" class="com.sonicbase.schema.DataType$Type" />
	<field name="REAL" class="com.sonicbase.schema.DataType$Type" />
	<field name="VARCHAR" class="com.sonicbase.schema.DataType$Type" />
	<field name="VARBINARY" class="com.sonicbase.schema.DataType$Type" />
	<field name="LONGVARBINARY" class="com.sonicbase.schema.DataType$Type" />
	<field name="STRUCT" class="com.sonicbase.schema.DataType$Type" />
	<field name="ROWID" class="com.sonicbase.schema.DataType$Type" />
	<class name="com.sonicbase.socket.DatabaseSocketClient$NioClient$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.socket.DatabaseSocketClient$NioClient)" class="com.sonicbase.socket.DatabaseSocketClient$NioClient$1" />
	<method signature="void initChannel(io.netty.channel.socket.SocketChannel)" class="com.sonicbase.socket.DatabaseSocketClient$NioClient$1" />
	<method signature="void initChannel(io.netty.channel.Channel)" class="com.sonicbase.socket.DatabaseSocketClient$NioClient$1" />
	<field name="this$0" class="com.sonicbase.socket.DatabaseSocketClient$NioClient$1" />
	<class name="com.sonicbase.jdbcdriver.ResultSetProxy$ResultSetInfo" />
	<method signature="int access$400(com.sonicbase.jdbcdriver.ResultSetProxy$ResultSetInfo)" class="com.sonicbase.jdbcdriver.ResultSetProxy$ResultSetInfo" />
	<method signature="com.sonicbase.query.impl.ResultSetImpl access$200(com.sonicbase.jdbcdriver.ResultSetProxy$ResultSetInfo)" class="com.sonicbase.jdbcdriver.ResultSetProxy$ResultSetInfo" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.ResultSetProxy$ResultSetInfo" />
	<method signature="int access$300(com.sonicbase.jdbcdriver.ResultSetProxy$ResultSetInfo)" class="com.sonicbase.jdbcdriver.ResultSetProxy$ResultSetInfo" />
	<method signature="void &lt;init&gt;(com.sonicbase.query.impl.ResultSetImpl)" class="com.sonicbase.jdbcdriver.ResultSetProxy$ResultSetInfo" />
	<method signature="int access$402(com.sonicbase.jdbcdriver.ResultSetProxy$ResultSetInfo,int)" class="com.sonicbase.jdbcdriver.ResultSetProxy$ResultSetInfo" />
	<method signature="int access$308(com.sonicbase.jdbcdriver.ResultSetProxy$ResultSetInfo)" class="com.sonicbase.jdbcdriver.ResultSetProxy$ResultSetInfo" />
	<field name="highestIndex" class="com.sonicbase.jdbcdriver.ResultSetProxy$ResultSetInfo" />
	<field name="currRow" class="com.sonicbase.jdbcdriver.ResultSetProxy$ResultSetInfo" />
	<field name="resultSet" class="com.sonicbase.jdbcdriver.ResultSetProxy$ResultSetInfo" />
	<class name="com.sonicbase.research.socket.NettyServer$Request" />
	<method signature="byte[] access$100(com.sonicbase.research.socket.NettyServer$Request)" class="com.sonicbase.research.socket.NettyServer$Request" />
	<method signature="java.lang.String getCommand()" class="com.sonicbase.research.socket.NettyServer$Request" />
	<method signature="long getSequence1()" class="com.sonicbase.research.socket.NettyServer$Request" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.research.socket.NettyServer$Request" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.research.socket.NettyServer$Request" />
	<method signature="long getSequence0()" class="com.sonicbase.research.socket.NettyServer$Request" />
	<method signature="byte[] getBody()" class="com.sonicbase.research.socket.NettyServer$Request" />
	<method signature="byte[] access$102(com.sonicbase.research.socket.NettyServer$Request,byte[])" class="com.sonicbase.research.socket.NettyServer$Request" />
	<method signature="void setCommand(java.lang.String)" class="com.sonicbase.research.socket.NettyServer$Request" />
	<method signature="void setBody(byte[])" class="com.sonicbase.research.socket.NettyServer$Request" />
	<method signature="java.lang.String access$002(com.sonicbase.research.socket.NettyServer$Request,java.lang.String)" class="com.sonicbase.research.socket.NettyServer$Request" />
	<method signature="java.lang.String access$000(com.sonicbase.research.socket.NettyServer$Request)" class="com.sonicbase.research.socket.NettyServer$Request" />
	<field name="sequence0" class="com.sonicbase.research.socket.NettyServer$Request" />
	<field name="response" class="com.sonicbase.research.socket.NettyServer$Request" />
	<field name="latch" class="com.sonicbase.research.socket.NettyServer$Request" />
	<field name="body" class="com.sonicbase.research.socket.NettyServer$Request" />
	<field name="command" class="com.sonicbase.research.socket.NettyServer$Request" />
	<field name="sequence1" class="com.sonicbase.research.socket.NettyServer$Request" />
	<class name="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="java.lang.String[] getTableNames()" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="void &lt;init&gt;(com.sonicbase.query.impl.ExpressionImpl$NextReturn,boolean,java.lang.String[],int,java.lang.Object[],com.sonicbase.query.impl.SelectStatementImpl,com.sonicbase.query.impl.ExpressionImpl$RecordCache)" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="void setNextShard(int)" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$RecordCache getRecordCache()" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="void setNextKey(java.lang.Object[])" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="void setOperator(com.sonicbase.query.BinaryExpression$Operator)" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="com.sonicbase.query.impl.SelectStatementImpl getSelectStatement()" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="java.lang.String getIndexName()" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="int getNextShard()" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,com.sonicbase.query.BinaryExpression$Operator,int,java.lang.Object[],java.lang.Object[][][],com.sonicbase.query.impl.ExpressionImpl$RecordCache)" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="com.sonicbase.query.BinaryExpression$Operator getOperator()" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="java.lang.Object[][][] getLastKeys()" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="java.lang.Object[][][] getCurrKeys()" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="java.lang.Boolean getSortWithIndex()" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="java.lang.Object[] getNextKey()" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="void setSortWithIndex(java.lang.Boolean)" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="void setRecordCache(com.sonicbase.query.impl.ExpressionImpl$RecordCache)" class="com.sonicbase.query.impl.SelectContextImpl" />
	<method signature="void setCurrKeys(java.lang.Object[][][])" class="com.sonicbase.query.impl.SelectContextImpl" />
	<field name="tableNames" class="com.sonicbase.query.impl.SelectContextImpl" />
	<field name="recordCache" class="com.sonicbase.query.impl.SelectContextImpl" />
	<field name="lastKeys" class="com.sonicbase.query.impl.SelectContextImpl" />
	<field name="nextShard" class="com.sonicbase.query.impl.SelectContextImpl" />
	<field name="indexName" class="com.sonicbase.query.impl.SelectContextImpl" />
	<field name="currKeys" class="com.sonicbase.query.impl.SelectContextImpl" />
	<field name="nextKey" class="com.sonicbase.query.impl.SelectContextImpl" />
	<field name="selectStatement" class="com.sonicbase.query.impl.SelectContextImpl" />
	<field name="operator" class="com.sonicbase.query.impl.SelectContextImpl" />
	<field name="sortWithIndex" class="com.sonicbase.query.impl.SelectContextImpl" />
	<class name="com.sonicbase.util.DateUtils" />
	<method signature="java.lang.String to8601String(java.util.Date)" class="com.sonicbase.util.DateUtils" />
	<method signature="java.lang.String fromCalendar(java.util.Calendar)" class="com.sonicbase.util.DateUtils" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.util.DateUtils" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.util.DateUtils" />
	<method signature="java.lang.String fromDate(java.util.Date)" class="com.sonicbase.util.DateUtils" />
	<method signature="java.util.Calendar from8601String(java.lang.String)" class="com.sonicbase.util.DateUtils" />
	<class name="com.sonicbase.query.BinaryExpression" />
	<method signature="com.sonicbase.query.Expression getLeftExpression()" class="com.sonicbase.query.BinaryExpression" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.BinaryExpression" />
	<method signature="void setLeftExpression(com.sonicbase.query.Expression)" class="com.sonicbase.query.BinaryExpression" />
	<method signature="void setRightExpression(com.sonicbase.query.Expression)" class="com.sonicbase.query.BinaryExpression" />
	<method signature="com.sonicbase.query.Expression getRightExpression()" class="com.sonicbase.query.BinaryExpression" />
	<field name="idToOperator" class="com.sonicbase.query.BinaryExpression" />
	<class name="com.sonicbase.server.TransactionManager" />
	<method signature="com.sonicbase.common.ComObject abortTransaction(java.lang.String,byte[])" class="com.sonicbase.server.TransactionManager" />
	<method signature="void preHandleTransaction(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,long,java.lang.Object[],java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicBoolean)" class="com.sonicbase.server.TransactionManager" />
	<method signature="com.sonicbase.server.TransactionManager$Transaction getTransaction(long)" class="com.sonicbase.server.TransactionManager" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.TransactionManager" />
	<method signature="java.util.concurrent.ConcurrentHashMap getLocks(java.lang.String)" class="com.sonicbase.server.TransactionManager" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.TransactionManager" />
	<method signature="void deleteLock(java.lang.String,java.lang.String,java.lang.String,long,com.sonicbase.schema.TableSchema,java.lang.Object[])" class="com.sonicbase.server.TransactionManager" />
	<method signature="java.util.concurrent.ConcurrentHashMap getTransactions()" class="com.sonicbase.server.TransactionManager" />
	<field name="server" class="com.sonicbase.server.TransactionManager" />
	<field name="transactions" class="com.sonicbase.server.TransactionManager" />
	<field name="locks" class="com.sonicbase.server.TransactionManager" />
	<class name="com.sonicbase.test.TestAWSBackup" />
	<method signature="void assertTrue(boolean)" class="com.sonicbase.test.TestAWSBackup" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.test.TestAWSBackup" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.test.TestAWSBackup" />
	<method signature="void main(java.lang.String[])" class="com.sonicbase.test.TestAWSBackup" />
	<method signature="void assertEquals(int,int)" class="com.sonicbase.test.TestAWSBackup" />
	<method signature="void assertEquals(long,long)" class="com.sonicbase.test.TestAWSBackup" />
	<method signature="void verifyData()" class="com.sonicbase.test.TestAWSBackup" />
	<field name="conn" class="com.sonicbase.test.TestAWSBackup" />
	<field name="recordCount" class="com.sonicbase.test.TestAWSBackup" />
	<field name="ids" class="com.sonicbase.test.TestAWSBackup" />
	<field name="client" class="com.sonicbase.test.TestAWSBackup" />
	<class name="com.sonicbase.query.impl.BinaryExpressionImpl$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.query.impl.BinaryExpressionImpl,java.util.List,java.lang.String[],com.sonicbase.schema.TableSchema,java.util.List)" class="com.sonicbase.query.impl.BinaryExpressionImpl$1" />
	<method signature="java.lang.Object call()" class="com.sonicbase.query.impl.BinaryExpressionImpl$1" />
	<field name="val$currBatch" class="com.sonicbase.query.impl.BinaryExpressionImpl$1" />
	<field name="this$0" class="com.sonicbase.query.impl.BinaryExpressionImpl$1" />
	<field name="val$tableNames" class="com.sonicbase.query.impl.BinaryExpressionImpl$1" />
	<field name="val$tableSchema" class="com.sonicbase.query.impl.BinaryExpressionImpl$1" />
	<field name="val$retIds" class="com.sonicbase.query.impl.BinaryExpressionImpl$1" />
	<class name="com.sonicbase.query.UpdateStatement" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.UpdateStatement" />
	<method signature="void setTableName(java.lang.String)" class="com.sonicbase.query.UpdateStatement" />
	<method signature="void setWhereClause(com.sonicbase.query.Expression)" class="com.sonicbase.query.UpdateStatement" />
	<method signature="void addSetExpression(com.sonicbase.query.Expression)" class="com.sonicbase.query.UpdateStatement" />
	<method signature="java.lang.Object execute(java.lang.String,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.UpdateStatement" />
	<class name="com.sonicbase.query.impl.GroupByContext" />
	<method signature="void &lt;init&gt;(java.util.List)" class="com.sonicbase.query.impl.GroupByContext" />
	<method signature="void addGroupContext(java.lang.Object[])" class="com.sonicbase.query.impl.GroupByContext" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.GroupByContext" />
	<method signature="void deserialize(java.io.DataInputStream,com.sonicbase.common.DatabaseCommon,java.lang.String)" class="com.sonicbase.query.impl.GroupByContext" />
	<method signature="java.util.List access$100(com.sonicbase.query.impl.GroupByContext)" class="com.sonicbase.query.impl.GroupByContext" />
	<method signature="java.util.Map getOrCreateInnerMap(com.sonicbase.query.impl.GroupByContext$GroupCounter)" class="com.sonicbase.query.impl.GroupByContext" />
	<method signature="java.util.Map getCounterTemplates()" class="com.sonicbase.query.impl.GroupByContext" />
	<method signature="void addCounterTemplate(com.sonicbase.query.impl.Counter)" class="com.sonicbase.query.impl.GroupByContext" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.GroupByContext" />
	<method signature="byte[] serialize(com.sonicbase.common.DatabaseCommon)" class="com.sonicbase.query.impl.GroupByContext" />
	<method signature="java.util.Map getGroupCounters()" class="com.sonicbase.query.impl.GroupByContext" />
	<method signature="void deserialize(byte[],com.sonicbase.common.DatabaseCommon,java.lang.String)" class="com.sonicbase.query.impl.GroupByContext" />
	<method signature="java.util.List getFieldContexts()" class="com.sonicbase.query.impl.GroupByContext" />
	<field name="fieldContexts" class="com.sonicbase.query.impl.GroupByContext" />
	<field name="counterTemplates" class="com.sonicbase.query.impl.GroupByContext" />
	<field name="groupCounters" class="com.sonicbase.query.impl.GroupByContext" />
	<class name="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setAsciiStream(int,java.io.InputStream,long)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setTime(int,java.sql.Time,java.util.Calendar)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setBinaryStream(int,java.io.InputStream,long)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setNCharacterStream(int,java.io.Reader,long)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void deserialize(byte[])" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setCharacterStream(int,java.io.Reader,long)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setObject(int,java.lang.Object,int,int)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setAsciiStream(int,java.io.InputStream,int)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setClob(int,java.sql.Clob)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setNull(int,int)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setDate(int,java.sql.Date,java.util.Calendar)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setNCharacterStream(int,java.io.Reader)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="java.sql.ResultSetMetaData getMetaData()" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setBinaryStream(int,java.io.InputStream,int)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setRowId(int,java.sql.RowId)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setObject(int,java.lang.Object,int)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="java.lang.Object getValue(java.lang.String)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setShort(int,short)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setSQLXML(int,java.sql.SQLXML)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setLong(int,long)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setTimestamp(int,java.sql.Timestamp)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="java.util.HashMap getCurrParmsByName()" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setBlob(int,java.io.InputStream)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setString(int,java.lang.String)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setDate(int,java.sql.Date)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setUnicodeStream(int,java.io.InputStream,int)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setCharacterStream(int,java.io.Reader)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="byte[] serialize()" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setObject(int,java.lang.Object)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setNString(int,java.lang.String)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void clearParameters()" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setBigDecimal(int,java.math.BigDecimal)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setTime(int,java.sql.Time)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setByte(int,byte)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setInt(int,int)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setAsciiStream(int,java.io.InputStream)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setDouble(int,double)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setNClob(int,java.io.Reader,long)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setBinaryStream(int,java.io.InputStream)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setArray(int,java.sql.Array)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setClob(int,java.io.Reader)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setNClob(int,java.sql.NClob)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setFloat(int,float)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setBytes(int,byte[])" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setBlob(int,java.io.InputStream,long)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void clearBatch()" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setBoolean(int,boolean)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setBlob(int,java.sql.Blob)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setRef(int,java.sql.Ref)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setURL(int,java.net.URL)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setCharacterStream(int,java.io.Reader,int)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="java.util.Map getCurrParmsByIndex()" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setClob(int,java.io.Reader,long)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="java.lang.Object getValue(int)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="java.sql.ParameterMetaData getParameterMetaData()" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setNClob(int,java.io.Reader)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<method signature="void setNull(int,int,java.lang.String)" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<field name="currParmsByIndex" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<field name="boundParms" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<field name="currParmsByName" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<field name="currentBatchOffset" class="com.sonicbase.jdbcdriver.ParameterHandler" />
	<class name="com.sonicbase.schema.DataType$DoubleConverter" />
	<method signature="java.lang.Object convert(java.lang.Object)" class="com.sonicbase.schema.DataType$DoubleConverter" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.DataType$DoubleConverter" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$DoubleConverter" />
	<method signature="void &lt;init&gt;(com.sonicbase.schema.DataType$1)" class="com.sonicbase.schema.DataType$DoubleConverter" />
	<class name="com.sonicbase.query.impl.ExpressionImpl$Type" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ExpressionImpl$Type" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$Type[] values()" class="com.sonicbase.query.impl.ExpressionImpl$Type" />
	<method signature="void &lt;init&gt;(java.lang.String,int,int)" class="com.sonicbase.query.impl.ExpressionImpl$Type" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$Type valueOf(java.lang.String)" class="com.sonicbase.query.impl.ExpressionImpl$Type" />
	<method signature="int getId()" class="com.sonicbase.query.impl.ExpressionImpl$Type" />
	<field name="binaryOp" class="com.sonicbase.query.impl.ExpressionImpl$Type" />
	<field name="inExpression" class="com.sonicbase.query.impl.ExpressionImpl$Type" />
	<field name="constant" class="com.sonicbase.query.impl.ExpressionImpl$Type" />
	<field name="parameter" class="com.sonicbase.query.impl.ExpressionImpl$Type" />
	<field name="column" class="com.sonicbase.query.impl.ExpressionImpl$Type" />
	<field name="allExpression" class="com.sonicbase.query.impl.ExpressionImpl$Type" />
	<field name="id" class="com.sonicbase.query.impl.ExpressionImpl$Type" />
	<field name="parenthesis" class="com.sonicbase.query.impl.ExpressionImpl$Type" />
	<field name="$VALUES" class="com.sonicbase.query.impl.ExpressionImpl$Type" />
	<class name="com.sonicbase.common.AWSClient" />
	<method signature="com.amazonaws.services.s3.transfer.TransferManager getTransferManager()" class="com.sonicbase.common.AWSClient" />
	<method signature="byte[] downloadBytes(java.lang.String,java.lang.String)" class="com.sonicbase.common.AWSClient" />
	<method signature="void downloadDirectory(java.lang.String,java.lang.String,java.lang.String,java.io.File)" class="com.sonicbase.common.AWSClient" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.AWSClient" />
	<method signature="com.amazonaws.services.s3.AmazonS3 getS3Client()" class="com.sonicbase.common.AWSClient" />
	<method signature="void deleteDirectory(java.lang.String,java.lang.String)" class="com.sonicbase.common.AWSClient" />
	<method signature="void downloadFile(java.lang.String,java.lang.String,java.lang.String,java.io.File)" class="com.sonicbase.common.AWSClient" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient)" class="com.sonicbase.common.AWSClient" />
	<method signature="java.util.List listDirectSubdirectories(java.lang.String,java.lang.String)" class="com.sonicbase.common.AWSClient" />
	<method signature="java.io.File getInstallDir()" class="com.sonicbase.common.AWSClient" />
	<method signature="com.sonicbase.common.Logger access$000(com.sonicbase.common.AWSClient)" class="com.sonicbase.common.AWSClient" />
	<method signature="void uploadDirectory(java.lang.String,java.lang.String,java.lang.String,java.io.File)" class="com.sonicbase.common.AWSClient" />
	<method signature="void downloadFile(java.lang.String,java.lang.String,java.io.File)" class="com.sonicbase.common.AWSClient" />
	<method signature="void uploadFile(java.lang.String,java.lang.String,java.lang.String,java.io.File)" class="com.sonicbase.common.AWSClient" />
	<method signature="com.sonicbase.util.JsonDict getConfig()" class="com.sonicbase.common.AWSClient" />
	<field name="executor" class="com.sonicbase.common.AWSClient" />
	<field name="logger" class="com.sonicbase.common.AWSClient" />
	<field name="client" class="com.sonicbase.common.AWSClient" />
	<field name="installDir" class="com.sonicbase.common.AWSClient" />
	<class name="com.sonicbase.jdbcdriver.Parameter$Array" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$Array" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$Array" />
	<method signature="void &lt;init&gt;(java.sql.Array)" class="com.sonicbase.jdbcdriver.Parameter$Array" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$Array" />
	<class name="com.sonicbase.util.DataUtil$ResultLength" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.util.DataUtil$ResultLength" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.util.DataUtil$ResultLength" />
	<method signature="java.lang.String toString()" class="com.sonicbase.util.DataUtil$ResultLength" />
	<method signature="void setLength(int)" class="com.sonicbase.util.DataUtil$ResultLength" />
	<method signature="int getLength()" class="com.sonicbase.util.DataUtil$ResultLength" />
	<method signature="int access$002(com.sonicbase.util.DataUtil$ResultLength,int)" class="com.sonicbase.util.DataUtil$ResultLength" />
	<field name="length" class="com.sonicbase.util.DataUtil$ResultLength" />
	<class name="com.sonicbase.common.ComObject$DynamicTag" />
	<method signature="void &lt;init&gt;(int,com.sonicbase.common.ComObject$DynamicType)" class="com.sonicbase.common.ComObject$DynamicTag" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.ComObject$DynamicTag" />
	<method signature="com.sonicbase.common.ComObject$DynamicType access$000(com.sonicbase.common.ComObject$DynamicTag)" class="com.sonicbase.common.ComObject$DynamicTag" />
	<field name="tag" class="com.sonicbase.common.ComObject$DynamicTag" />
	<field name="type" class="com.sonicbase.common.ComObject$DynamicTag" />
	<class name="com.sonicbase.index.Repartitioner$MoveProcessor$1" />
	<method signature="void run()" class="com.sonicbase.index.Repartitioner$MoveProcessor$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Repartitioner$MoveProcessor)" class="com.sonicbase.index.Repartitioner$MoveProcessor$1" />
	<field name="this$1" class="com.sonicbase.index.Repartitioner$MoveProcessor$1" />
	<class name="com.sonicbase.client.DatabaseClient$InsertRequest" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient)" class="com.sonicbase.client.DatabaseClient$InsertRequest" />
	<method signature="com.sonicbase.query.impl.InsertStatementImpl access$1400(com.sonicbase.client.DatabaseClient$InsertRequest)" class="com.sonicbase.client.DatabaseClient$InsertRequest" />
	<method signature="java.lang.String access$102(com.sonicbase.client.DatabaseClient$InsertRequest,java.lang.String)" class="com.sonicbase.client.DatabaseClient$InsertRequest" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.client.DatabaseClient$InsertRequest" />
	<method signature="java.lang.String access$100(com.sonicbase.client.DatabaseClient$InsertRequest)" class="com.sonicbase.client.DatabaseClient$InsertRequest" />
	<method signature="com.sonicbase.query.impl.InsertStatementImpl access$1402(com.sonicbase.client.DatabaseClient$InsertRequest,com.sonicbase.query.impl.InsertStatementImpl)" class="com.sonicbase.client.DatabaseClient$InsertRequest" />
	<method signature="com.sonicbase.jdbcdriver.ParameterHandler access$1502(com.sonicbase.client.DatabaseClient$InsertRequest,com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.client.DatabaseClient$InsertRequest" />
	<field name="insertStatement" class="com.sonicbase.client.DatabaseClient$InsertRequest" />
	<field name="dbName" class="com.sonicbase.client.DatabaseClient$InsertRequest" />
	<field name="this$0" class="com.sonicbase.client.DatabaseClient$InsertRequest" />
	<field name="parms" class="com.sonicbase.client.DatabaseClient$InsertRequest" />
	<class name="com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup" />
	<method signature="long access$902(com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup,long)" class="com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup" />
	<method signature="long access$802(com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup,long)" class="com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup" />
	<method signature="long access$900(com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup)" class="com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup" />
	<method signature="long access$800(com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup)" class="com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup" />
	<method signature="boolean[][] access$1100(com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup)" class="com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup" />
	<method signature="boolean[][] access$1102(com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup,boolean[][])" class="com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup" />
	<field name="lastTimeUsed" class="com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup" />
	<field name="serversPrepared" class="com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup" />
	<field name="preparedId" class="com.sonicbase.query.impl.ExpressionImpl$PreparedIndexLookup" />
	<class name="com.sonicbase.jdbcdriver.Parameter" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.jdbcdriver.Parameter" />
	<class name="com.sonicbase.jdbcdriver.NotSupportedException" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.NotSupportedException" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.jdbcdriver.NotSupportedException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.sonicbase.jdbcdriver.NotSupportedException" />
	<class name="com.sonicbase.query.DeleteStatement" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.DeleteStatement" />
	<method signature="void setTableName(java.lang.String)" class="com.sonicbase.query.DeleteStatement" />
	<method signature="void setWhereClause(com.sonicbase.query.Expression)" class="com.sonicbase.query.DeleteStatement" />
	<method signature="java.lang.Object execute(java.lang.String,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.DeleteStatement" />
	<class name="com.sonicbase.bench.TestTransactions$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.bench.TestTransactions,com.sonicbase.server.DatabaseServer[],int,com.sonicbase.util.JsonDict)" class="com.sonicbase.bench.TestTransactions$1" />
	<method signature="java.lang.Object call()" class="com.sonicbase.bench.TestTransactions$1" />
	<field name="val$dbServers" class="com.sonicbase.bench.TestTransactions$1" />
	<field name="val$config" class="com.sonicbase.bench.TestTransactions$1" />
	<field name="this$0" class="com.sonicbase.bench.TestTransactions$1" />
	<field name="val$shard" class="com.sonicbase.bench.TestTransactions$1" />
	<class name="com.sonicbase.bench.TestTransactions$2" />
	<method signature="void run()" class="com.sonicbase.bench.TestTransactions$2" />
	<method signature="void &lt;init&gt;(com.sonicbase.bench.TestTransactions,java.util.concurrent.CountDownLatch)" class="com.sonicbase.bench.TestTransactions$2" />
	<field name="this$0" class="com.sonicbase.bench.TestTransactions$2" />
	<field name="val$latch" class="com.sonicbase.bench.TestTransactions$2" />
	<class name="com.sonicbase.bench.TestTransactions$3" />
	<method signature="void run()" class="com.sonicbase.bench.TestTransactions$3" />
	<method signature="void &lt;init&gt;(com.sonicbase.bench.TestTransactions,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.CountDownLatch)" class="com.sonicbase.bench.TestTransactions$3" />
	<field name="val$updated" class="com.sonicbase.bench.TestTransactions$3" />
	<field name="this$0" class="com.sonicbase.bench.TestTransactions$3" />
	<field name="val$latch" class="com.sonicbase.bench.TestTransactions$3" />
	<class name="com.sonicbase.bench.TestTransactions$4" />
	<method signature="void run()" class="com.sonicbase.bench.TestTransactions$4" />
	<method signature="void &lt;init&gt;(com.sonicbase.bench.TestTransactions,java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch,java.util.concurrent.atomic.AtomicBoolean)" class="com.sonicbase.bench.TestTransactions$4" />
	<field name="val$updated" class="com.sonicbase.bench.TestTransactions$4" />
	<field name="this$0" class="com.sonicbase.bench.TestTransactions$4" />
	<field name="val$latch" class="com.sonicbase.bench.TestTransactions$4" />
	<field name="val$latch2" class="com.sonicbase.bench.TestTransactions$4" />
	<class name="com.sonicbase.jdbcdriver.Parameter$String" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$String" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$String" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$String" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$String" />
	<method signature="void &lt;init&gt;(byte[])" class="com.sonicbase.jdbcdriver.Parameter$String" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$String" />
	<class name="com.sonicbase.server.DatabaseServer$1" />
	<method signature="void run()" class="com.sonicbase.server.DatabaseServer$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer$1" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$1" />
	<class name="com.sonicbase.bench.TestTransactions$5" />
	<method signature="void run()" class="com.sonicbase.bench.TestTransactions$5" />
	<method signature="void &lt;init&gt;(com.sonicbase.bench.TestTransactions,java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch)" class="com.sonicbase.bench.TestTransactions$5" />
	<field name="this$0" class="com.sonicbase.bench.TestTransactions$5" />
	<field name="val$latch" class="com.sonicbase.bench.TestTransactions$5" />
	<field name="val$latch2" class="com.sonicbase.bench.TestTransactions$5" />
	<class name="com.sonicbase.bench.TestTransactions$6" />
	<method signature="void run()" class="com.sonicbase.bench.TestTransactions$6" />
	<method signature="void &lt;init&gt;(com.sonicbase.bench.TestTransactions,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.CountDownLatch)" class="com.sonicbase.bench.TestTransactions$6" />
	<field name="val$updated" class="com.sonicbase.bench.TestTransactions$6" />
	<field name="this$0" class="com.sonicbase.bench.TestTransactions$6" />
	<field name="val$latch" class="com.sonicbase.bench.TestTransactions$6" />
	<class name="com.sonicbase.server.DatabaseServer$3" />
	<method signature="void run()" class="com.sonicbase.server.DatabaseServer$3" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer,int,int)" class="com.sonicbase.server.DatabaseServer$3" />
	<field name="val$replica" class="com.sonicbase.server.DatabaseServer$3" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$3" />
	<field name="val$shard" class="com.sonicbase.server.DatabaseServer$3" />
	<class name="com.sonicbase.server.DatabaseServer$2" />
	<method signature="void run()" class="com.sonicbase.server.DatabaseServer$2" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer$2" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$2" />
	<class name="com.sonicbase.server.DatabaseServer$5" />
	<method signature="void run()" class="com.sonicbase.server.DatabaseServer$5" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer,java.lang.String,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicBoolean)" class="com.sonicbase.server.DatabaseServer$5" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$5" />
	<field name="val$licensePort" class="com.sonicbase.server.DatabaseServer$5" />
	<field name="val$address" class="com.sonicbase.server.DatabaseServer$5" />
	<field name="val$lastHaveProLicense" class="com.sonicbase.server.DatabaseServer$5" />
	<field name="val$haventSet" class="com.sonicbase.server.DatabaseServer$5" />
	<class name="com.sonicbase.server.DatabaseServer$4" />
	<method signature="void run()" class="com.sonicbase.server.DatabaseServer$4" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer,int,int,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicBoolean)" class="com.sonicbase.server.DatabaseServer$4" />
	<field name="val$isHealthy" class="com.sonicbase.server.DatabaseServer$4" />
	<field name="val$replica" class="com.sonicbase.server.DatabaseServer$4" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$4" />
	<field name="val$shard" class="com.sonicbase.server.DatabaseServer$4" />
	<field name="val$finished" class="com.sonicbase.server.DatabaseServer$4" />
	<class name="com.sonicbase.server.DatabaseServer$7" />
	<method signature="void run()" class="com.sonicbase.server.DatabaseServer$7" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer,com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer$7" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$7" />
	<field name="val$cobj" class="com.sonicbase.server.DatabaseServer$7" />
	<class name="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="boolean access$1302(com.sonicbase.socket.DatabaseSocketClient$Request,boolean)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="void setException(java.lang.Exception)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="java.util.concurrent.CountDownLatch access$600(com.sonicbase.socket.DatabaseSocketClient$Request)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="void setSuccess(boolean)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="void setBatchKey(java.lang.String)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="byte[] access$1400(com.sonicbase.socket.DatabaseSocketClient$Request)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="byte[] access$1100(com.sonicbase.socket.DatabaseSocketClient$Request)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="boolean access$1300(com.sonicbase.socket.DatabaseSocketClient$Request)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="java.lang.Exception access$502(com.sonicbase.socket.DatabaseSocketClient$Request,java.lang.Exception)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="java.lang.String access$302(com.sonicbase.socket.DatabaseSocketClient$Request,java.lang.String)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="java.lang.String access$1002(com.sonicbase.socket.DatabaseSocketClient$Request,java.lang.String)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="java.lang.String access$300(com.sonicbase.socket.DatabaseSocketClient$Request)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="byte[] access$1402(com.sonicbase.socket.DatabaseSocketClient$Request,byte[])" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="void setCommand(java.lang.String)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="void setResponse(byte[])" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="void setHostPort(java.lang.String)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="java.lang.String access$1000(com.sonicbase.socket.DatabaseSocketClient$Request)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="void setSocketClient(com.sonicbase.socket.DatabaseSocketClient)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="void setBody(byte[])" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="java.lang.Exception access$500(com.sonicbase.socket.DatabaseSocketClient$Request)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="void setLatch(java.util.concurrent.CountDownLatch)" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<method signature="byte[] access$1102(com.sonicbase.socket.DatabaseSocketClient$Request,byte[])" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<field name="exception" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<field name="batchKey" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<field name="response" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<field name="success" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<field name="socketClient" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<field name="hostPort" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<field name="latch" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<field name="body" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<field name="command" class="com.sonicbase.socket.DatabaseSocketClient$Request" />
	<class name="com.sonicbase.server.DatabaseServer$6" />
	<method signature="void run()" class="com.sonicbase.server.DatabaseServer$6" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer,com.sonicbase.common.ComObject)" class="com.sonicbase.server.DatabaseServer$6" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$6" />
	<field name="val$cobj" class="com.sonicbase.server.DatabaseServer$6" />
	<class name="com.sonicbase.jdbcdriver.Parameter$NString" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$NString" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$NString" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$NString" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.sonicbase.jdbcdriver.Parameter$NString" />
	<class name="com.sonicbase.server.DatabaseServer$9" />
	<method signature="void run()" class="com.sonicbase.server.DatabaseServer$9" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer,boolean)" class="com.sonicbase.server.DatabaseServer$9" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$9" />
	<field name="val$wasDoingBackup" class="com.sonicbase.server.DatabaseServer$9" />
	<class name="com.sonicbase.server.TransactionManager$OperationType" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.TransactionManager$OperationType" />
	<method signature="com.sonicbase.server.TransactionManager$OperationType[] values()" class="com.sonicbase.server.TransactionManager$OperationType" />
	<method signature="com.sonicbase.server.TransactionManager$OperationType valueOf(java.lang.String)" class="com.sonicbase.server.TransactionManager$OperationType" />
	<method signature="void &lt;init&gt;(java.lang.String,int)" class="com.sonicbase.server.TransactionManager$OperationType" />
	<field name="batchInsert" class="com.sonicbase.server.TransactionManager$OperationType" />
	<field name="batchInsertWithRecord" class="com.sonicbase.server.TransactionManager$OperationType" />
	<field name="insert" class="com.sonicbase.server.TransactionManager$OperationType" />
	<field name="update" class="com.sonicbase.server.TransactionManager$OperationType" />
	<field name="delete" class="com.sonicbase.server.TransactionManager$OperationType" />
	<field name="insertWithRecord" class="com.sonicbase.server.TransactionManager$OperationType" />
	<field name="$VALUES" class="com.sonicbase.server.TransactionManager$OperationType" />
	<class name="com.sonicbase.server.DatabaseServer$8" />
	<method signature="int compare(java.io.File,java.io.File)" class="com.sonicbase.server.DatabaseServer$8" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer$8" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.server.DatabaseServer$8" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$8" />
	<class name="com.sonicbase.schema.DataType$8" />
	<method signature="java.lang.Object convert(java.lang.Object)" class="com.sonicbase.schema.DataType$8" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$8" />
	<class name="com.sonicbase.jdbcdriver.Parameter$Bytes" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$Bytes" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$Bytes" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$Bytes" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$Bytes" />
	<method signature="void &lt;init&gt;(byte[])" class="com.sonicbase.jdbcdriver.Parameter$Bytes" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$Bytes" />
	<class name="com.sonicbase.schema.DataType$9" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$9" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.schema.DataType$9" />
	<class name="com.sonicbase.schema.DataType$6" />
	<method signature="java.lang.Object convert(java.lang.Object)" class="com.sonicbase.schema.DataType$6" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$6" />
	<class name="com.sonicbase.schema.DataType$7" />
	<method signature="java.lang.Object convert(java.lang.Object)" class="com.sonicbase.schema.DataType$7" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$7" />
	<class name="com.sonicbase.schema.DataType$4" />
	<method signature="java.lang.Object convert(java.lang.Object)" class="com.sonicbase.schema.DataType$4" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$4" />
	<class name="com.sonicbase.schema.DataType$5" />
	<method signature="java.lang.Object convert(java.lang.Object)" class="com.sonicbase.schema.DataType$5" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$5" />
	<class name="com.sonicbase.schema.DataType$2" />
	<method signature="java.lang.Object convert(java.lang.Object)" class="com.sonicbase.schema.DataType$2" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$2" />
	<class name="com.sonicbase.schema.DataType$3" />
	<method signature="java.lang.Object convert(java.lang.Object)" class="com.sonicbase.schema.DataType$3" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$3" />
	<class name="com.sonicbase.schema.FieldSchema" />
	<method signature="java.lang.String getName()" class="com.sonicbase.schema.FieldSchema" />
	<method signature="void setMapToOffset(int)" class="com.sonicbase.schema.FieldSchema" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.FieldSchema" />
	<method signature="boolean isArray()" class="com.sonicbase.schema.FieldSchema" />
	<method signature="com.sonicbase.schema.DataType$Type getType()" class="com.sonicbase.schema.FieldSchema" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.schema.FieldSchema" />
	<method signature="int getMapToOffset()" class="com.sonicbase.schema.FieldSchema" />
	<method signature="boolean isAutoIncrement()" class="com.sonicbase.schema.FieldSchema" />
	<method signature="void setWidth(int)" class="com.sonicbase.schema.FieldSchema" />
	<method signature="void deserialize(java.io.DataInputStream,int)" class="com.sonicbase.schema.FieldSchema" />
	<method signature="void setAutoIncrement(boolean)" class="com.sonicbase.schema.FieldSchema" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.FieldSchema" />
	<method signature="void setName(java.lang.String)" class="com.sonicbase.schema.FieldSchema" />
	<method signature="void setArray(boolean)" class="com.sonicbase.schema.FieldSchema" />
	<method signature="void setType(com.sonicbase.schema.DataType$Type)" class="com.sonicbase.schema.FieldSchema" />
	<method signature="int getWidth()" class="com.sonicbase.schema.FieldSchema" />
	<field name="array" class="com.sonicbase.schema.FieldSchema" />
	<field name="autoIncrement" class="com.sonicbase.schema.FieldSchema" />
	<field name="name" class="com.sonicbase.schema.FieldSchema" />
	<field name="width" class="com.sonicbase.schema.FieldSchema" />
	<field name="type" class="com.sonicbase.schema.FieldSchema" />
	<field name="mapToOffset" class="com.sonicbase.schema.FieldSchema" />
	<class name="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<method signature="boolean isCurrPartition()" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<method signature="java.util.Map$Entry getIndexSchema()" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<method signature="int access$302(com.sonicbase.client.DatabaseClient$KeyInfo,int)" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<method signature="java.lang.Object[] getKey()" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<method signature="java.util.Map$Entry access$200(com.sonicbase.client.DatabaseClient$KeyInfo)" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<method signature="void setKey(java.lang.Object[])" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<method signature="java.util.Map$Entry access$202(com.sonicbase.client.DatabaseClient$KeyInfo,java.util.Map$Entry)" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<method signature="java.lang.Object[] access$1302(com.sonicbase.client.DatabaseClient$KeyInfo,java.lang.Object[])" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<method signature="void &lt;init&gt;(int,java.lang.Object[],java.util.Map$Entry,boolean)" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<method signature="void setIndexSchema(java.util.Map$Entry)" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<method signature="java.lang.Object[] access$1300(com.sonicbase.client.DatabaseClient$KeyInfo)" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<method signature="int access$300(com.sonicbase.client.DatabaseClient$KeyInfo)" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<method signature="int getShard()" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<field name="currAndLastMatch" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<field name="currPartition" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<field name="shard" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<field name="indexSchema" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<field name="key" class="com.sonicbase.client.DatabaseClient$KeyInfo" />
	<class name="com.sonicbase.jdbcdriver.Parameter$Null" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$Null" />
	<method signature="void &lt;init&gt;(int)" class="com.sonicbase.jdbcdriver.Parameter$Null" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$Null" />
	<method signature="void &lt;init&gt;(int,java.lang.String)" class="com.sonicbase.jdbcdriver.Parameter$Null" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$Null" />
	<method signature="int getSqlTypeWrapping()" class="com.sonicbase.jdbcdriver.Parameter$Null" />
	<field name="sqlType" class="com.sonicbase.jdbcdriver.Parameter$Null" />
	<field name="typeName" class="com.sonicbase.jdbcdriver.Parameter$Null" />
	<class name="com.sonicbase.server.DeleteManager$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DeleteManager)" class="com.sonicbase.server.DeleteManager$1" />
	<method signature="int compare(java.io.File,java.io.File)" class="com.sonicbase.server.DeleteManager$1" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.server.DeleteManager$1" />
	<field name="this$0" class="com.sonicbase.server.DeleteManager$1" />
	<class name="com.sonicbase.query.Expression" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.Expression" />
	<class name="com.sonicbase.index.Repartitioner$GetKeyAtOffset" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.index.Repartitioner$GetKeyAtOffset" />
	<method signature="java.util.List getKeyAtOffset(java.lang.String,int,java.lang.String,java.lang.String,java.util.List)" class="com.sonicbase.index.Repartitioner$GetKeyAtOffset" />
	<class name="com.sonicbase.jdbcdriver.Parameter$RowId" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$RowId" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$RowId" />
	<method signature="void &lt;init&gt;(java.sql.RowId)" class="com.sonicbase.jdbcdriver.Parameter$RowId" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$RowId" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$RowId" />
	<class name="com.sonicbase.jdbcdriver.Parameter$NClobReader" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$NClobReader" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$NClobReader" />
	<method signature="void &lt;init&gt;(java.io.Reader)" class="com.sonicbase.jdbcdriver.Parameter$NClobReader" />
	<method signature="void &lt;init&gt;(java.io.Reader,long)" class="com.sonicbase.jdbcdriver.Parameter$NClobReader" />
	<field name="length" class="com.sonicbase.jdbcdriver.Parameter$NClobReader" />
	<class name="com.sonicbase.query.CreateIndexStatement" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.CreateIndexStatement" />
	<method signature="void setName(java.lang.String)" class="com.sonicbase.query.CreateIndexStatement" />
	<method signature="void setTableName(java.lang.String)" class="com.sonicbase.query.CreateIndexStatement" />
	<method signature="int execute(java.lang.String)" class="com.sonicbase.query.CreateIndexStatement" />
	<method signature="void setColumns(java.util.List)" class="com.sonicbase.query.CreateIndexStatement" />
	<class name="com.sonicbase.server.DeleteManager$3" />
	<method signature="void run()" class="com.sonicbase.server.DeleteManager$3" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DeleteManager)" class="com.sonicbase.server.DeleteManager$3" />
	<field name="this$0" class="com.sonicbase.server.DeleteManager$3" />
	<class name="com.sonicbase.bench.TestRebalance" />
	<method signature="void testBasics()" class="com.sonicbase.bench.TestRebalance" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.bench.TestRebalance" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.bench.TestRebalance" />
	<class name="com.sonicbase.server.DeleteManager$2" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DeleteManager,java.util.List,com.sonicbase.index.Index)" class="com.sonicbase.server.DeleteManager$2" />
	<method signature="java.lang.Object call()" class="com.sonicbase.server.DeleteManager$2" />
	<field name="val$currBatch" class="com.sonicbase.server.DeleteManager$2" />
	<field name="this$0" class="com.sonicbase.server.DeleteManager$2" />
	<field name="val$index" class="com.sonicbase.server.DeleteManager$2" />
	<class name="com.sonicbase.query.impl.SelectStatementImpl$KeyEntry" />
	<method signature="void &lt;init&gt;(com.sonicbase.query.impl.SelectStatementImpl,java.lang.Object[][],java.util.Comparator[][])" class="com.sonicbase.query.impl.SelectStatementImpl$KeyEntry" />
	<method signature="int hashCode()" class="com.sonicbase.query.impl.SelectStatementImpl$KeyEntry" />
	<method signature="boolean equals(java.lang.Object)" class="com.sonicbase.query.impl.SelectStatementImpl$KeyEntry" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.SelectStatementImpl$KeyEntry" />
	<field name="this$0" class="com.sonicbase.query.impl.SelectStatementImpl$KeyEntry" />
	<field name="key" class="com.sonicbase.query.impl.SelectStatementImpl$KeyEntry" />
	<field name="comparators" class="com.sonicbase.query.impl.SelectStatementImpl$KeyEntry" />
	<class name="com.sonicbase.server.LogManager$2" />
	<method signature="void run()" class="com.sonicbase.server.LogManager$2" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.LogManager,java.lang.String,byte[],long,long,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong,long,java.util.concurrent.atomic.AtomicLong)" class="com.sonicbase.server.LogManager$2" />
	<field name="val$buffer" class="com.sonicbase.server.LogManager$2" />
	<field name="val$countProcessed" class="com.sonicbase.server.LogManager$2" />
	<field name="val$lastLogged" class="com.sonicbase.server.LogManager$2" />
	<field name="val$countBatched" class="com.sonicbase.server.LogManager$2" />
	<field name="val$countFinished" class="com.sonicbase.server.LogManager$2" />
	<field name="val$command" class="com.sonicbase.server.LogManager$2" />
	<field name="val$begin" class="com.sonicbase.server.LogManager$2" />
	<field name="this$0" class="com.sonicbase.server.LogManager$2" />
	<field name="val$batchCount" class="com.sonicbase.server.LogManager$2" />
	<field name="val$sequence0" class="com.sonicbase.server.LogManager$2" />
	<field name="val$sequence1" class="com.sonicbase.server.LogManager$2" />
	<class name="com.sonicbase.server.LogManager$1" />
	<method signature="void run()" class="com.sonicbase.server.LogManager$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.LogManager,com.sonicbase.research.socket.NettyServer$Request,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong,long,com.sonicbase.server.LogManager$LogSource,java.util.concurrent.atomic.AtomicLong)" class="com.sonicbase.server.LogManager$1" />
	<field name="val$countProcessed" class="com.sonicbase.server.LogManager$1" />
	<field name="val$lastLogged" class="com.sonicbase.server.LogManager$1" />
	<field name="val$countBatched" class="com.sonicbase.server.LogManager$1" />
	<field name="val$countFinished" class="com.sonicbase.server.LogManager$1" />
	<field name="val$begin" class="com.sonicbase.server.LogManager$1" />
	<field name="this$0" class="com.sonicbase.server.LogManager$1" />
	<field name="val$request" class="com.sonicbase.server.LogManager$1" />
	<field name="val$batchCount" class="com.sonicbase.server.LogManager$1" />
	<field name="val$minSource" class="com.sonicbase.server.LogManager$1" />
	<class name="com.sonicbase.jdbcdriver.Parameter$Date" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$Date" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$Date" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$Date" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$Date" />
	<method signature="void &lt;init&gt;(java.sql.Date)" class="com.sonicbase.jdbcdriver.Parameter$Date" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$Date" />
	<method signature="void &lt;init&gt;(java.sql.Date,java.util.Calendar)" class="com.sonicbase.jdbcdriver.Parameter$Date" />
	<field name="cal" class="com.sonicbase.jdbcdriver.Parameter$Date" />
	<class name="com.sonicbase.research.socket.NettyServer$ReadState" />
	<method signature="com.sonicbase.research.socket.NettyServer$ReadState valueOf(java.lang.String)" class="com.sonicbase.research.socket.NettyServer$ReadState" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.research.socket.NettyServer$ReadState" />
	<method signature="com.sonicbase.research.socket.NettyServer$ReadState[] values()" class="com.sonicbase.research.socket.NettyServer$ReadState" />
	<method signature="void &lt;init&gt;(java.lang.String,int)" class="com.sonicbase.research.socket.NettyServer$ReadState" />
	<field name="dlqSize" class="com.sonicbase.research.socket.NettyServer$ReadState" />
	<field name="size" class="com.sonicbase.research.socket.NettyServer$ReadState" />
	<field name="bytes" class="com.sonicbase.research.socket.NettyServer$ReadState" />
	<field name="dlqBytes" class="com.sonicbase.research.socket.NettyServer$ReadState" />
	<field name="$VALUES" class="com.sonicbase.research.socket.NettyServer$ReadState" />
	<class name="com.sonicbase.server.LogManager$QueueEntry" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.LogManager$QueueEntry" />
	<method signature="void &lt;init&gt;(java.lang.String,byte[])" class="com.sonicbase.server.LogManager$QueueEntry" />
	<field name="body" class="com.sonicbase.server.LogManager$QueueEntry" />
	<field name="command" class="com.sonicbase.server.LogManager$QueueEntry" />
	<class name="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="java.lang.String access$1000(com.sonicbase.index.Repartitioner$MoveProcessor)" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="void await()" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="void shutdown()" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="java.lang.String access$900(com.sonicbase.index.Repartitioner$MoveProcessor)" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="java.lang.String access$800(com.sonicbase.index.Repartitioner$MoveProcessor)" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="java.util.concurrent.atomic.AtomicInteger access$1800(com.sonicbase.index.Repartitioner$MoveProcessor)" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="boolean access$500(com.sonicbase.index.Repartitioner$MoveProcessor)" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="int access$1200(com.sonicbase.index.Repartitioner$MoveProcessor)" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="java.util.concurrent.ConcurrentLinkedQueue access$1700(com.sonicbase.index.Repartitioner$MoveProcessor)" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="boolean access$1100(com.sonicbase.index.Repartitioner$MoveProcessor)" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="void start()" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Repartitioner,java.lang.String,java.lang.String,java.lang.String,boolean,com.sonicbase.index.Index,java.util.concurrent.ConcurrentLinkedQueue,int)" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="java.util.concurrent.ArrayBlockingQueue access$600(com.sonicbase.index.Repartitioner$MoveProcessor)" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="java.util.concurrent.ThreadPoolExecutor access$1900(com.sonicbase.index.Repartitioner$MoveProcessor)" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="java.util.concurrent.atomic.AtomicInteger access$700(com.sonicbase.index.Repartitioner$MoveProcessor)" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<method signature="com.sonicbase.index.Index access$1600(com.sonicbase.index.Repartitioner$MoveProcessor)" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<field name="indexName" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<field name="dbName" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<field name="index" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<field name="isPrimaryKey" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<field name="keysToDelete" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<field name="thread" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<field name="tableName" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<field name="countStarted" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<field name="executor" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<field name="this$0" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<field name="countFinished" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<field name="shard" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<field name="queue" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<field name="shutdown" class="com.sonicbase.index.Repartitioner$MoveProcessor" />
	<class name="com.sonicbase.jdbcdriver.Parameter$Short" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$Short" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$Short" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$Short" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$Short" />
	<method signature="void &lt;init&gt;(short)" class="com.sonicbase.jdbcdriver.Parameter$Short" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$Short" />
	<class name="com.sonicbase.server.UpdateManager$1" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.UpdateManager$1" />
	<field name="$SwitchMap$com$sonicbase$server$TransactionManager$OperationType" class="com.sonicbase.server.UpdateManager$1" />
	<class name="com.sonicbase.server.LongRunningCommands$SingleCommand$1" />
	<method signature="void run()" class="com.sonicbase.server.LongRunningCommands$SingleCommand$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.LongRunningCommands$SingleCommand,java.util.concurrent.ConcurrentLinkedQueue)" class="com.sonicbase.server.LongRunningCommands$SingleCommand$1" />
	<field name="this$0" class="com.sonicbase.server.LongRunningCommands$SingleCommand$1" />
	<field name="val$parentList" class="com.sonicbase.server.LongRunningCommands$SingleCommand$1" />
	<class name="com.sonicbase.common.AWSClient$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.common.AWSClient,java.lang.String,java.lang.String,java.lang.String,java.io.File)" class="com.sonicbase.common.AWSClient$1" />
	<method signature="java.lang.Object call()" class="com.sonicbase.common.AWSClient$1" />
	<field name="val$file" class="com.sonicbase.common.AWSClient$1" />
	<field name="this$0" class="com.sonicbase.common.AWSClient$1" />
	<field name="val$prefix" class="com.sonicbase.common.AWSClient$1" />
	<field name="val$path" class="com.sonicbase.common.AWSClient$1" />
	<field name="val$bucket" class="com.sonicbase.common.AWSClient$1" />
	<class name="com.sonicbase.jdbcdriver.Parameter$Blob" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$Blob" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$Blob" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$Blob" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$Blob" />
	<method signature="void &lt;init&gt;(java.sql.Blob)" class="com.sonicbase.jdbcdriver.Parameter$Blob" />
	<method signature="void &lt;init&gt;(byte[])" class="com.sonicbase.jdbcdriver.Parameter$Blob" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$Blob" />
	<class name="com.sonicbase.common.AWSClient$2" />
	<method signature="void run()" class="com.sonicbase.common.AWSClient$2" />
	<method signature="void &lt;init&gt;(com.sonicbase.common.AWSClient,java.lang.String,java.lang.String,java.io.File)" class="com.sonicbase.common.AWSClient$2" />
	<field name="val$destFile" class="com.sonicbase.common.AWSClient$2" />
	<field name="val$finalKey" class="com.sonicbase.common.AWSClient$2" />
	<field name="this$0" class="com.sonicbase.common.AWSClient$2" />
	<field name="val$bucket" class="com.sonicbase.common.AWSClient$2" />
	<class name="com.sonicbase.socket.DatabaseSocketClient$NioClient" />
	<method signature="com.sonicbase.socket.DatabaseSocketClient$ClientNioHandler access$000(com.sonicbase.socket.DatabaseSocketClient$NioClient)" class="com.sonicbase.socket.DatabaseSocketClient$NioClient" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.socket.DatabaseSocketClient$NioClient" />
	<method signature="void &lt;init&gt;(java.lang.String,int)" class="com.sonicbase.socket.DatabaseSocketClient$NioClient" />
	<field name="clientHandler" class="com.sonicbase.socket.DatabaseSocketClient$NioClient" />
	<class name="com.sonicbase.query.impl.UpdateStatementImpl$1" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.UpdateStatementImpl$1" />
	<field name="$SwitchMap$com$sonicbase$schema$DataType$Type" class="com.sonicbase.query.impl.UpdateStatementImpl$1" />
	<class name="com.sonicbase.server.DatabaseServer$OSStats" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.DatabaseServer$OSStats" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.DatabaseServer$OSStats" />
	<field name="javaMemMax" class="com.sonicbase.server.DatabaseServer$OSStats" />
	<field name="avgRecRate" class="com.sonicbase.server.DatabaseServer$OSStats" />
	<field name="diskAvail" class="com.sonicbase.server.DatabaseServer$OSStats" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$OSStats" />
	<field name="resGig" class="com.sonicbase.server.DatabaseServer$OSStats" />
	<field name="cpu" class="com.sonicbase.server.DatabaseServer$OSStats" />
	<field name="javaMemMin" class="com.sonicbase.server.DatabaseServer$OSStats" />
	<field name="avgTransRate" class="com.sonicbase.server.DatabaseServer$OSStats" />
	<class name="com.sonicbase.index.Repartitioner$MapEntry" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.index.Repartitioner$MapEntry" />
	<method signature="void &lt;init&gt;(java.lang.Object[],java.lang.Object)" class="com.sonicbase.index.Repartitioner$MapEntry" />
	<field name="value" class="com.sonicbase.index.Repartitioner$MapEntry" />
	<field name="key" class="com.sonicbase.index.Repartitioner$MapEntry" />
	<class name="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="void setSqlType(int)" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="int getSqlType()" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="boolean canUseIndex()" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$Type getType()" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(int,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="java.lang.Object evaluateSingleRecord(com.sonicbase.schema.TableSchema[],com.sonicbase.common.Record[],com.sonicbase.jdbcdriver.ParameterHandler)" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="void queryRewrite()" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="void setValue(java.lang.Object)" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="java.lang.String toString()" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="java.lang.Object getValue()" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="void &lt;init&gt;(java.lang.Object,int)" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="boolean canSortWithIndex()" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="com.sonicbase.query.impl.ColumnImpl getPrimaryColumn()" class="com.sonicbase.query.impl.ConstantImpl" />
	<method signature="void getColumns(java.util.Set)" class="com.sonicbase.query.impl.ConstantImpl" />
	<field name="sqlType" class="com.sonicbase.query.impl.ConstantImpl" />
	<field name="value" class="com.sonicbase.query.impl.ConstantImpl" />
	<class name="com.sonicbase.server.LongRunningCommands$SingleCommand" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.LongRunningCommands,java.lang.String,byte[])" class="com.sonicbase.server.LongRunningCommands$SingleCommand" />
	<method signature="void doExecute(java.util.concurrent.ConcurrentLinkedQueue)" class="com.sonicbase.server.LongRunningCommands$SingleCommand" />
	<method signature="void access$000(com.sonicbase.server.LongRunningCommands$SingleCommand,java.util.concurrent.ConcurrentLinkedQueue)" class="com.sonicbase.server.LongRunningCommands$SingleCommand" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.LongRunningCommands$SingleCommand" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.LongRunningCommands)" class="com.sonicbase.server.LongRunningCommands$SingleCommand" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.server.LongRunningCommands$SingleCommand" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.server.LongRunningCommands$SingleCommand" />
	<method signature="void execute(java.util.concurrent.ConcurrentLinkedQueue)" class="com.sonicbase.server.LongRunningCommands$SingleCommand" />
	<field name="longRunningCommands" class="com.sonicbase.server.LongRunningCommands$SingleCommand" />
	<field name="body" class="com.sonicbase.server.LongRunningCommands$SingleCommand" />
	<field name="command" class="com.sonicbase.server.LongRunningCommands$SingleCommand" />
	<class name="com.sonicbase.server.RecordLockedException" />
	<method signature="void &lt;init&gt;(java.lang.Exception)" class="com.sonicbase.server.RecordLockedException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Exception)" class="com.sonicbase.server.RecordLockedException" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.RecordLockedException" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.server.RecordLockedException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.sonicbase.server.RecordLockedException" />
	<class name="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="com.sonicbase.socket.DatabaseSocketClient$Connection borrow_connection(java.lang.String,int)" class="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="byte[] do_send(java.lang.String,java.lang.String,byte[],java.lang.String)" class="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="void sendBatch(java.lang.String,int,java.util.List)" class="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="void shutdown()" class="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="void processResponse(java.io.InputStream,com.sonicbase.socket.DatabaseSocketClient$Request)" class="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="void access$400(java.lang.String,int,java.util.List)" class="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="io.netty.channel.EventLoopGroup access$100()" class="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="java.util.concurrent.atomic.AtomicLong access$700()" class="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="java.util.concurrent.atomic.AtomicInteger access$800()" class="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="java.util.List getBatchThreads()" class="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="void serializeSingleRequest(java.io.ByteArrayOutputStream,java.lang.String,byte[])" class="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="void initBatchSender(java.lang.String,int,com.sonicbase.socket.DatabaseSocketClient)" class="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="byte[] do_send(java.util.List)" class="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="void return_connection(com.sonicbase.socket.DatabaseSocketClient$Connection,java.lang.String,int)" class="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="org.apache.log4j.Logger access$900()" class="com.sonicbase.socket.DatabaseSocketClient" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.socket.DatabaseSocketClient" />
	<field name="ENABLE_BATCH" class="com.sonicbase.socket.DatabaseSocketClient" />
	<field name="connectionCount" class="com.sonicbase.socket.DatabaseSocketClient" />
	<field name="batchTotalEntryCount" class="com.sonicbase.socket.DatabaseSocketClient" />
	<field name="clientGroup" class="com.sonicbase.socket.DatabaseSocketClient" />
	<field name="logger" class="com.sonicbase.socket.DatabaseSocketClient" />
	<field name="pools" class="com.sonicbase.socket.DatabaseSocketClient" />
	<field name="batchCount" class="com.sonicbase.socket.DatabaseSocketClient" />
	<field name="LZO_COMPRESSION" class="com.sonicbase.socket.DatabaseSocketClient" />
	<field name="COMPRESS" class="com.sonicbase.socket.DatabaseSocketClient" />
	<field name="BATCH_SIZE" class="com.sonicbase.socket.DatabaseSocketClient" />
	<field name="requestQueues" class="com.sonicbase.socket.DatabaseSocketClient" />
	<field name="batchThreads" class="com.sonicbase.socket.DatabaseSocketClient" />
	<field name="CONNECTION_COUNT" class="com.sonicbase.socket.DatabaseSocketClient" />
	<field name="BATCH_THREAD_COUNT" class="com.sonicbase.socket.DatabaseSocketClient" />
	<class name="com.sonicbase.bench.TestTransactions" />
	<method signature="void testConcurrent()" class="com.sonicbase.bench.TestTransactions" />
	<method signature="java.sql.Connection access$000(com.sonicbase.bench.TestTransactions)" class="com.sonicbase.bench.TestTransactions" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.bench.TestTransactions" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.bench.TestTransactions" />
	<method signature="void testConcurrentSecondaryKeys()" class="com.sonicbase.bench.TestTransactions" />
	<method signature="void beforeClass()" class="com.sonicbase.bench.TestTransactions" />
	<method signature="void testConcurrent2()" class="com.sonicbase.bench.TestTransactions" />
	<method signature="void test()" class="com.sonicbase.bench.TestTransactions" />
	<method signature="void testConcurrent3()" class="com.sonicbase.bench.TestTransactions" />
	<method signature="void testConcurrent4()" class="com.sonicbase.bench.TestTransactions" />
	<field name="conn2" class="com.sonicbase.bench.TestTransactions" />
	<field name="conn" class="com.sonicbase.bench.TestTransactions" />
	<class name="com.sonicbase.common.MemUtil" />
	<method signature="double getMemValue(java.lang.String)" class="com.sonicbase.common.MemUtil" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.MemUtil" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.common.MemUtil" />
	<class name="com.sonicbase.jdbcdriver.Parameter$Int" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$Int" />
	<method signature="void &lt;init&gt;(int)" class="com.sonicbase.jdbcdriver.Parameter$Int" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$Int" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$Int" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$Int" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$Int" />
	<class name="com.sonicbase.query.impl.ExpressionImpl$RecordCache$Key" />
	<method signature="int hashCode()" class="com.sonicbase.query.impl.ExpressionImpl$RecordCache$Key" />
	<method signature="boolean equals(java.lang.Object)" class="com.sonicbase.query.impl.ExpressionImpl$RecordCache$Key" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ExpressionImpl$RecordCache$Key" />
	<method signature="void &lt;init&gt;(com.sonicbase.query.impl.ExpressionImpl$RecordCache,java.lang.String,java.lang.Object[])" class="com.sonicbase.query.impl.ExpressionImpl$RecordCache$Key" />
	<field name="hashCode" class="com.sonicbase.query.impl.ExpressionImpl$RecordCache$Key" />
	<field name="this$0" class="com.sonicbase.query.impl.ExpressionImpl$RecordCache$Key" />
	<field name="key" class="com.sonicbase.query.impl.ExpressionImpl$RecordCache$Key" />
	<class name="com.sonicbase.query.impl.SelectStatementImpl$Join" />
	<method signature="com.sonicbase.query.Expression access$100(com.sonicbase.query.impl.SelectStatementImpl$Join)" class="com.sonicbase.query.impl.SelectStatementImpl$Join" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.SelectStatementImpl$Join" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.SelectStatementImpl$Join" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.query.impl.SelectStatementImpl$Join" />
	<method signature="void &lt;init&gt;(com.sonicbase.query.SelectStatement$JoinType,java.lang.String,com.sonicbase.query.Expression)" class="com.sonicbase.query.impl.SelectStatementImpl$Join" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.query.impl.SelectStatementImpl$Join" />
	<method signature="java.lang.String access$000(com.sonicbase.query.impl.SelectStatementImpl$Join)" class="com.sonicbase.query.impl.SelectStatementImpl$Join" />
	<method signature="com.sonicbase.query.SelectStatement$JoinType access$200(com.sonicbase.query.impl.SelectStatementImpl$Join)" class="com.sonicbase.query.impl.SelectStatementImpl$Join" />
	<field name="expression" class="com.sonicbase.query.impl.SelectStatementImpl$Join" />
	<field name="rightFrom" class="com.sonicbase.query.impl.SelectStatementImpl$Join" />
	<field name="type" class="com.sonicbase.query.impl.SelectStatementImpl$Join" />
	<class name="com.sonicbase.research.socket.NettyServer" />
	<method signature="byte[] compress(byte[])" class="com.sonicbase.research.socket.NettyServer" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.research.socket.NettyServer" />
	<method signature="boolean isRunning()" class="com.sonicbase.research.socket.NettyServer" />
	<method signature="void setDatabaseServer(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.research.socket.NettyServer" />
	<method signature="void setDlqServer(com.sonicbase.research.socket.NettyServer$RequestHandler)" class="com.sonicbase.research.socket.NettyServer" />
	<method signature="com.sonicbase.server.DatabaseServer getDatabaseServer()" class="com.sonicbase.research.socket.NettyServer" />
	<method signature="boolean access$200(com.sonicbase.research.socket.NettyServer)" class="com.sonicbase.research.socket.NettyServer" />
	<method signature="void run()" class="com.sonicbase.research.socket.NettyServer" />
	<method signature="com.sonicbase.common.Logger access$300()" class="com.sonicbase.research.socket.NettyServer" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.research.socket.NettyServer" />
	<method signature="com.sonicbase.research.socket.NettyServer$RequestHandler getDlqServer()" class="com.sonicbase.research.socket.NettyServer" />
	<method signature="void main(java.lang.String[])" class="com.sonicbase.research.socket.NettyServer" />
	<method signature="byte[] sendResponse(byte[],java.io.OutputStream,byte[],int,java.util.ArrayList,java.io.ByteArrayOutputStream)" class="com.sonicbase.research.socket.NettyServer" />
	<method signature="byte[] uncompress(byte[])" class="com.sonicbase.research.socket.NettyServer" />
	<method signature="java.lang.String getHelpPage(com.sonicbase.research.socket.NettyServer)" class="com.sonicbase.research.socket.NettyServer" />
	<method signature="com.sonicbase.research.socket.NettyServer$Request deserializeRequest(java.io.InputStream,byte[])" class="com.sonicbase.research.socket.NettyServer" />
	<method signature="void startServer(java.lang.String[],java.lang.String,boolean)" class="com.sonicbase.research.socket.NettyServer" />
	<field name="cluster" class="com.sonicbase.research.socket.NettyServer" />
	<field name="databaseServer" class="com.sonicbase.research.socket.NettyServer" />
	<field name="f" class="com.sonicbase.research.socket.NettyServer" />
	<field name="logger" class="com.sonicbase.research.socket.NettyServer" />
	<field name="UTF8_STR" class="com.sonicbase.research.socket.NettyServer" />
	<field name="dlqServer" class="com.sonicbase.research.socket.NettyServer" />
	<field name="bossGroup" class="com.sonicbase.research.socket.NettyServer" />
	<field name="PORT_STR" class="com.sonicbase.research.socket.NettyServer" />
	<field name="HOST_STR" class="com.sonicbase.research.socket.NettyServer" />
	<field name="isRunning" class="com.sonicbase.research.socket.NettyServer" />
	<field name="port" class="com.sonicbase.research.socket.NettyServer" />
	<field name="ENABLE_COMPRESSION" class="com.sonicbase.research.socket.NettyServer" />
	<field name="workerGroup" class="com.sonicbase.research.socket.NettyServer" />
	<class name="com.sonicbase.query.impl.SelectStatementImpl$Explain" />
	<method signature="void outdent()" class="com.sonicbase.query.impl.SelectStatementImpl$Explain" />
	<method signature="void appendSpaces()" class="com.sonicbase.query.impl.SelectStatementImpl$Explain" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.SelectStatementImpl$Explain" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.SelectStatementImpl$Explain" />
	<method signature="void setIndent(int)" class="com.sonicbase.query.impl.SelectStatementImpl$Explain" />
	<method signature="int getIndent()" class="com.sonicbase.query.impl.SelectStatementImpl$Explain" />
	<method signature="java.lang.StringBuilder getBuilder()" class="com.sonicbase.query.impl.SelectStatementImpl$Explain" />
	<method signature="void setBuilder(java.lang.StringBuilder)" class="com.sonicbase.query.impl.SelectStatementImpl$Explain" />
	<method signature="void indent()" class="com.sonicbase.query.impl.SelectStatementImpl$Explain" />
	<field name="indent" class="com.sonicbase.query.impl.SelectStatementImpl$Explain" />
	<field name="builder" class="com.sonicbase.query.impl.SelectStatementImpl$Explain" />
	<class name="com.sonicbase.client.DatabaseClient$Server" />
	<method signature="byte[] do_send(java.lang.String,java.lang.String,com.sonicbase.common.ComObject)" class="com.sonicbase.client.DatabaseClient$Server" />
	<method signature="boolean access$502(com.sonicbase.client.DatabaseClient$Server,boolean)" class="com.sonicbase.client.DatabaseClient$Server" />
	<method signature="com.sonicbase.socket.DatabaseSocketClient getSocketClient()" class="com.sonicbase.client.DatabaseClient$Server" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.client.DatabaseClient$Server" />
	<method signature="boolean access$500(com.sonicbase.client.DatabaseClient$Server)" class="com.sonicbase.client.DatabaseClient$Server" />
	<method signature="com.sonicbase.socket.DatabaseSocketClient access$600(com.sonicbase.client.DatabaseClient$Server)" class="com.sonicbase.client.DatabaseClient$Server" />
	<method signature="byte[] do_send(java.lang.String,java.lang.String,byte[])" class="com.sonicbase.client.DatabaseClient$Server" />
	<method signature="java.lang.String access$000(com.sonicbase.client.DatabaseClient$Server)" class="com.sonicbase.client.DatabaseClient$Server" />
	<method signature="void &lt;init&gt;(java.lang.String,int)" class="com.sonicbase.client.DatabaseClient$Server" />
	<field name="socketClient" class="com.sonicbase.client.DatabaseClient$Server" />
	<field name="dead" class="com.sonicbase.client.DatabaseClient$Server" />
	<field name="hostPort" class="com.sonicbase.client.DatabaseClient$Server" />
	<class name="com.sonicbase.query.impl.SelectStatementImpl$JoinReturn" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.SelectStatementImpl$JoinReturn" />
	<method signature="java.util.List access$302(com.sonicbase.query.impl.SelectStatementImpl$JoinReturn,java.util.List)" class="com.sonicbase.query.impl.SelectStatementImpl$JoinReturn" />
	<method signature="void &lt;init&gt;(com.sonicbase.query.impl.SelectStatementImpl)" class="com.sonicbase.query.impl.SelectStatementImpl$JoinReturn" />
	<method signature="java.util.List access$300(com.sonicbase.query.impl.SelectStatementImpl$JoinReturn)" class="com.sonicbase.query.impl.SelectStatementImpl$JoinReturn" />
	<field name="keys" class="com.sonicbase.query.impl.SelectStatementImpl$JoinReturn" />
	<field name="this$0" class="com.sonicbase.query.impl.SelectStatementImpl$JoinReturn" />
	<class name="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void setPageSize(long)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="boolean isExpressionForRightTable(com.sonicbase.schema.TableSchema,com.sonicbase.query.impl.ExpressionImpl)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="boolean isForceSelectOnServer()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void applyDistinct(java.lang.String,java.lang.String[],com.sonicbase.query.impl.ExpressionImpl$NextReturn,java.util.Set)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl getExpression()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="java.util.Map getFunctionAliases()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void forceSelectOnServer()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn handleJoins(int,java.lang.String,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="java.lang.String getFromTable()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void addSelectColumn(java.lang.String,net.sf.jsqlparser.expression.operators.relational.ExpressionList,java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="com.sonicbase.query.impl.SelectStatementImpl$JoinReturn evaluateJoin(int,java.lang.String,java.util.concurrent.atomic.AtomicReference,com.sonicbase.query.SelectStatement$JoinType,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference,com.sonicbase.schema.TableSchema,com.sonicbase.schema.TableSchema,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicInteger,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void addOrderBy(java.lang.String,java.lang.String,boolean)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void getActualJoinExpression(com.sonicbase.query.impl.ExpressionImpl,java.util.concurrent.atomic.AtomicReference,java.util.List)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="com.sonicbase.query.ResultSet countRecords(java.lang.String,java.lang.String[])" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="long getServerSelectResultSetId()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="int getServerSelectPageNumber()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void setServerSelectShardNumber(int)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void setIsDistinct()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="java.util.List getOrderByExpressions()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void setIsOnServer(boolean)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="com.sonicbase.query.Expression getWhereClause()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="int getServerSelectReplicaNumber()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="java.lang.Object execute(java.lang.String,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="byte[] serialize()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void setGroupByColumns(java.util.List)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="java.lang.String[] getTableNames()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void setServerSelectReplicaNumber(int)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn serverSelect(java.lang.String,boolean,java.lang.String[])" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void setWhereClause(com.sonicbase.query.Expression)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void setOrderByExpressions(java.util.List)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="java.util.List getSelectColumns()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void dedupIds(java.lang.String,java.lang.String[],com.sonicbase.query.impl.ExpressionImpl$NextReturn)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void addJoinExpression(com.sonicbase.query.SelectStatement$JoinType,java.lang.String,com.sonicbase.query.Expression)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$NextReturn next(java.lang.String,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="java.util.Map getAliases()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="java.lang.Long getPageSize()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void setServerSelectResultSetId(long)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void setCountFunction()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void deserialize(java.io.DataInputStream,java.lang.String)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void addOrderByExpression(java.lang.String,java.lang.String,boolean)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="boolean isOnServer()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void setOffset(net.sf.jsqlparser.statement.select.Offset)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void setLimit(net.sf.jsqlparser.statement.select.Limit)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void setServerSelectPageNumber(int)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void deserialize(byte[],java.lang.String)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="int getServerSelectShardNumber()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="boolean isServerSelect()" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void setFromTable(java.lang.String)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<method signature="void setCountFunction(java.lang.String,java.lang.String)" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="joins" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="serverSelectShardNumber" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="tableNames" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="recordCache" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="orderByExpressions" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="countColumn" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="aliases" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="expressionDuration" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="columns" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="logger" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="pageSize" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="serverSelectReplicaNumber" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="serverSelectPageNumber" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="isCountFunction" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="countTable" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="serverSelect" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="limit" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="client" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="groupByContext" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="serverSelectResultSetId" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="isOnServer" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="expression" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="expressionCount" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="counters" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="offset" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="isDistinct" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="functionAliases" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="forceSelectOnServer" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="serverSort" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="groupByColumns" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="fromTable" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<field name="selectColumns" class="com.sonicbase.query.impl.SelectStatementImpl" />
	<class name="com.sonicbase.jdbcdriver.Driver" />
	<method signature="boolean jdbcCompliant()" class="com.sonicbase.jdbcdriver.Driver" />
	<method signature="java.sql.Connection connect(java.lang.String,java.util.Properties)" class="com.sonicbase.jdbcdriver.Driver" />
	<method signature="java.util.logging.Logger getParentLogger()" class="com.sonicbase.jdbcdriver.Driver" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Driver" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.jdbcdriver.Driver" />
	<method signature="boolean acceptsURL(java.lang.String)" class="com.sonicbase.jdbcdriver.Driver" />
	<method signature="int getMajorVersion()" class="com.sonicbase.jdbcdriver.Driver" />
	<method signature="java.sql.DriverPropertyInfo[] getPropertyInfo(java.lang.String,java.util.Properties)" class="com.sonicbase.jdbcdriver.Driver" />
	<method signature="int getMinorVersion()" class="com.sonicbase.jdbcdriver.Driver" />
	<field name="driver" class="com.sonicbase.jdbcdriver.Driver" />
	<field name="MAJOR_VERSION" class="com.sonicbase.jdbcdriver.Driver" />
	<field name="MINOR_VERSION" class="com.sonicbase.jdbcdriver.Driver" />
	<field name="URL_PREFIX" class="com.sonicbase.jdbcdriver.Driver" />
	<class name="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient)" class="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<method signature="java.lang.String getName()" class="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<method signature="boolean isUnique()" class="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<method signature="java.lang.String getTableName()" class="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<method signature="java.util.List getColumns()" class="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<method signature="void setName(java.lang.String)" class="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<method signature="void setTableName(java.lang.String)" class="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<method signature="int execute(java.lang.String)" class="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<method signature="void setIsUnique(boolean)" class="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<method signature="void setColumns(java.util.List)" class="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<field name="columns" class="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<field name="name" class="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<field name="isUnique" class="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<field name="client" class="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<field name="tableName" class="com.sonicbase.query.impl.CreateIndexStatementImpl" />
	<class name="com.sonicbase.server.SnapshotManager$3" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.SnapshotManager,java.util.concurrent.atomic.AtomicLong,com.sonicbase.index.Index,boolean,java.io.DataOutputStream[],java.util.Map$Entry,java.util.Map$Entry,com.sonicbase.util.DataUtil$ResultLength,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong,long)" class="com.sonicbase.server.SnapshotManager$3" />
	<method signature="boolean visit(java.lang.Object[],java.lang.Object)" class="com.sonicbase.server.SnapshotManager$3" />
	<field name="val$isPrimaryKey" class="com.sonicbase.server.SnapshotManager$3" />
	<field name="val$lastLogged" class="com.sonicbase.server.SnapshotManager$3" />
	<field name="val$indexEntry" class="com.sonicbase.server.SnapshotManager$3" />
	<field name="val$outStreams" class="com.sonicbase.server.SnapshotManager$3" />
	<field name="this$0" class="com.sonicbase.server.SnapshotManager$3" />
	<field name="val$index" class="com.sonicbase.server.SnapshotManager$3" />
	<field name="val$tableEntry" class="com.sonicbase.server.SnapshotManager$3" />
	<field name="val$AtomicInteger" class="com.sonicbase.server.SnapshotManager$3" />
	<field name="val$savedCount" class="com.sonicbase.server.SnapshotManager$3" />
	<field name="val$countSaved" class="com.sonicbase.server.SnapshotManager$3" />
	<field name="val$subBegin" class="com.sonicbase.server.SnapshotManager$3" />
	<class name="com.sonicbase.index.Indices" />
	<method signature="void addIndex(com.sonicbase.schema.TableSchema,java.lang.String,java.util.Comparator[])" class="com.sonicbase.index.Indices" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.index.Indices" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.index.Indices" />
	<method signature="java.util.concurrent.ConcurrentHashMap getIndices()" class="com.sonicbase.index.Indices" />
	<field name="indexes" class="com.sonicbase.index.Indices" />
	<class name="com.sonicbase.query.impl.Clob" />
	<method signature="int setString(long,java.lang.String)" class="com.sonicbase.query.impl.Clob" />
	<method signature="java.io.Reader getCharacterStream(long,long)" class="com.sonicbase.query.impl.Clob" />
	<method signature="java.io.InputStream getAsciiStream()" class="com.sonicbase.query.impl.Clob" />
	<method signature="java.io.Writer setCharacterStream(long)" class="com.sonicbase.query.impl.Clob" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.Clob" />
	<method signature="long position(java.lang.String,long)" class="com.sonicbase.query.impl.Clob" />
	<method signature="void free()" class="com.sonicbase.query.impl.Clob" />
	<method signature="java.lang.String getString()" class="com.sonicbase.query.impl.Clob" />
	<method signature="void truncate(long)" class="com.sonicbase.query.impl.Clob" />
	<method signature="java.io.OutputStream setAsciiStream(long)" class="com.sonicbase.query.impl.Clob" />
	<method signature="java.io.Reader getCharacterStream()" class="com.sonicbase.query.impl.Clob" />
	<method signature="long position(java.sql.Clob,long)" class="com.sonicbase.query.impl.Clob" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.Clob" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.sonicbase.query.impl.Clob" />
	<method signature="long length()" class="com.sonicbase.query.impl.Clob" />
	<method signature="int setString(long,java.lang.String,int,int)" class="com.sonicbase.query.impl.Clob" />
	<method signature="java.lang.String getSubString(long,int)" class="com.sonicbase.query.impl.Clob" />
	<field name="data" class="com.sonicbase.query.impl.Clob" />
	<class name="com.sonicbase.server.SnapshotManager$1" />
	<method signature="java.lang.Object call()" class="com.sonicbase.server.SnapshotManager$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.SnapshotManager,java.io.File,com.sonicbase.schema.IndexSchema,com.sonicbase.schema.TableSchema,com.sonicbase.index.Index,java.util.concurrent.atomic.AtomicLong,int,java.util.concurrent.atomic.AtomicLong,java.lang.String,java.lang.String,long)" class="com.sonicbase.server.SnapshotManager$1" />
	<method signature="java.lang.Boolean call()" class="com.sonicbase.server.SnapshotManager$1" />
	<field name="val$indexFile" class="com.sonicbase.server.SnapshotManager$1" />
	<field name="val$recoveredCount" class="com.sonicbase.server.SnapshotManager$1" />
	<field name="val$lastLogged" class="com.sonicbase.server.SnapshotManager$1" />
	<field name="val$indexName" class="com.sonicbase.server.SnapshotManager$1" />
	<field name="this$0" class="com.sonicbase.server.SnapshotManager$1" />
	<field name="val$index" class="com.sonicbase.server.SnapshotManager$1" />
	<field name="val$currOffset" class="com.sonicbase.server.SnapshotManager$1" />
	<field name="val$tableSchema" class="com.sonicbase.server.SnapshotManager$1" />
	<field name="val$tableName" class="com.sonicbase.server.SnapshotManager$1" />
	<field name="val$indexSchema" class="com.sonicbase.server.SnapshotManager$1" />
	<field name="val$indexBegin" class="com.sonicbase.server.SnapshotManager$1" />
	<class name="com.sonicbase.server.SnapshotManager$2" />
	<method signature="void run()" class="com.sonicbase.server.SnapshotManager$2" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.SnapshotManager)" class="com.sonicbase.server.SnapshotManager$2" />
	<field name="this$0" class="com.sonicbase.server.SnapshotManager$2" />
	<class name="com.sonicbase.query.InExpression" />
	<method signature="void addValue(long)" class="com.sonicbase.query.InExpression" />
	<method signature="void setColumn(java.lang.String,java.lang.String,java.lang.String)" class="com.sonicbase.query.InExpression" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.InExpression" />
	<method signature="void addValue(java.lang.String)" class="com.sonicbase.query.InExpression" />
	<class name="com.sonicbase.schema.DataType$LongConverter" />
	<method signature="java.lang.Object convert(java.lang.Object)" class="com.sonicbase.schema.DataType$LongConverter" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.DataType$LongConverter" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType$LongConverter" />
	<method signature="void &lt;init&gt;(com.sonicbase.schema.DataType$1)" class="com.sonicbase.schema.DataType$LongConverter" />
	<class name="com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn" />
	<method signature="java.util.Map access$202(com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn,java.util.Map)" class="com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn" />
	<method signature="java.util.Map access$302(com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn,java.util.Map)" class="com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn" />
	<method signature="void &lt;init&gt;(com.sonicbase.query.impl.ExpressionImpl$1)" class="com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn" />
	<method signature="java.util.Map access$200(com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn)" class="com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn" />
	<method signature="java.util.Map access$300(com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn)" class="com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn" />
	<field name="records" class="com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn" />
	<field name="keys" class="com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn" />
	<class name="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator getDateComparator()" class="com.sonicbase.schema.DataType" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator getUtf8Comparator()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Incrementer getBigDecimalIncrementer()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter getDateConverter()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator getBigDecimalComparator()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter getShortConverter()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator getFloatComparator()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter getStringConverter()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator getBooleanComparator()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator access$2200()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter getLongConverter()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter getFloatConverter()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator getBlobComparator()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator access$2400()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Incrementer access$2500()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator access$2600()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Incrementer access$2700()" class="com.sonicbase.schema.DataType" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator access$2800()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter access$300()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter getBooleanConverter()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator getTimestampComparator()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator getShortComparator()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator getStringComparator()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator getLongComparator()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator access$4000()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator getByteArrayComparator()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator access$3500()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator access$3700()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter getByteConverter()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator access$3900()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter getUtf8Converter()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter getBigDecimalConverter()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter access$1500()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter access$3800()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter access$1700()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Incrementer getLongIncrementer()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter access$1100()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter access$1300()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter access$1000()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter getByteArrayConverter()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator access$3000()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Incrementer access$3100()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator access$3200()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator access$2300()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter getBlobConverter()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator getDoubleComparator()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter getIntConverter()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator access$2900()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter getTimeConverter()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator getTimeComparator()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Incrementer getIntIncrementer()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter getTimestampConverter()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator getByteComparator()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter access$2100()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter access$400()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator getIntComparator()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter getDoubleConverter()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator access$2000()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator access$3400()" class="com.sonicbase.schema.DataType" />
	<method signature="java.util.Comparator access$3600()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter access$1600()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter access$1800()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter access$3300()" class="com.sonicbase.schema.DataType" />
	<method signature="com.sonicbase.schema.DataType$Converter access$1400()" class="com.sonicbase.schema.DataType" />
	<field name="longComparator" class="com.sonicbase.schema.DataType" />
	<field name="stringComparator" class="com.sonicbase.schema.DataType" />
	<field name="byteArrayComparator" class="com.sonicbase.schema.DataType" />
	<field name="shortComparator" class="com.sonicbase.schema.DataType" />
	<field name="utf8Converter" class="com.sonicbase.schema.DataType" />
	<field name="timestampComparator" class="com.sonicbase.schema.DataType" />
	<field name="booleanConverter" class="com.sonicbase.schema.DataType" />
	<field name="intComparator" class="com.sonicbase.schema.DataType" />
	<field name="doubleComparator" class="com.sonicbase.schema.DataType" />
	<field name="floatConverter" class="com.sonicbase.schema.DataType" />
	<field name="timeComparator" class="com.sonicbase.schema.DataType" />
	<field name="longIncrementer" class="com.sonicbase.schema.DataType" />
	<field name="doubleConverter" class="com.sonicbase.schema.DataType" />
	<field name="dateComparator" class="com.sonicbase.schema.DataType" />
	<field name="shortConverter" class="com.sonicbase.schema.DataType" />
	<field name="dateConverter" class="com.sonicbase.schema.DataType" />
	<field name="bigDecimalIncrementer" class="com.sonicbase.schema.DataType" />
	<field name="types" class="com.sonicbase.schema.DataType" />
	<field name="utf8Comparator" class="com.sonicbase.schema.DataType" />
	<field name="floatComparator" class="com.sonicbase.schema.DataType" />
	<field name="byteArrayConverter" class="com.sonicbase.schema.DataType" />
	<field name="booleanComparator" class="com.sonicbase.schema.DataType" />
	<field name="blobComparator" class="com.sonicbase.schema.DataType" />
	<field name="byteConverter" class="com.sonicbase.schema.DataType" />
	<field name="intConverter" class="com.sonicbase.schema.DataType" />
	<field name="intIncrementer" class="com.sonicbase.schema.DataType" />
	<field name="timestampConverter" class="com.sonicbase.schema.DataType" />
	<field name="bigDecimalComparator" class="com.sonicbase.schema.DataType" />
	<field name="bigDecimalConverter" class="com.sonicbase.schema.DataType" />
	<field name="blobConverter" class="com.sonicbase.schema.DataType" />
	<field name="byteComparator" class="com.sonicbase.schema.DataType" />
	<field name="longConverter" class="com.sonicbase.schema.DataType" />
	<field name="timeConverter" class="com.sonicbase.schema.DataType" />
	<field name="stringConverter" class="com.sonicbase.schema.DataType" />
	<class name="com.sonicbase.query.impl.GroupByContext$GroupCounter" />
	<method signature="com.sonicbase.query.impl.Counter access$000(com.sonicbase.query.impl.GroupByContext$GroupCounter)" class="com.sonicbase.query.impl.GroupByContext$GroupCounter" />
	<method signature="com.sonicbase.query.impl.Counter getCounter()" class="com.sonicbase.query.impl.GroupByContext$GroupCounter" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.GroupByContext$GroupCounter" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.GroupByContext$GroupCounter" />
	<method signature="void setGroupValues(java.lang.Object[])" class="com.sonicbase.query.impl.GroupByContext$GroupCounter" />
	<method signature="com.sonicbase.query.impl.Counter access$002(com.sonicbase.query.impl.GroupByContext$GroupCounter,com.sonicbase.query.impl.Counter)" class="com.sonicbase.query.impl.GroupByContext$GroupCounter" />
	<method signature="void setCounter(com.sonicbase.query.impl.Counter)" class="com.sonicbase.query.impl.GroupByContext$GroupCounter" />
	<method signature="java.lang.Object[] access$600(com.sonicbase.query.impl.GroupByContext$GroupCounter)" class="com.sonicbase.query.impl.GroupByContext$GroupCounter" />
	<field name="groupValues" class="com.sonicbase.query.impl.GroupByContext$GroupCounter" />
	<field name="counter" class="com.sonicbase.query.impl.GroupByContext$GroupCounter" />
	<class name="com.sonicbase.server.DatabaseServer$Entry" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.DatabaseServer$Entry" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer,long,java.lang.Object[])" class="com.sonicbase.server.DatabaseServer$Entry" />
	<field name="this$0" class="com.sonicbase.server.DatabaseServer$Entry" />
	<field name="id" class="com.sonicbase.server.DatabaseServer$Entry" />
	<field name="latch" class="com.sonicbase.server.DatabaseServer$Entry" />
	<field name="key" class="com.sonicbase.server.DatabaseServer$Entry" />
	<class name="com.sonicbase.jdbcdriver.Parameter$ClobReader" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$ClobReader" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$ClobReader" />
	<method signature="void &lt;init&gt;(java.io.Reader)" class="com.sonicbase.jdbcdriver.Parameter$ClobReader" />
	<method signature="void &lt;init&gt;(java.io.Reader,long)" class="com.sonicbase.jdbcdriver.Parameter$ClobReader" />
	<field name="length" class="com.sonicbase.jdbcdriver.Parameter$ClobReader" />
	<class name="com.sonicbase.jdbcdriver.Parameter$AsciiStream" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$AsciiStream" />
	<method signature="void &lt;init&gt;(java.io.InputStream)" class="com.sonicbase.jdbcdriver.Parameter$AsciiStream" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$AsciiStream" />
	<method signature="void &lt;init&gt;(java.io.InputStream,long)" class="com.sonicbase.jdbcdriver.Parameter$AsciiStream" />
	<field name="length" class="com.sonicbase.jdbcdriver.Parameter$AsciiStream" />
	<class name="com.sonicbase.query.impl.Counter" />
	<method signature="java.lang.Double getMinDouble()" class="com.sonicbase.query.impl.Counter" />
	<method signature="void setDataType(com.sonicbase.schema.DataType$Type)" class="com.sonicbase.query.impl.Counter" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.Counter" />
	<method signature="void addLong(java.lang.Long)" class="com.sonicbase.query.impl.Counter" />
	<method signature="void setDestTypeToDouble()" class="com.sonicbase.query.impl.Counter" />
	<method signature="java.lang.Double getMaxDouble()" class="com.sonicbase.query.impl.Counter" />
	<method signature="void setMaxLong(java.lang.Long)" class="com.sonicbase.query.impl.Counter" />
	<method signature="java.lang.String getColumnName()" class="com.sonicbase.query.impl.Counter" />
	<method signature="void setColumn(int)" class="com.sonicbase.query.impl.Counter" />
	<method signature="void deserialize(byte[])" class="com.sonicbase.query.impl.Counter" />
	<method signature="java.lang.Double getAvgDouble()" class="com.sonicbase.query.impl.Counter" />
	<method signature="com.sonicbase.schema.DataType$Type getDataType()" class="com.sonicbase.query.impl.Counter" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.query.impl.Counter" />
	<method signature="void setTableName(java.lang.String)" class="com.sonicbase.query.impl.Counter" />
	<method signature="boolean isDestTypeLong()" class="com.sonicbase.query.impl.Counter" />
	<method signature="java.lang.Long getLongCount()" class="com.sonicbase.query.impl.Counter" />
	<method signature="boolean isDestTypeDouble()" class="com.sonicbase.query.impl.Counter" />
	<method signature="void setCount(java.lang.Long)" class="com.sonicbase.query.impl.Counter" />
	<method signature="void addDouble(java.lang.Double)" class="com.sonicbase.query.impl.Counter" />
	<method signature="java.lang.String getTableName()" class="com.sonicbase.query.impl.Counter" />
	<method signature="java.lang.Long getMinLong()" class="com.sonicbase.query.impl.Counter" />
	<method signature="long getCount()" class="com.sonicbase.query.impl.Counter" />
	<method signature="int getColumnOffset()" class="com.sonicbase.query.impl.Counter" />
	<method signature="java.lang.Long getMaxLong()" class="com.sonicbase.query.impl.Counter" />
	<method signature="java.lang.Double getAvgLong()" class="com.sonicbase.query.impl.Counter" />
	<method signature="void setMinLong(java.lang.Long)" class="com.sonicbase.query.impl.Counter" />
	<method signature="void setMaxDouble(java.lang.Double)" class="com.sonicbase.query.impl.Counter" />
	<method signature="void setMinDouble(double)" class="com.sonicbase.query.impl.Counter" />
	<method signature="void setColumnName(java.lang.String)" class="com.sonicbase.query.impl.Counter" />
	<method signature="void add(java.lang.Object[])" class="com.sonicbase.query.impl.Counter" />
	<method signature="java.lang.Object getDoubleCount()" class="com.sonicbase.query.impl.Counter" />
	<method signature="byte[] serialize()" class="com.sonicbase.query.impl.Counter" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.query.impl.Counter" />
	<method signature="void setDestTypeToLong()" class="com.sonicbase.query.impl.Counter" />
	<field name="longCount" class="com.sonicbase.query.impl.Counter" />
	<field name="dataType" class="com.sonicbase.query.impl.Counter" />
	<field name="column" class="com.sonicbase.query.impl.Counter" />
	<field name="doubleCount" class="com.sonicbase.query.impl.Counter" />
	<field name="minLong" class="com.sonicbase.query.impl.Counter" />
	<field name="maxDouble" class="com.sonicbase.query.impl.Counter" />
	<field name="count" class="com.sonicbase.query.impl.Counter" />
	<field name="minDouble" class="com.sonicbase.query.impl.Counter" />
	<field name="maxLong" class="com.sonicbase.query.impl.Counter" />
	<field name="tableName" class="com.sonicbase.query.impl.Counter" />
	<field name="columnName" class="com.sonicbase.query.impl.Counter" />
	<class name="com.sonicbase.query.impl.InsertStatementImpl" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient)" class="com.sonicbase.query.impl.InsertStatementImpl" />
	<method signature="void addValue(java.lang.String,java.lang.Object)" class="com.sonicbase.query.impl.InsertStatementImpl" />
	<method signature="java.lang.String getTableName()" class="com.sonicbase.query.impl.InsertStatementImpl" />
	<method signature="java.util.List getColumns()" class="com.sonicbase.query.impl.InsertStatementImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.InsertStatementImpl" />
	<method signature="void setTableName(java.lang.String)" class="com.sonicbase.query.impl.InsertStatementImpl" />
	<method signature="java.lang.Object execute(java.lang.String,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.InsertStatementImpl" />
	<method signature="void setValues(java.util.List)" class="com.sonicbase.query.impl.InsertStatementImpl" />
	<method signature="java.util.List getValues()" class="com.sonicbase.query.impl.InsertStatementImpl" />
	<field name="columnNames" class="com.sonicbase.query.impl.InsertStatementImpl" />
	<field name="values" class="com.sonicbase.query.impl.InsertStatementImpl" />
	<field name="client" class="com.sonicbase.query.impl.InsertStatementImpl" />
	<field name="tableName" class="com.sonicbase.query.impl.InsertStatementImpl" />
	<class name="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject deleteIndexEntryByKey(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.UpdateManager" />
	<method signature="void doActualInsertKeyWithRecord(byte[],java.lang.Object[],com.sonicbase.index.Index,java.lang.String,java.lang.String,boolean)" class="com.sonicbase.server.UpdateManager" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.UpdateManager" />
	<method signature="void doInsertKeys(java.util.List,com.sonicbase.index.Index,java.lang.String,com.sonicbase.schema.IndexSchema)" class="com.sonicbase.server.UpdateManager" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.DatabaseServer)" class="com.sonicbase.server.UpdateManager" />
	<method signature="void doInsertKey(long,byte[],java.lang.Object[],com.sonicbase.index.Index,java.lang.String,java.lang.String,boolean)" class="com.sonicbase.server.UpdateManager" />
	<method signature="void doRemoveIndexEntryByKey(java.lang.String,com.sonicbase.schema.TableSchema,java.lang.String,java.lang.Object[],java.lang.String,java.lang.Object[])" class="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject commit(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject doInsertIndexEntryByKey(com.sonicbase.common.ComObject,boolean,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicLong,boolean)" class="com.sonicbase.server.UpdateManager" />
	<method signature="void doInsertKey(java.lang.Object[],byte[],java.lang.String,com.sonicbase.index.Index,com.sonicbase.schema.IndexSchema)" class="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject doPopulateIndex(com.sonicbase.common.ComObject)" class="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject updateRecord(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.UpdateManager" />
	<method signature="void doActualInsertKey(java.lang.Object[],byte[],java.lang.String,com.sonicbase.index.Index,com.sonicbase.schema.IndexSchema)" class="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject truncateTable(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject insertIndexEntryByKeyWithRecord(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject doInsertIndexEntryByKeyWithRecord(com.sonicbase.common.ComObject,long,long,long,boolean,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicBoolean,boolean)" class="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject insertIndexEntryByKey(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject batchInsertIndexEntryByKeyWithRecord(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject rollback(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject populateIndex(com.sonicbase.common.ComObject)" class="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject batchInsertIndexEntryByKey(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject doUpdateRecord(com.sonicbase.common.ComObject,boolean,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicLong,boolean)" class="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject doDeleteIndexEntryByKey(com.sonicbase.common.ComObject,boolean,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicLong,boolean)" class="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject deleteRecord(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.UpdateManager" />
	<method signature="com.sonicbase.common.ComObject deleteIndexEntry(com.sonicbase.common.ComObject,boolean)" class="com.sonicbase.server.UpdateManager" />
	<field name="server" class="com.sonicbase.server.UpdateManager" />
	<field name="logger" class="com.sonicbase.server.UpdateManager" />
	<field name="insertCount" class="com.sonicbase.server.UpdateManager" />
	<field name="CURR_VER_STR" class="com.sonicbase.server.UpdateManager" />
	<class name="com.sonicbase.query.impl.ExpressionImpl$4" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.ExpressionImpl$4" />
	<field name="$SwitchMap$com$sonicbase$query$impl$ExpressionImpl$Type" class="com.sonicbase.query.impl.ExpressionImpl$4" />
	<class name="com.sonicbase.schema.DataType$Converter" />
	<method signature="java.lang.Object convert(java.lang.Object)" class="com.sonicbase.schema.DataType$Converter" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.DataType$Converter" />
	<class name="com.sonicbase.bench.TestServers" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.bench.TestServers" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.bench.TestServers" />
	<method signature="void main(java.lang.String[])" class="com.sonicbase.bench.TestServers" />
	<class name="com.sonicbase.common.QueryPlan" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.common.QueryPlan" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.common.QueryPlan" />
	<field name="expression" class="com.sonicbase.common.QueryPlan" />
	<class name="com.sonicbase.index.Repartitioner$8$1" />
	<method signature="void run()" class="com.sonicbase.index.Repartitioner$8$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.index.Repartitioner$8,java.util.List)" class="com.sonicbase.index.Repartitioner$8$1" />
	<field name="this$1" class="com.sonicbase.index.Repartitioner$8$1" />
	<field name="val$toProcess" class="com.sonicbase.index.Repartitioner$8$1" />
	<class name="com.sonicbase.query.impl.DeleteStatementImpl" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient)" class="com.sonicbase.query.impl.DeleteStatementImpl" />
	<method signature="java.lang.String getTableName()" class="com.sonicbase.query.impl.DeleteStatementImpl" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.query.impl.DeleteStatementImpl" />
	<method signature="void setTableName(java.lang.String)" class="com.sonicbase.query.impl.DeleteStatementImpl" />
	<method signature="void setWhereClause(com.sonicbase.query.Expression)" class="com.sonicbase.query.impl.DeleteStatementImpl" />
	<method signature="java.lang.Object execute(java.lang.String,com.sonicbase.query.impl.SelectStatementImpl$Explain)" class="com.sonicbase.query.impl.DeleteStatementImpl" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.query.impl.DeleteStatementImpl" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl getExpression()" class="com.sonicbase.query.impl.DeleteStatementImpl" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.query.impl.DeleteStatementImpl" />
	<field name="recordCache" class="com.sonicbase.query.impl.DeleteStatementImpl" />
	<field name="expression" class="com.sonicbase.query.impl.DeleteStatementImpl" />
	<field name="client" class="com.sonicbase.query.impl.DeleteStatementImpl" />
	<field name="tableName" class="com.sonicbase.query.impl.DeleteStatementImpl" />
	<class name="com.sonicbase.schema.Schema" />
	<method signature="void addTable(com.sonicbase.schema.TableSchema)" class="com.sonicbase.schema.Schema" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.schema.Schema" />
	<method signature="java.util.Map getTablesById()" class="com.sonicbase.schema.Schema" />
	<method signature="java.util.Map getTables()" class="com.sonicbase.schema.Schema" />
	<method signature="void serialize(java.io.DataOutputStream)" class="com.sonicbase.schema.Schema" />
	<method signature="java.lang.Object getSchemaLock()" class="com.sonicbase.schema.Schema" />
	<method signature="void updateTable(com.sonicbase.schema.TableSchema)" class="com.sonicbase.schema.Schema" />
	<method signature="com.sonicbase.schema.RecordIndexPartition[] getRecordIndexPartitions()" class="com.sonicbase.schema.Schema" />
	<method signature="void setTables(java.util.Map)" class="com.sonicbase.schema.Schema" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.schema.Schema" />
	<method signature="void reshardRecordIndex(com.sonicbase.schema.RecordIndexPartition[])" class="com.sonicbase.schema.Schema" />
	<method signature="void deleteLastRecordIndex()" class="com.sonicbase.schema.Schema" />
	<method signature="void deserialize(java.io.DataInputStream)" class="com.sonicbase.schema.Schema" />
	<method signature="void initRecordsById(int,int)" class="com.sonicbase.schema.Schema" />
	<field name="tablesById" class="com.sonicbase.schema.Schema" />
	<field name="tables" class="com.sonicbase.schema.Schema" />
	<field name="lastRecordIndexPartitions" class="com.sonicbase.schema.Schema" />
	<field name="schemaMutex" class="com.sonicbase.schema.Schema" />
	<field name="currRecordIndexPartitions" class="com.sonicbase.schema.Schema" />
	<class name="com.sonicbase.query.impl.DiskBasedResultSet$2" />
	<method signature="void &lt;init&gt;(com.sonicbase.query.impl.DiskBasedResultSet,int[],int[],boolean[],java.util.Comparator[])" class="com.sonicbase.query.impl.DiskBasedResultSet$2" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.query.impl.DiskBasedResultSet$2" />
	<method signature="int compare(com.sonicbase.query.impl.DiskBasedResultSet$MergeRow,com.sonicbase.query.impl.DiskBasedResultSet$MergeRow)" class="com.sonicbase.query.impl.DiskBasedResultSet$2" />
	<field name="val$tableOffsets" class="com.sonicbase.query.impl.DiskBasedResultSet$2" />
	<field name="val$fieldOffsets" class="com.sonicbase.query.impl.DiskBasedResultSet$2" />
	<field name="val$ascendingFlags" class="com.sonicbase.query.impl.DiskBasedResultSet$2" />
	<field name="this$0" class="com.sonicbase.query.impl.DiskBasedResultSet$2" />
	<field name="val$comparators" class="com.sonicbase.query.impl.DiskBasedResultSet$2" />
	<class name="com.sonicbase.socket.DatabaseSocketClient$Connection" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.socket.DatabaseSocketClient$Connection" />
	<method signature="java.nio.channels.SocketChannel access$1200(com.sonicbase.socket.DatabaseSocketClient$Connection)" class="com.sonicbase.socket.DatabaseSocketClient$Connection" />
	<method signature="void &lt;init&gt;(java.lang.String,int)" class="com.sonicbase.socket.DatabaseSocketClient$Connection" />
	<field name="sock" class="com.sonicbase.socket.DatabaseSocketClient$Connection" />
	<field name="count_called" class="com.sonicbase.socket.DatabaseSocketClient$Connection" />
	<class name="com.sonicbase.index.Repartitioner$GlobalIndexCounts" />
	<method signature="java.util.concurrent.ConcurrentHashMap access$2200(com.sonicbase.index.Repartitioner$GlobalIndexCounts)" class="com.sonicbase.index.Repartitioner$GlobalIndexCounts" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.index.Repartitioner$GlobalIndexCounts" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.index.Repartitioner$GlobalIndexCounts" />
	<method signature="java.util.concurrent.ConcurrentHashMap getTables()" class="com.sonicbase.index.Repartitioner$GlobalIndexCounts" />
	<field name="tables" class="com.sonicbase.index.Repartitioner$GlobalIndexCounts" />
	<class name="com.sonicbase.query.impl.DiskBasedResultSet$1" />
	<method signature="void &lt;init&gt;(com.sonicbase.query.impl.DiskBasedResultSet,int[],int[],boolean[],java.util.Comparator[])" class="com.sonicbase.query.impl.DiskBasedResultSet$1" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.sonicbase.query.impl.DiskBasedResultSet$1" />
	<method signature="int compare(com.sonicbase.common.Record[],com.sonicbase.common.Record[])" class="com.sonicbase.query.impl.DiskBasedResultSet$1" />
	<field name="val$tableOffsets" class="com.sonicbase.query.impl.DiskBasedResultSet$1" />
	<field name="val$fieldOffsets" class="com.sonicbase.query.impl.DiskBasedResultSet$1" />
	<field name="val$ascendingFlags" class="com.sonicbase.query.impl.DiskBasedResultSet$1" />
	<field name="this$0" class="com.sonicbase.query.impl.DiskBasedResultSet$1" />
	<field name="val$comparators" class="com.sonicbase.query.impl.DiskBasedResultSet$1" />
	<class name="com.sonicbase.jdbcdriver.Parameter$Clob" />
	<method signature="int getSqlType()" class="com.sonicbase.jdbcdriver.Parameter$Clob" />
	<method signature="com.sonicbase.jdbcdriver.Parameter$ParameterBase deserialize(java.io.DataInputStream)" class="com.sonicbase.jdbcdriver.Parameter$Clob" />
	<method signature="void &lt;init&gt;(java.sql.Clob)" class="com.sonicbase.jdbcdriver.Parameter$Clob" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.jdbcdriver.Parameter$Clob" />
	<method signature="void serialize(java.io.DataOutputStream,boolean)" class="com.sonicbase.jdbcdriver.Parameter$Clob" />
	<method signature="void &lt;init&gt;(com.sonicbase.jdbcdriver.Parameter$ParameterBase)" class="com.sonicbase.jdbcdriver.Parameter$Clob" />
	<method signature="void &lt;init&gt;(byte[])" class="com.sonicbase.jdbcdriver.Parameter$Clob" />
	<class name="com.sonicbase.index.Repartitioner$TableIndexCounts" />
	<method signature="java.util.concurrent.ConcurrentHashMap access$2300(com.sonicbase.index.Repartitioner$TableIndexCounts)" class="com.sonicbase.index.Repartitioner$TableIndexCounts" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.index.Repartitioner$TableIndexCounts" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.index.Repartitioner$TableIndexCounts" />
	<method signature="java.util.concurrent.ConcurrentHashMap getIndices()" class="com.sonicbase.index.Repartitioner$TableIndexCounts" />
	<field name="indices" class="com.sonicbase.index.Repartitioner$TableIndexCounts" />
	<class name="com.sonicbase.socket.DeadServerException" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.socket.DeadServerException" />
	<method signature="void &lt;init&gt;()" class="com.sonicbase.socket.DeadServerException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="com.sonicbase.socket.DeadServerException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="com.sonicbase.socket.DeadServerException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.sonicbase.socket.DeadServerException" />
	<class name="com.sonicbase.query.impl.ExpressionImpl$1" />
	<method signature="void &lt;init&gt;(java.lang.String,com.sonicbase.client.DatabaseClient,boolean,int,com.sonicbase.schema.TableSchema,java.util.concurrent.atomic.AtomicReference,java.util.List,java.util.Map$Entry,com.sonicbase.query.impl.ExpressionImpl$RecordCache,long)" class="com.sonicbase.query.impl.ExpressionImpl$1" />
	<method signature="java.lang.Object call()" class="com.sonicbase.query.impl.ExpressionImpl$1" />
	<field name="val$entry" class="com.sonicbase.query.impl.ExpressionImpl$1" />
	<field name="val$viewVersion" class="com.sonicbase.query.impl.ExpressionImpl$1" />
	<field name="val$forceSelectOnServer" class="com.sonicbase.query.impl.ExpressionImpl$1" />
	<field name="val$selectColumns" class="com.sonicbase.query.impl.ExpressionImpl$1" />
	<field name="val$client" class="com.sonicbase.query.impl.ExpressionImpl$1" />
	<field name="val$dbName" class="com.sonicbase.query.impl.ExpressionImpl$1" />
	<field name="val$pageSize" class="com.sonicbase.query.impl.ExpressionImpl$1" />
	<field name="val$tableSchema" class="com.sonicbase.query.impl.ExpressionImpl$1" />
	<field name="val$indexSchema" class="com.sonicbase.query.impl.ExpressionImpl$1" />
	<field name="val$recordCache" class="com.sonicbase.query.impl.ExpressionImpl$1" />
	<class name="com.sonicbase.server.LogManager$LogSource" />
	<method signature="com.sonicbase.research.socket.NettyServer$Request readRequest()" class="com.sonicbase.server.LogManager$LogSource" />
	<method signature="void readNext()" class="com.sonicbase.server.LogManager$LogSource" />
	<method signature="void &lt;init&gt;(com.sonicbase.server.LogManager,java.io.File)" class="com.sonicbase.server.LogManager$LogSource" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.server.LogManager$LogSource" />
	<method signature="long getTotalBytes()" class="com.sonicbase.server.LogManager$LogSource" />
	<method signature="void close()" class="com.sonicbase.server.LogManager$LogSource" />
	<method signature="long getBytesRead()" class="com.sonicbase.server.LogManager$LogSource" />
	<method signature="boolean take()" class="com.sonicbase.server.LogManager$LogSource" />
	<field name="sequence0" class="com.sonicbase.server.LogManager$LogSource" />
	<field name="filename" class="com.sonicbase.server.LogManager$LogSource" />
	<field name="offset" class="com.sonicbase.server.LogManager$LogSource" />
	<field name="in" class="com.sonicbase.server.LogManager$LogSource" />
	<field name="this$0" class="com.sonicbase.server.LogManager$LogSource" />
	<field name="totalBytes" class="com.sonicbase.server.LogManager$LogSource" />
	<field name="buffer" class="com.sonicbase.server.LogManager$LogSource" />
	<field name="requests" class="com.sonicbase.server.LogManager$LogSource" />
	<field name="counterStream" class="com.sonicbase.server.LogManager$LogSource" />
	<field name="AtomicInteger" class="com.sonicbase.server.LogManager$LogSource" />
	<field name="sequence1" class="com.sonicbase.server.LogManager$LogSource" />
	<field name="command" class="com.sonicbase.server.LogManager$LogSource" />
	<class name="com.sonicbase.query.impl.ExpressionImpl$2" />
	<method signature="void &lt;init&gt;(com.sonicbase.schema.TableSchema,java.util.Map$Entry,com.sonicbase.query.BinaryExpression$Operator,java.util.List,java.util.List,java.lang.String,com.sonicbase.common.DatabaseCommon,int,com.sonicbase.client.DatabaseClient,int,long,boolean,com.sonicbase.query.impl.ExpressionImpl$RecordCache,long)" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<method signature="java.lang.Object call()" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<method signature="com.sonicbase.query.impl.ExpressionImpl$BatchLookupReturn call()" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<field name="val$viewVersion" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<field name="val$operator" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<field name="val$common" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<field name="val$shard" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<field name="val$previousSchemaVersion" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<field name="val$recordCache" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<field name="val$forceSelectOnServer" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<field name="val$client" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<field name="val$columns" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<field name="val$srcValues" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<field name="val$dbName" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<field name="val$tableSchema" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<field name="val$indexSchema" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<field name="val$count" class="com.sonicbase.query.impl.ExpressionImpl$2" />
	<class name="com.sonicbase.research.socket.ChangeRequest" />
	<method signature="int getOps()" class="com.sonicbase.research.socket.ChangeRequest" />
	<method signature="int getType()" class="com.sonicbase.research.socket.ChangeRequest" />
	<method signature="void setType(int)" class="com.sonicbase.research.socket.ChangeRequest" />
	<method signature="void &lt;init&gt;(java.nio.channels.SocketChannel,int,int)" class="com.sonicbase.research.socket.ChangeRequest" />
	<method signature="void &lt;clinit&gt;()" class="com.sonicbase.research.socket.ChangeRequest" />
	<method signature="void setSocket(java.nio.channels.SocketChannel)" class="com.sonicbase.research.socket.ChangeRequest" />
	<method signature="java.nio.channels.SocketChannel getSocket()" class="com.sonicbase.research.socket.ChangeRequest" />
	<method signature="void setOps(int)" class="com.sonicbase.research.socket.ChangeRequest" />
	<field name="REGISTER" class="com.sonicbase.research.socket.ChangeRequest" />
	<field name="ops" class="com.sonicbase.research.socket.ChangeRequest" />
	<field name="CHANGEOPS" class="com.sonicbase.research.socket.ChangeRequest" />
	<field name="socket" class="com.sonicbase.research.socket.ChangeRequest" />
	<field name="type" class="com.sonicbase.research.socket.ChangeRequest" />
	<class name="com.sonicbase.query.impl.ExpressionImpl$3" />
	<method signature="void &lt;init&gt;(com.sonicbase.client.DatabaseClient)" class="com.sonicbase.query.impl.ExpressionImpl$3" />
	<method signature="void run()" class="com.sonicbase.query.impl.ExpressionImpl$3" />
	<field name="val$client" class="com.sonicbase.query.impl.ExpressionImpl$3" />
</entrypoints>

<!-- WARNING:Unresolved external dependency: io.netty.channel.ChannelInboundHandlerAdapter not found! -->
<!-- WARNING:Unresolved external dependency: io.netty.channel.ChannelInboundHandlerAdapter not found! -->
<!-- WARNING:Unresolved external dependency: io.netty.channel.ChannelInitializer not found! -->
<!-- WARNING:Unresolved external dependency: org.quartz.Job not found! -->
<!-- WARNING:Unresolved external dependency: io.netty.channel.ChannelInitializer not found! -->
<!-- writing shrinked /Users/lowryda/Dropbox/git/sonicbase/db/target/sonicbase-core-unobfuscated-1.2.1.jar to /Users/lowryda/Dropbox/git/sonicbase/db/target/yguard_temp_3421837091788638393.jar. -->
<inOutPair in="/Users/lowryda/Dropbox/git/sonicbase/db/target/sonicbase-core-unobfuscated-1.2.1.jar" out="/Users/lowryda/Dropbox/git/sonicbase/db/target/yguard_temp_3421837091788638393.jar">
	<removed-code>
	</removed-code>
	<removed-resources>
	</removed-resources>
<!-- 	shrinked /Users/lowryda/Dropbox/git/sonicbase/db/target/sonicbase-core-unobfuscated-1.2.1.jar BY 21.72%. -->
<!-- 	size before: 804 KB, size after: 629 KB. -->
<!-- 	removed 0 classes, 0 methods, 0 fields, 0 resources. -->
<!-- 	344 classes remaining of 344 total. -->
</inOutPair>
<!-- WARNING:Not all dependencies could be resolved. Please see the logfile for details. -->
</yshrink>

