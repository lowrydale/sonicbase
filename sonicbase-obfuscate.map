com.sonicbase.bench.TestConcurrentSkipListMap -> com.sonicbase.a.a:
    15:15:void <init>() -> <init>
    17:54:void main(java.lang.String[]) -> a
com.sonicbase.bench.TestConcurrentSkipListMap$1 -> com.sonicbase.a.a$1:
    17:17:void <init>() -> <init>
    20:29:int compare(java.lang.Object[],java.lang.Object[]) -> a
    17:17:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.bench.TestConcurrentSkipListMap$2 -> com.sonicbase.a.a$2:
    java.util.Random val$rand -> a
    java.util.concurrent.ConcurrentSkipListMap val$map -> b
    int val$offset -> c
    long val$begin -> d
    40:40:void <init>(java.util.Random,java.util.concurrent.ConcurrentSkipListMap,int,long) -> <init>
    43:49:void run() -> run
com.sonicbase.bench.TestDatabaseAdvancedToDo -> com.sonicbase.a.b:
    java.sql.Connection conn -> b
    int recordCount -> c
    java.util.List ids -> a
    29:33:void <init>() -> <init>
    37:165:void beforeClass() -> a
    176:177:void testAlias3() -> b
    186:187:void testAlterTable() -> c
    196:197:void testInsertFromSelect() -> d
    206:207:void testCreateTableLike() -> e
    216:217:void testCopyTable() -> f
    226:227:void testChangeFieldDataType() -> g
    236:237:void testInsertColumn() -> h
    256:257:void testDropIndex() -> i
    268:269:void testToDate() -> j
    281:282:void testHaving() -> k
    297:298:void testCase() -> l
    307:308:void testDropTable() -> m
    321:322:void testUnion() -> n
com.sonicbase.bench.TestDatabaseAdvancedToDo$1 -> com.sonicbase.a.b$1:
    com.sonicbase.server.DatabaseServer[] val$dbServers -> a
    int val$shard -> b
    com.fasterxml.jackson.databind.node.ObjectNode val$config -> c
    com.sonicbase.bench.TestDatabaseAdvancedToDo this$0 -> d
    53:53:void <init>(com.sonicbase.bench.TestDatabaseAdvancedToDo,com.sonicbase.server.DatabaseServer[],int,com.fasterxml.jackson.databind.node.ObjectNode) -> <init>
    56:62:java.lang.Object call() -> call
com.sonicbase.bench.TestMisc -> com.sonicbase.a.c:
    10:10:void <init>() -> <init>
    14:20:void test() -> a
com.sonicbase.bench.TestRebalance -> com.sonicbase.a.d:
    25:25:void <init>() -> <init>
    29:147:void testBasics() -> a
com.sonicbase.bench.TestRebalance$1 -> com.sonicbase.a.d$1:
    com.sonicbase.server.DatabaseServer[] val$dbServers -> a
    int val$shard -> b
    com.fasterxml.jackson.databind.node.ObjectNode val$config -> c
    com.sonicbase.bench.TestRebalance this$0 -> d
    41:41:void <init>(com.sonicbase.bench.TestRebalance,com.sonicbase.server.DatabaseServer[],int,com.fasterxml.jackson.databind.node.ObjectNode) -> <init>
    44:49:java.lang.Object call() -> call
com.sonicbase.bench.TestServers -> com.sonicbase.a.e:
    12:12:void <init>() -> <init>
    17:81:void main(java.lang.String[]) -> a
com.sonicbase.bench.TestServers$1 -> com.sonicbase.a.e$1:
    com.sonicbase.server.NettyServer[] val$dbServers -> a
    25:25:void <init>(com.sonicbase.server.NettyServer[]) -> <init>
    29:36:java.lang.Object call() -> call
com.sonicbase.bench.TestServers$2 -> com.sonicbase.a.e$2:
    int val$shard -> a
    com.sonicbase.server.NettyServer[] val$dbServers -> b
    47:47:void <init>(int,com.sonicbase.server.NettyServer[]) -> <init>
    50:67:java.lang.Object call() -> call
com.sonicbase.bench.TestTransactions -> com.sonicbase.a.f:
    java.sql.Connection conn -> a
    java.sql.Connection conn2 -> b
    27:27:void <init>() -> <init>
    34:139:void beforeClass() -> a
    144:173:void test() -> b
    178:231:void testConcurrent() -> c
    237:309:void testConcurrent2() -> d
    314:410:void testConcurrent3() -> e
    415:510:void testConcurrent4() -> f
    516:588:void testConcurrentSecondaryKeys() -> g
    27:27:java.sql.Connection access$000(com.sonicbase.bench.TestTransactions) -> a
com.sonicbase.bench.TestTransactions$1 -> com.sonicbase.a.f$1:
    com.sonicbase.server.DatabaseServer[] val$dbServers -> a
    int val$shard -> b
    com.fasterxml.jackson.databind.node.ObjectNode val$config -> c
    com.sonicbase.bench.TestTransactions this$0 -> d
    50:50:void <init>(com.sonicbase.bench.TestTransactions,com.sonicbase.server.DatabaseServer[],int,com.fasterxml.jackson.databind.node.ObjectNode) -> <init>
    53:59:java.lang.Object call() -> call
com.sonicbase.bench.TestTransactions$2 -> com.sonicbase.a.f$2:
    java.util.concurrent.CountDownLatch val$latch -> a
    com.sonicbase.bench.TestTransactions this$0 -> b
    194:194:void <init>(com.sonicbase.bench.TestTransactions,java.util.concurrent.CountDownLatch) -> <init>
    198:211:void run() -> run
com.sonicbase.bench.TestTransactions$3 -> com.sonicbase.a.f$3:
    java.util.concurrent.atomic.AtomicBoolean val$updated -> a
    java.util.concurrent.CountDownLatch val$latch -> b
    com.sonicbase.bench.TestTransactions this$0 -> c
    266:266:void <init>(com.sonicbase.bench.TestTransactions,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.CountDownLatch) -> <init>
    271:287:void run() -> run
com.sonicbase.bench.TestTransactions$4 -> com.sonicbase.a.f$4:
    java.util.concurrent.CountDownLatch val$latch -> a
    java.util.concurrent.CountDownLatch val$latch2 -> b
    java.util.concurrent.atomic.AtomicBoolean val$updated -> c
    com.sonicbase.bench.TestTransactions this$0 -> d
    347:347:void <init>(com.sonicbase.bench.TestTransactions,java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch,java.util.concurrent.atomic.AtomicBoolean) -> <init>
    352:383:void run() -> run
com.sonicbase.bench.TestTransactions$5 -> com.sonicbase.a.f$5:
    java.util.concurrent.CountDownLatch val$latch -> a
    java.util.concurrent.CountDownLatch val$latch2 -> b
    com.sonicbase.bench.TestTransactions this$0 -> c
    447:447:void <init>(com.sonicbase.bench.TestTransactions,java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch) -> <init>
    451:483:void run() -> run
com.sonicbase.bench.TestTransactions$6 -> com.sonicbase.a.f$6:
    java.util.concurrent.atomic.AtomicBoolean val$updated -> a
    java.util.concurrent.CountDownLatch val$latch -> b
    com.sonicbase.bench.TestTransactions this$0 -> c
    545:545:void <init>(com.sonicbase.bench.TestTransactions,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.CountDownLatch) -> <init>
    550:566:void run() -> run
com.sonicbase.common.AWSClient -> com.sonicbase.b.a:
    DatabaseClient client -> a
    Logger logger -> b
    java.io.File installDir -> c
    java.util.concurrent.ThreadPoolExecutor executor -> d
    29:36:void <init>(DatabaseClient) -> <init>
    40:56:com.amazonaws.services.s3.transfer.TransferManager getTransferManager() -> a
    62:72:com.fasterxml.jackson.databind.node.ObjectNode getConfig() -> e
    77:82:java.io.File getInstallDir() -> b
    86:101:com.amazonaws.services.s3.AmazonS3 getS3Client() -> c
    106:125:com.amazonaws.services.sqs.AmazonSQSClient getSQSClient() -> d
    130:150:void deleteDirectory(java.lang.String,java.lang.String) -> a
    157:208:void uploadDirectory(java.lang.String,java.lang.String,java.lang.String,java.io.File) -> a
    211:231:void uploadFile(java.lang.String,java.lang.String,java.lang.String,java.io.File) -> b
    234:247:void downloadFile(java.lang.String,java.lang.String,java.lang.String,java.io.File) -> c
    250:263:void downloadFile(java.lang.String,java.lang.String,java.io.File) -> a
    266:277:byte[] downloadBytes(java.lang.String,java.lang.String) -> b
    282:371:void downloadDirectory(java.lang.String,java.lang.String,java.lang.String,java.io.File) -> d
    374:413:java.util.List listDirectSubdirectories(java.lang.String,java.lang.String) -> c
    23:23:Logger access$000(com.sonicbase.common.AWSClient) -> a
com.sonicbase.common.AWSClient$1 -> com.sonicbase.b.a$1:
    java.lang.String val$bucket -> a
    java.lang.String val$prefix -> b
    java.lang.String val$path -> c
    java.io.File val$file -> d
    com.sonicbase.common.AWSClient this$0 -> e
    165:165:void <init>(com.sonicbase.common.AWSClient,java.lang.String,java.lang.String,java.lang.String,java.io.File) -> <init>
    168:186:java.lang.Object call() -> call
com.sonicbase.common.AWSClient$2 -> com.sonicbase.b.a$2:
    java.lang.String val$bucket -> a
    java.lang.String val$finalKey -> b
    java.io.File val$destFile -> c
    com.sonicbase.common.AWSClient this$0 -> d
    304:304:void <init>(com.sonicbase.common.AWSClient,java.lang.String,java.lang.String,java.io.File) -> <init>
    308:325:void run() -> run
com.sonicbase.index.Index -> com.sonicbase.c.a:
    org.apache.log4j.Logger logger -> b
    boolean ordered -> c
    java.util.Comparator[] comparators -> d
    java.lang.Object[] mutexes -> e
    boolean fastUtil -> f
    java.util.concurrent.atomic.AtomicLong count -> g
    it.unimi.dsi.fastutil.longs.Long2ObjectAVLTreeMap longIndex -> h
    it.unimi.dsi.fastutil.objects.Object2ObjectAVLTreeMap stringIndex -> i
    it.unimi.dsi.fastutil.objects.Object2ObjectAVLTreeMap objectIndex -> j
    java.util.concurrent.ConcurrentSkipListMap longSkipIndex -> k
    java.util.concurrent.ConcurrentSkipListMap stringSkipIndex -> l
    java.util.concurrent.ConcurrentSkipListMap objectSkipIndex -> m
    java.util.concurrent.atomic.AtomicLong size -> n
    java.util.Comparator utf8Comparator -> o
    java.util.Comparator comparator -> a
    35:35:java.util.Comparator[] getComparators() -> a
    39:39:boolean isOrdered() -> b
    25:225:void <init>(TableSchema,java.lang.String,java.util.Comparator[]) -> <init>
    228:240:int hashCode(java.lang.Object[]) -> a
    244:244:java.lang.Object getMutex(java.lang.Object[]) -> b
    248:273:void clear() -> c
    276:312:boolean iterate(com.sonicbase.index.Index$Visitor) -> a
    316:346:java.lang.Object get(java.lang.Object[]) -> c
    350:378:java.lang.Object put(java.lang.Object[],java.lang.Object) -> a
    382:411:java.lang.Object remove(java.lang.Object[]) -> d
    415:443:java.lang.Object unsafePutIfAbsent(java.lang.Object[],java.lang.Object) -> b
    447:447:long getCount() -> d
    451:452:void addAndGetCount(int) -> a
    455:456:void setCount(int) -> b
    489:593:java.util.Map$Entry ceilingEntry(java.lang.Object[]) -> e
    598:764:java.util.List equalsEntries(java.lang.Object[]) -> f
    769:870:java.util.Map$Entry floorEntry(java.lang.Object[]) -> g
    874:971:java.util.Map$Entry[] lowerEntries(java.lang.Object[],java.util.Map$Entry[]) -> a
    975:1030:java.util.Map$Entry lowerEntry(java.lang.Object[]) -> h
    1035:1171:java.util.Map$Entry[] higherEntries(java.lang.Object[],java.util.Map$Entry[]) -> b
    1177:1307:java.util.Map$Entry higherEntry(java.lang.Object[]) -> i
    1312:1337:java.lang.Iterable values() -> e
    1341:1365:long getSize(java.lang.Object[],java.lang.Object[]) -> a
    1369:1369:long size() -> f
    1373:1428:java.util.List getKeyAtOffset(java.util.List,java.lang.Object[],java.lang.Object[]) -> a
    1433:1564:boolean visitTailMap(java.lang.Object[],com.sonicbase.index.Index$Visitor) -> a
    1569:1684:boolean visitHeadMap(java.lang.Object[],com.sonicbase.index.Index$Visitor) -> b
    1689:1742:java.util.Map$Entry lastEntry() -> g
    1747:1799:java.util.Map$Entry firstEntry() -> h
    23:53:void <clinit>() -> <clinit>
com.sonicbase.index.Index$1 -> com.sonicbase.c.a$1:
    53:53:void <init>() -> <init>
    56:81:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.index.Index$2 -> com.sonicbase.c.a$2:
    java.util.Comparator[] val$comparators -> a
    com.sonicbase.index.Index this$0 -> b
    91:91:void <init>(com.sonicbase.index.Index,java.util.Comparator[]) -> <init>
    94:106:int compare(java.lang.Object[],java.lang.Object[]) -> a
    91:91:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.index.Index$3 -> com.sonicbase.c.a$3:
    com.sonicbase.index.Index this$0 -> a
    122:122:void <init>(com.sonicbase.index.Index) -> <init>
    126:126:int compare(java.lang.Long,java.lang.Long) -> a
    122:122:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.index.Index$4 -> com.sonicbase.c.a$4:
    java.util.Comparator[] val$comparators -> a
    com.sonicbase.index.Index this$0 -> b
    142:142:void <init>(com.sonicbase.index.Index,java.util.Comparator[]) -> <init>
    145:157:int compare(java.lang.Object[],java.lang.Object[]) -> a
    142:142:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.index.Index$5 -> com.sonicbase.c.a$5:
    java.util.Comparator[] val$comparators -> a
    com.sonicbase.index.Index this$0 -> b
    162:162:void <init>(com.sonicbase.index.Index,java.util.Comparator[]) -> <init>
    165:177:int compare(java.lang.Object[],java.lang.Object[]) -> a
    162:162:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.index.Index$6 -> com.sonicbase.c.a$6:
    java.util.Comparator[] val$comparators -> a
    com.sonicbase.index.Index this$0 -> b
    185:185:void <init>(com.sonicbase.index.Index,java.util.Comparator[]) -> <init>
    188:200:int compare(java.lang.Object[],java.lang.Object[]) -> a
    185:185:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.index.Index$7 -> com.sonicbase.c.a$7:
    java.util.Comparator[] val$comparators -> a
    com.sonicbase.index.Index this$0 -> b
    205:205:void <init>(com.sonicbase.index.Index,java.util.Comparator[]) -> <init>
    208:220:int compare(java.lang.Object[],java.lang.Object[]) -> a
    205:205:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.index.Index$8 -> com.sonicbase.c.a$8:
    java.lang.Object[] val$maxKey -> a
    java.util.concurrent.atomic.AtomicLong val$currOffset -> b
    com.sonicbase.index.Index this$0 -> c
    1355:1355:void <init>(com.sonicbase.index.Index,java.lang.Object[],java.util.concurrent.atomic.AtomicLong) -> <init>
    1358:1362:boolean visit(java.lang.Object[],java.lang.Object) -> a
com.sonicbase.index.Index$9 -> com.sonicbase.c.a$9:
    java.lang.Object[] val$maxKey -> a
    java.util.List val$ret -> b
    java.util.concurrent.atomic.AtomicLong val$currOffset -> c
    java.util.List val$offsets -> d
    java.util.concurrent.atomic.AtomicInteger val$curr -> e
    com.sonicbase.index.Index this$0 -> f
    1392:1392:void <init>(com.sonicbase.index.Index,java.lang.Object[],java.util.List,java.util.concurrent.atomic.AtomicLong,java.util.List,java.util.concurrent.atomic.AtomicInteger) -> <init>
    1395:1407:boolean visit(java.lang.Object[],java.lang.Object) -> a
com.sonicbase.index.Index$MyEntry -> com.sonicbase.c.a$a:
    java.lang.Object key -> a
    java.lang.Object value -> b
    466:469:void <init>(java.lang.Object,java.lang.Object) -> <init>
    473:473:java.lang.Object getKey() -> getKey
    478:478:java.lang.Object getValue() -> getValue
    483:484:java.lang.Object setValue(java.lang.Object) -> setValue
com.sonicbase.index.Index$Visitor -> com.sonicbase.c.a$b:
    boolean visit(java.lang.Object[],java.lang.Object) -> a
com.sonicbase.index.Indices -> com.sonicbase.c.b:
    java.util.concurrent.ConcurrentHashMap indexes -> a
    8:9:void <init>() -> <init>
    12:12:java.util.concurrent.ConcurrentHashMap getIndices() -> a
    16:23:void addIndex(TableSchema,java.lang.String,java.util.Comparator[]) -> a
com.sonicbase.server.PartitionManager -> com.sonicbase.c.c:
    java.lang.String INDEX_STR -> c
    java.lang.String NAME_STR -> d
    Logger logger -> e
    com.sonicbase.server.DatabaseServer databaseServer -> f
    DatabaseCommon common -> g
    java.util.Map indices -> h
    java.util.Map stateIsShardRepartitioningComplete -> i
    java.lang.String stateTable -> j
    java.lang.String stateIndex -> k
    com.sonicbase.server.PartitionManager$RepartitionerState state -> l
    java.lang.Exception shardRepartitionException -> m
    java.util.concurrent.atomic.AtomicBoolean isRepartitioningIndex -> n
    java.lang.String currIndexRepartitioning -> o
    java.lang.String currTableRepartitioning -> p
    int minSizeForRepartition -> q
    boolean shutdown -> r
    java.lang.Thread beginRepartitioningThread -> s
    java.util.concurrent.atomic.AtomicBoolean isComplete -> t
    java.util.concurrent.ConcurrentHashMap previousPartitions -> a
    boolean isShardRepartitioningComplete -> u
    long countProcessed -> v
    java.util.concurrent.ConcurrentHashMap entriesToDelete -> w
    java.lang.String tableToDeleteEntriesFrom -> x
    com.sonicbase.server.PartitionManager$MoveProcessor[] moveProcessors -> y
    java.util.concurrent.atomic.AtomicLong countMoved -> z
    boolean isRunning -> A
    java.util.concurrent.atomic.AtomicBoolean isRebalancing -> b
    41:2208:void <init>(com.sonicbase.server.DatabaseServer,DatabaseCommon) -> <init>
    90:108:ComObject getRepartitionerState(ComObject) -> a
    112:113:void setMinSizeForRepartition(int) -> a
    117:457:byte[] beginRebalance(java.lang.String,java.util.List) -> a
    471:478:ComObject isShardRepartitioningComplete(ComObject,boolean) -> a
    482:518:void stopShardsFromRepartitioning() -> a
    521:524:void shutdown() -> b
    534:674:void calculatePartitions(java.lang.String,int,java.util.List,java.lang.String,java.lang.String,long[],long,com.sonicbase.server.PartitionManager$GetKeyAtOffset) -> a
    695:715:void logPartitionsToApply(java.lang.String,java.lang.String,java.lang.String,java.util.List) -> a
    744:746:ComObject isRepartitioningComplete(ComObject) -> b
    765:797:java.util.List getKeyAtOffset(java.lang.String,int,java.lang.String,java.lang.String,java.util.List) -> a
    802:882:ComObject getKeyAtOffset(ComObject) -> c
    886:896:long getPartitionSize(java.lang.String,int,java.lang.String,java.lang.String) -> a
    900:944:ComObject getPartitionSize(ComObject) -> d
    953:953:void deleteIndexEntry(java.lang.String,java.lang.String,java.lang.Object[]) -> a
    972:972:boolean undeleteIndexEntry(java.lang.String,java.lang.String,java.lang.String,java.lang.Object[],byte[]) -> a
    1030:1037:ComObject rebalanceOrderedIndex(ComObject) -> e
    1201:1207:ComObject stopRepartitioning(ComObject) -> f
    1213:1393:ComObject doRebalanceOrderedIndex(ComObject) -> g
    1397:1427:void doProcessEntry(java.lang.Object[],java.lang.Object,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.ThreadPoolExecutor,java.lang.String,java.lang.String,com.sonicbase.index.Index,IndexSchema,java.lang.String,int[],TableSchema,ComObject,java.util.concurrent.atomic.AtomicInteger) -> a
    1432:1487:void deleteRecordsOnOtherReplicas(java.lang.String,java.lang.String,java.lang.String,java.util.concurrent.ConcurrentLinkedQueue) -> a
    1490:1512:void sendDeletes(java.util.concurrent.ThreadPoolExecutor,ComObject,java.util.List) -> a
    1516:1587:ComObject deleteMovedRecords(ComObject,boolean) -> b
    1592:1645:void doDeleteMovedEntry(java.util.concurrent.ConcurrentLinkedQueue,IndexSchema,com.sonicbase.index.Index,com.sonicbase.server.DeleteManagerImpl$DeleteRequest) -> a
    1659:1834:void doProcessEntries(com.sonicbase.server.PartitionManager$MoveProcessor[],int,java.lang.String,java.lang.String,java.util.List,com.sonicbase.index.Index,IndexSchema,java.lang.String,int[],TableSchema,ComObject) -> a
    1837:1844:java.util.concurrent.ConcurrentHashMap getIndicesToDeleteFrom(java.lang.String,java.lang.String) -> a
    1957:2007:void moveIndexEntriesToShard(java.lang.String,java.lang.String,java.lang.String,boolean,int,java.util.List) -> a
    2011:2059:ComObject moveIndexEntries(ComObject,boolean) -> c
    2066:2096:ComObject getIndexCounts(ComObject) -> h
    2104:2104:boolean isRunning() -> c
    2109:2183:void run() -> run
    2186:2206:void logCurrPartitions(java.lang.String,java.lang.String,java.lang.String,TableSchema$Partition[]) -> a
    2211:2330:ComObject beginRebalance(ComObject) -> i
    2337:2362:boolean addToRebalance(java.util.List,java.util.Map$Entry,java.lang.String,DatabaseClient$IndexCounts,boolean) -> a
    31:31:long access$300(com.sonicbase.server.PartitionManager,java.lang.String,int,java.lang.String,java.lang.String) -> a
    31:31:java.util.List access$400(com.sonicbase.server.PartitionManager,java.lang.String,int,java.lang.String,java.lang.String,java.util.List) -> a
    31:31:DatabaseCommon access$500(com.sonicbase.server.PartitionManager) -> a
    31:31:com.sonicbase.server.DatabaseServer access$600(com.sonicbase.server.PartitionManager) -> b
    31:31:Logger access$700() -> d
    31:31:void access$1600(com.sonicbase.server.PartitionManager,java.lang.String,java.lang.String,java.lang.String,boolean,int,java.util.List) -> a
    31:31:java.lang.Exception access$2102(com.sonicbase.server.PartitionManager,java.lang.Exception) -> a
    31:31:java.lang.Exception access$2100(com.sonicbase.server.PartitionManager) -> c
    31:31:void access$2400(com.sonicbase.server.PartitionManager,java.lang.Object[],java.lang.Object,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.ThreadPoolExecutor,java.lang.String,java.lang.String,com.sonicbase.index.Index,IndexSchema,java.lang.String,int[],TableSchema,ComObject,java.util.concurrent.atomic.AtomicInteger) -> a
    31:31:long access$2502(com.sonicbase.server.PartitionManager,long) -> a
    31:31:com.sonicbase.server.PartitionManager$MoveProcessor[] access$2600(com.sonicbase.server.PartitionManager) -> d
    31:31:void access$2700(com.sonicbase.server.PartitionManager,com.sonicbase.server.PartitionManager$MoveProcessor[],int,java.lang.String,java.lang.String,java.util.List,com.sonicbase.index.Index,IndexSchema,java.lang.String,int[],TableSchema,ComObject) -> a
    31:31:void access$2800(com.sonicbase.server.PartitionManager,java.util.concurrent.ConcurrentLinkedQueue,IndexSchema,com.sonicbase.index.Index,com.sonicbase.server.DeleteManagerImpl$DeleteRequest) -> a
    465:465:void <clinit>() -> <clinit>
com.sonicbase.server.PartitionManager$1 -> com.sonicbase.c.c$1:
    long[] val$currPartitionSizes -> a
    int val$offset -> b
    java.lang.String val$dbName -> c
    java.lang.String val$currTableName -> d
    java.lang.String val$indexName -> e
    com.sonicbase.server.PartitionManager this$0 -> f
    155:155:void <init>(com.sonicbase.server.PartitionManager,long[],int,java.lang.String,java.lang.String,java.lang.String) -> <init>
    158:159:java.lang.Object call() -> call
com.sonicbase.server.PartitionManager$10 -> com.sonicbase.c.c$2:
    java.lang.String val$tableName -> a
    java.lang.String val$indexName -> b
    java.util.List val$toProcess -> c
    com.sonicbase.index.Index val$index -> d
    IndexSchema val$indexSchema -> e
    java.lang.String val$dbName -> f
    int[] val$fieldOffsets -> g
    TableSchema val$tableSchema -> h
    ComObject val$cobj -> i
    java.util.concurrent.atomic.AtomicInteger val$countFinished -> j
    com.sonicbase.server.PartitionManager this$0 -> k
    1407:1407:void <init>(com.sonicbase.server.PartitionManager,java.lang.String,java.lang.String,java.util.List,com.sonicbase.index.Index,IndexSchema,java.lang.String,int[],TableSchema,ComObject,java.util.concurrent.atomic.AtomicInteger) -> <init>
    1410:1424:void run() -> run
com.sonicbase.server.PartitionManager$11 -> com.sonicbase.c.c$3:
    int val$replica -> a
    ComObject val$currObj -> b
    com.sonicbase.server.PartitionManager this$0 -> c
    1496:1496:void <init>(com.sonicbase.server.PartitionManager,int,ComObject) -> <init>
    1505:1507:java.lang.Object call() -> call
com.sonicbase.server.PartitionManager$12 -> com.sonicbase.c.c$4:
    java.util.concurrent.ConcurrentLinkedQueue val$keysToDeleteExpanded -> a
    IndexSchema val$indexSchema -> b
    com.sonicbase.index.Index val$index -> c
    com.sonicbase.server.DeleteManagerImpl$DeleteRequest val$request -> d
    java.util.concurrent.atomic.AtomicInteger val$count -> e
    com.sonicbase.server.PartitionManager this$0 -> f
    1543:1543:void <init>(com.sonicbase.server.PartitionManager,java.util.concurrent.ConcurrentLinkedQueue,IndexSchema,com.sonicbase.index.Index,com.sonicbase.server.DeleteManagerImpl$DeleteRequest,java.util.concurrent.atomic.AtomicInteger) -> <init>
    1546:1550:java.lang.Object call() -> call
com.sonicbase.server.PartitionManager$2 -> com.sonicbase.c.c$5:
    com.sonicbase.server.PartitionManager this$0 -> a
    206:206:void <init>(com.sonicbase.server.PartitionManager) -> <init>
    209:209:java.util.List getKeyAtOffset(java.lang.String,int,java.lang.String,java.lang.String,java.util.List) -> a
com.sonicbase.server.PartitionManager$3 -> com.sonicbase.c.c$6:
    java.util.Comparator[] val$comparators -> a
    com.sonicbase.server.PartitionManager this$0 -> b
    217:217:void <init>(com.sonicbase.server.PartitionManager,java.util.Comparator[]) -> <init>
    220:230:int compare(TableSchema$Partition,TableSchema$Partition) -> a
    217:217:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.server.PartitionManager$4 -> com.sonicbase.c.c$7:
    java.lang.String val$dbName -> a
    java.lang.String val$finalTableName -> b
    java.lang.String val$indexName -> c
    int val$shard -> d
    int[] val$masters -> e
    com.sonicbase.server.PartitionManager this$0 -> f
    346:346:void <init>(com.sonicbase.server.PartitionManager,java.lang.String,java.lang.String,java.lang.String,int,int[]) -> <init>
    349:365:java.lang.Object call() -> call
com.sonicbase.server.PartitionManager$5 -> com.sonicbase.c.c$8:
    int val$localShard -> a
    int val$localReplica -> b
    ComObject val$cobj -> c
    com.sonicbase.server.PartitionManager this$0 -> d
    492:492:void <init>(com.sonicbase.server.PartitionManager,int,int,ComObject) -> <init>
    496:501:java.lang.Object call() -> call
com.sonicbase.server.PartitionManager$6 -> com.sonicbase.c.c$9:
    640:640:void <init>() -> <init>
    643:643:int compare(com.sonicbase.server.PartitionManager$OffsetEntry,com.sonicbase.server.PartitionManager$OffsetEntry) -> a
    640:640:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.server.PartitionManager$7 -> com.sonicbase.c.c$10:
    com.sonicbase.server.PartitionManager$GetKeyAtOffset val$getKey -> a
    java.lang.String val$dbName -> b
    java.util.Map$Entry val$entry -> c
    java.lang.String val$tableName -> d
    java.lang.String val$indexName -> e
    java.util.List val$newPartitions -> f
    649:649:void <init>(com.sonicbase.server.PartitionManager$GetKeyAtOffset,java.lang.String,java.util.Map$Entry,java.lang.String,java.lang.String,java.util.List) -> <init>
    652:658:java.lang.Object call() -> call
com.sonicbase.server.PartitionManager$8 -> com.sonicbase.c.c$11:
    java.util.concurrent.atomic.AtomicLong val$countVisited -> a
    java.util.concurrent.atomic.AtomicReference val$currEntries -> b
    java.util.concurrent.atomic.AtomicInteger val$countSubmitted -> c
    java.util.concurrent.ThreadPoolExecutor val$executor -> d
    java.lang.String val$tableName -> e
    java.lang.String val$indexName -> f
    com.sonicbase.index.Index val$index -> g
    IndexSchema val$indexSchema -> h
    java.lang.String val$dbName -> i
    int[] val$fieldOffsets -> j
    TableSchema val$tableSchema -> k
    ComObject val$cobj -> l
    java.util.concurrent.atomic.AtomicInteger val$countFinished -> m
    com.sonicbase.server.PartitionManager this$0 -> n
    1271:1271:void <init>(com.sonicbase.server.PartitionManager,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.ThreadPoolExecutor,java.lang.String,java.lang.String,com.sonicbase.index.Index,IndexSchema,java.lang.String,int[],TableSchema,ComObject,java.util.concurrent.atomic.AtomicInteger) -> <init>
    1274:1275:boolean visit(java.lang.Object[],java.lang.Object) -> a
com.sonicbase.server.PartitionManager$9 -> com.sonicbase.c.c$12:
    java.util.concurrent.atomic.AtomicLong val$countVisited -> a
    java.util.concurrent.atomic.AtomicReference val$currEntries -> b
    java.util.concurrent.atomic.AtomicInteger val$countSubmitted -> c
    java.util.concurrent.ThreadPoolExecutor val$executor -> d
    java.lang.String val$tableName -> e
    java.lang.String val$indexName -> f
    com.sonicbase.index.Index val$index -> g
    IndexSchema val$indexSchema -> h
    java.lang.String val$dbName -> i
    int[] val$fieldOffsets -> j
    TableSchema val$tableSchema -> k
    ComObject val$cobj -> l
    java.util.concurrent.atomic.AtomicInteger val$countFinished -> m
    com.sonicbase.server.PartitionManager this$0 -> n
    1300:1300:void <init>(com.sonicbase.server.PartitionManager,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.ThreadPoolExecutor,java.lang.String,java.lang.String,com.sonicbase.index.Index,IndexSchema,java.lang.String,int[],TableSchema,ComObject,java.util.concurrent.atomic.AtomicInteger) -> <init>
    1303:1333:boolean visit(java.lang.Object[],java.lang.Object) -> a
com.sonicbase.server.PartitionManager$9$1 -> com.sonicbase.c.c$12$1:
    java.util.List val$toProcess -> a
    com.sonicbase.server.PartitionManager$9 this$1 -> b
    1313:1313:void <init>(com.sonicbase.server.PartitionManager$9,java.util.List) -> <init>
    1316:1330:void run() -> run
com.sonicbase.server.PartitionManager$GetKeyAtOffset -> com.sonicbase.c.c$a:
    java.util.List getKeyAtOffset(java.lang.String,int,java.lang.String,java.lang.String,java.util.List) -> a
com.sonicbase.server.PartitionManager$MapEntry -> com.sonicbase.c.c$b:
    java.lang.Object[] key -> a
    java.lang.Object value -> b
    1044:1047:void <init>(java.lang.Object[],java.lang.Object) -> <init>
com.sonicbase.server.PartitionManager$MoveProcessor -> com.sonicbase.c.c$c:
    java.lang.String dbName -> b
    java.lang.String tableName -> c
    java.lang.String indexName -> d
    boolean isPrimaryKey -> e
    int shard -> f
    com.sonicbase.index.Index index -> g
    java.util.concurrent.ConcurrentLinkedQueue keysToDelete -> h
    java.util.concurrent.ThreadPoolExecutor executor -> i
    java.util.concurrent.ArrayBlockingQueue queue -> j
    boolean shutdown -> k
    java.lang.Thread thread -> l
    java.util.concurrent.atomic.AtomicInteger countStarted -> m
    java.util.concurrent.atomic.AtomicInteger countFinished -> n
    com.sonicbase.server.PartitionManager this$0 -> a
    1060:1078:void <init>(com.sonicbase.server.PartitionManager,java.lang.String,java.lang.String,java.lang.String,boolean,com.sonicbase.index.Index,java.util.concurrent.ConcurrentLinkedQueue,int) -> <init>
    1082:1085:void shutdown() -> a
    1088:1183:void start() -> b
    1186:1197:void await() -> c
    1050:1050:boolean access$800(com.sonicbase.server.PartitionManager$MoveProcessor) -> a
    1050:1050:java.util.concurrent.ArrayBlockingQueue access$900(com.sonicbase.server.PartitionManager$MoveProcessor) -> b
    1050:1050:java.util.concurrent.atomic.AtomicInteger access$1000(com.sonicbase.server.PartitionManager$MoveProcessor) -> c
    1050:1050:java.lang.String access$1100(com.sonicbase.server.PartitionManager$MoveProcessor) -> d
    1050:1050:java.lang.String access$1200(com.sonicbase.server.PartitionManager$MoveProcessor) -> e
    1050:1050:java.lang.String access$1300(com.sonicbase.server.PartitionManager$MoveProcessor) -> f
    1050:1050:boolean access$1400(com.sonicbase.server.PartitionManager$MoveProcessor) -> g
    1050:1050:int access$1500(com.sonicbase.server.PartitionManager$MoveProcessor) -> h
    1050:1050:com.sonicbase.index.Index access$1900(com.sonicbase.server.PartitionManager$MoveProcessor) -> i
    1050:1050:java.util.concurrent.ConcurrentLinkedQueue access$2000(com.sonicbase.server.PartitionManager$MoveProcessor) -> j
    1050:1050:java.util.concurrent.atomic.AtomicInteger access$2200(com.sonicbase.server.PartitionManager$MoveProcessor) -> k
    1050:1050:java.util.concurrent.ThreadPoolExecutor access$2300(com.sonicbase.server.PartitionManager$MoveProcessor) -> l
com.sonicbase.server.PartitionManager$MoveProcessor$1 -> com.sonicbase.c.c$c$1:
    com.sonicbase.server.PartitionManager$MoveProcessor this$1 -> a
    1088:1088:void <init>(com.sonicbase.server.PartitionManager$MoveProcessor) -> <init>
    1091:1180:void run() -> run
com.sonicbase.server.PartitionManager$MoveProcessor$1$1 -> com.sonicbase.c.c$c$1$1:
    com.sonicbase.server.PartitionManager$MoveRequestList val$list -> a
    com.sonicbase.server.PartitionManager$MoveProcessor$1 this$2 -> b
    1098:1098:void <init>(com.sonicbase.server.PartitionManager$MoveProcessor$1,com.sonicbase.server.PartitionManager$MoveRequestList) -> <init>
    1102:1166:void run() -> run
com.sonicbase.server.PartitionManager$MoveRequest -> com.sonicbase.c.c$d:
    boolean shouldDeleteNow -> a
    java.lang.Object[] key -> b
    byte[][] content -> c
    982:986:void <init>(java.lang.Object[],byte[][],boolean) -> <init>
    990:990:java.lang.Object[] getKey() -> a
    996:997:void setKey(java.lang.Object[]) -> a
    1001:1001:byte[][] getContent() -> b
    1007:1008:void setContent(byte[][]) -> a
    975:975:boolean access$1700(com.sonicbase.server.PartitionManager$MoveRequest) -> a
    975:975:java.lang.Object[] access$1800(com.sonicbase.server.PartitionManager$MoveRequest) -> b
com.sonicbase.server.PartitionManager$MoveRequestList -> com.sonicbase.c.c$e:
    java.util.List moveRequests -> a
    java.util.concurrent.CountDownLatch latch -> b
    com.sonicbase.server.PartitionManager this$0 -> c
    1649:1653:void <init>(com.sonicbase.server.PartitionManager,java.util.List) -> <init>
com.sonicbase.server.PartitionManager$OffsetEntry -> com.sonicbase.c.c$f:
    long offset -> a
    int partitionOffset -> b
    680:683:void <init>(long,int) -> <init>
    686:686:long getOffset() -> a
    690:690:int getPartitionOffset() -> b
com.sonicbase.server.PartitionManager$PartitionEntry -> com.sonicbase.c.c$g:
    int version -> a
    TableSchema$Partition[] partitions -> b
    460:460:void <init>() -> <init>
com.sonicbase.server.PartitionManager$RepartitionerState -> com.sonicbase.c.c$h:
    com.sonicbase.server.PartitionManager$RepartitionerState idle -> a
    com.sonicbase.server.PartitionManager$RepartitionerState prep -> b
    com.sonicbase.server.PartitionManager$RepartitionerState rebalancing -> c
    com.sonicbase.server.PartitionManager$RepartitionerState complete -> d
    com.sonicbase.server.PartitionManager$RepartitionerState[] $VALUES -> e
    47:47:com.sonicbase.server.PartitionManager$RepartitionerState[] values() -> a
    47:47:com.sonicbase.server.PartitionManager$RepartitionerState valueOf(java.lang.String) -> a
    47:47:void <init>(java.lang.String,int) -> <init>
    47:51:void <clinit>() -> <clinit>
com.sonicbase.server.PartitionManager$ShardState -> com.sonicbase.c.c$i:
    int shard -> a
    long count -> b
    java.lang.String exception -> c
    boolean finished -> d
    60:64:void <init>(long,java.lang.String,boolean) -> <init>
    66:68:void <init>() -> <init>
    54:54:long access$000(com.sonicbase.server.PartitionManager$ShardState) -> a
    54:54:boolean access$100(com.sonicbase.server.PartitionManager$ShardState) -> b
    54:54:java.lang.String access$200(com.sonicbase.server.PartitionManager$ShardState) -> c
com.sonicbase.misc.FindIdInSnapshot -> com.sonicbase.misc.FindIdInSnapshot:
    Logger logger -> a
    java.lang.String SNAPSHOT_STR -> b
    java.lang.String INDEX_STR -> c
    java.lang.String RATE_STR -> d
    java.lang.String DURATION_STR -> e
    21:21:void <init>() -> <init>
    32:137:void main(java.lang.String[]) -> main
    23:23:void <clinit>() -> <clinit>
com.sonicbase.misc.FindIdInSnapshot$1 -> com.sonicbase.misc.FindIdInSnapshot$1:
    java.io.File val$indexFile -> a
    TableSchema val$tableSchema -> b
    long val$id -> c
    java.util.concurrent.atomic.AtomicBoolean val$found -> d
    java.util.concurrent.atomic.AtomicLong val$recoveredCount -> e
    java.util.concurrent.atomic.AtomicLong val$lastLogged -> f
    java.lang.String val$tableName -> g
    java.lang.String val$indexName -> h
    long val$indexBegin -> i
    78:78:void <init>(java.io.File,TableSchema,long,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong,java.lang.String,java.lang.String,long) -> <init>
    81:114:java.lang.Boolean call() -> a
    78:78:java.lang.Object call() -> call
com.sonicbase.misc.RecordLoader -> com.sonicbase.misc.RecordLoader:
    17:17:void <init>() -> <init>
    20:71:void main(java.lang.String[]) -> main
com.sonicbase.misc.RecordValidator -> com.sonicbase.misc.RecordValidator:
    15:15:void <init>() -> <init>
    18:68:void main(java.lang.String[]) -> main
com.sonicbase.misc.TestDeleteMap -> com.sonicbase.misc.a:
    10:10:void <init>() -> <init>
    30:86:void main(java.lang.String[]) -> a
com.sonicbase.misc.TestDeleteMap$Key -> com.sonicbase.misc.a$a:
    java.lang.Object[] key -> a
    15:17:void <init>(java.lang.Object[]) -> <init>
    20:20:int hashCode() -> hashCode
    25:25:boolean equals(java.lang.Object) -> equals
com.sonicbase.misc.TestSocket -> com.sonicbase.misc.b:
    13:13:void <init>() -> <init>
    17:57:void main(java.lang.String[]) -> a
com.sonicbase.misc.TestSocket$1 -> com.sonicbase.misc.b$1:
    17:17:void <init>() -> <init>
    20:24:void run() -> run
com.sonicbase.misc.TestSocket$2 -> com.sonicbase.misc.b$2:
    java.util.concurrent.atomic.AtomicInteger val$threadsActive -> a
    java.util.concurrent.atomic.AtomicInteger val$count -> b
    32:32:void <init>(java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicInteger) -> <init>
    35:51:void run() -> run
com.sonicbase.misc.TestTableScan -> com.sonicbase.misc.TestTableScan:
    14:14:void <init>() -> <init>
    18:63:void main(java.lang.String[]) -> main
com.sonicbase.query.impl.DiskBasedResultSet -> com.sonicbase.d.a.a:
    org.apache.log4j.Logger logger -> a
    java.util.concurrent.atomic.AtomicLong nextResultSetId -> b
    int count -> c
    SelectStatementImpl select -> d
    com.sonicbase.server.DatabaseServer server -> e
    java.lang.String[] tableNames -> f
    long resultSetId -> g
    43:177:void <init>(short,java.lang.String,com.sonicbase.server.DatabaseServer,java.lang.String[],ResultSetImpl,int,SelectStatementImpl) -> <init>
    180:202:void deleteOldResultSets(com.sonicbase.server.DatabaseServer) -> a
    205:216:void updateAccessTime(java.io.File) -> a
    220:236:void getKeepers(java.lang.String,com.sonicbase.server.DatabaseServer,java.lang.String[],java.util.Map,boolean[][],java.lang.String,java.lang.String) -> a
    240:260:void mergeSort(short,java.lang.String,java.io.File) -> a
    263:381:void mergeTwoFiles(short,java.lang.String,java.io.File,java.io.File,java.io.File,boolean) -> a
    391:517:void mergeNFiles(short,java.lang.String,java.io.File,java.io.File[]) -> a
    523:544:java.io.DataOutputStream writeRow(short,Record[],java.io.DataOutputStream,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicInteger,java.io.File) -> a
    550:565:Record[] readRow(java.lang.String,java.io.DataInputStream) -> a
    569:572:void <init>(com.sonicbase.server.DatabaseServer,long) -> <init>
    575:575:long getResultSetId() -> a
    581:605:void writeRecordsToFile(short,java.io.File,ExpressionImpl$CachedRecord[][],int) -> a
    611:616:void <init>(com.sonicbase.server.DatabaseServer,SelectStatementImpl,java.lang.String[],long) -> <init>
    620:626:void delete() -> b
    629:687:byte[][][] nextPage(int,int) -> a
    27:29:void <clinit>() -> <clinit>
com.sonicbase.query.impl.DiskBasedResultSet$1 -> com.sonicbase.d.a.a$1:
    int[] val$fieldOffsets -> a
    int[] val$tableOffsets -> b
    boolean[] val$ascendingFlags -> c
    java.util.Comparator[] val$comparators -> d
    com.sonicbase.query.impl.DiskBasedResultSet this$0 -> e
    301:301:void <init>(com.sonicbase.query.impl.DiskBasedResultSet,int[],int[],boolean[],java.util.Comparator[]) -> <init>
    304:323:int compare(Record[],Record[]) -> a
    301:301:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.query.impl.DiskBasedResultSet$2 -> com.sonicbase.d.a.a$2:
    int[] val$fieldOffsets -> a
    int[] val$tableOffsets -> b
    boolean[] val$ascendingFlags -> c
    java.util.Comparator[] val$comparators -> d
    com.sonicbase.query.impl.DiskBasedResultSet this$0 -> e
    429:429:void <init>(com.sonicbase.query.impl.DiskBasedResultSet,int[],int[],boolean[],java.util.Comparator[]) -> <init>
    432:451:int compare(com.sonicbase.query.impl.DiskBasedResultSet$MergeRow,com.sonicbase.query.impl.DiskBasedResultSet$MergeRow) -> a
    429:429:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.query.impl.DiskBasedResultSet$MergeRow -> com.sonicbase.d.a.a$a:
    int streamOffset -> a
    Record[] row -> b
    384:384:void <init>() -> <init>
    384:384:Record[] access$000(com.sonicbase.query.impl.DiskBasedResultSet$MergeRow) -> a
    384:384:Record[] access$002(com.sonicbase.query.impl.DiskBasedResultSet$MergeRow,Record[]) -> a
    384:384:int access$102(com.sonicbase.query.impl.DiskBasedResultSet$MergeRow,int) -> a
    384:384:int access$100(com.sonicbase.query.impl.DiskBasedResultSet$MergeRow) -> b
com.sonicbase.queue.AWSSQSConsumer -> com.sonicbase.queue.AWSSQSConsumer:
    java.lang.String url -> a
    com.amazonaws.services.sqs.AmazonSQSClient sqsClient -> b
    boolean shutdown -> c
    16:16:void <init>() -> <init>
    33:34:java.io.File getInstallDir(com.fasterxml.jackson.databind.node.ObjectNode) -> a
    38:39:void shutdown() -> a
    44:72:void init(java.lang.String,java.lang.String,java.lang.String) -> a
    76:86:java.util.List receive() -> b
    91:92:void acknowledgeMessage(com.sonicbase.queue.Message) -> a
com.sonicbase.queue.AWSSQSConsumer$AWSMessage -> com.sonicbase.queue.AWSSQSConsumer$a:
    com.amazonaws.services.sqs.model.Message message -> b
    com.amazonaws.services.sqs.model.Message awsMessage -> c
    com.sonicbase.queue.AWSSQSConsumer this$0 -> a
    26:29:void <init>(com.sonicbase.queue.AWSSQSConsumer,com.amazonaws.services.sqs.model.Message,java.lang.String) -> <init>
    22:22:com.amazonaws.services.sqs.model.Message access$000(com.sonicbase.queue.AWSSQSConsumer$AWSMessage) -> a
com.sonicbase.queue.AWSSQSProducer -> com.sonicbase.queue.AWSSQSProducer:
    java.lang.String url -> a
    com.amazonaws.services.sqs.AmazonSQSClient sqsClient -> b
    15:15:void <init>() -> <init>
    21:22:java.io.File getInstallDir(com.fasterxml.jackson.databind.node.ObjectNode) -> a
    28:56:void init(java.lang.String,java.lang.String,java.lang.String) -> a
    60:69:void publish(java.lang.String) -> a
    74:74:void shutdown() -> a
com.sonicbase.queue.KafkaConsumer -> com.sonicbase.queue.KafkaConsumer:
    org.apache.log4j.Logger logger -> a
    org.apache.kafka.clients.consumer.KafkaConsumer consumer -> b
    boolean shutdown -> c
    16:16:void <init>() -> <init>
    24:25:void shutdown() -> a
    30:48:void init(java.lang.String,java.lang.String,java.lang.String) -> a
    52:58:java.util.List receive() -> b
    63:63:void acknowledgeMessage(com.sonicbase.queue.Message) -> a
    18:18:void <clinit>() -> <clinit>
com.sonicbase.queue.KafkaProducer -> com.sonicbase.queue.KafkaProducer:
    java.lang.String topic -> a
    org.apache.kafka.clients.producer.Producer producer -> b
    14:14:void <init>() -> <init>
    22:42:void init(java.lang.String,java.lang.String,java.lang.String) -> a
    47:53:void publish(java.lang.String) -> a
    58:58:void shutdown() -> a
com.sonicbase.queue.LocalConsumer -> com.sonicbase.queue.LocalConsumer:
    org.apache.log4j.Logger logger -> a
    org.apache.kafka.clients.consumer.KafkaConsumer consumer -> b
    boolean shutdown -> c
    8:8:void <init>() -> <init>
    16:17:void shutdown() -> a
    21:21:void init(java.lang.String,java.lang.String,java.lang.String) -> a
    25:37:java.util.List receive() -> b
    42:42:void acknowledgeMessage(com.sonicbase.queue.Message) -> a
    10:10:void <clinit>() -> <clinit>
com.sonicbase.queue.LocalProducer -> com.sonicbase.queue.LocalProducer:
    java.util.List queue -> a
    6:6:void <init>() -> <init>
    11:11:void init(java.lang.String,java.lang.String,java.lang.String) -> a
    15:16:void publish(java.lang.String) -> a
    21:21:void shutdown() -> a
    7:7:void <clinit>() -> <clinit>
com.sonicbase.queue.Message -> com.sonicbase.queue.Message:
    java.lang.String body -> a
    7:7:void <init>() -> <init>
    9:11:void <init>(java.lang.String) -> <init>
    14:15:void setBody(java.lang.String) -> a
    18:18:java.lang.String getBody() -> a
com.sonicbase.queue.StreamConsumer -> com.sonicbase.queue.StreamConsumer:
    void init(java.lang.String,java.lang.String,java.lang.String) -> a
    java.util.List receive() -> b
    void acknowledgeMessage(com.sonicbase.queue.Message) -> a
    void shutdown() -> a
com.sonicbase.queue.StreamProducer -> com.sonicbase.queue.StreamProducer:
    void init(java.lang.String,java.lang.String,java.lang.String) -> a
    void publish(java.lang.String) -> a
    void shutdown() -> a
com.sonicbase.research.socket.ChangeRequest -> com.sonicbase.research.socket.a:
    int REGISTER -> a
    int CHANGEOPS -> b
    java.nio.channels.SocketChannel socket -> c
    int type -> d
    int ops -> e
    13:17:void <init>(java.nio.channels.SocketChannel,int,int) -> <init>
    20:20:java.nio.channels.SocketChannel getSocket() -> a
    24:25:void setSocket(java.nio.channels.SocketChannel) -> a
    28:28:int getType() -> b
    32:33:void setType(int) -> a
    36:36:int getOps() -> c
    40:41:void setOps(int) -> b
com.sonicbase.server.NettyServer -> com.sonicbase.server.NettyServer:
    Logger logger -> b
    boolean ENABLE_COMPRESSION -> a
    java.lang.String UTF8_STR -> c
    java.lang.String PORT_STR -> d
    java.lang.String HOST_STR -> e
    boolean isRunning -> f
    int port -> g
    java.lang.String cluster -> h
    com.sonicbase.server.DatabaseServer databaseServer -> i
    io.netty.channel.ChannelFuture f -> j
    io.netty.channel.EventLoopGroup bossGroup -> k
    io.netty.channel.EventLoopGroup workerGroup -> l
    java.util.concurrent.atomic.AtomicLong totalRequestSize -> m
    java.util.concurrent.atomic.AtomicLong totalResponseSize -> n
    java.util.concurrent.atomic.AtomicLong totalTimeProcessing -> o
    java.util.concurrent.atomic.AtomicLong totalCallCount -> p
    java.util.concurrent.atomic.AtomicLong callCount -> q
    java.util.concurrent.atomic.AtomicLong lastLoggedSocketServerStats -> r
    java.util.concurrent.atomic.AtomicLong requestDuration -> s
    java.util.concurrent.atomic.AtomicLong responseDuration -> t
    java.util.concurrent.atomic.AtomicLong lastLogReset -> u
    java.util.concurrent.atomic.AtomicLong timeLogging -> v
    java.util.concurrent.atomic.AtomicLong handlerTime -> w
    52:195:void <init>() -> <init>
    97:97:boolean isRunning() -> isRunning
    110:160:byte[] writeResponse(byte[],java.io.OutputStream,byte[],int,java.util.ArrayList,java.io.ByteArrayOutputStream) -> writeResponse
    165:184:com.sonicbase.server.NettyServer$Request deserializeRequest(java.io.InputStream,byte[]) -> deserializeRequest
    693:698:byte[] compress(byte[]) -> compress
    702:705:byte[] uncompress(byte[]) -> uncompress
    709:726:void setDatabaseServer(com.sonicbase.server.DatabaseServer) -> setDatabaseServer
    729:729:com.sonicbase.server.DatabaseServer getDatabaseServer() -> getDatabaseServer
    741:773:void run() -> run
    776:779:void main(java.lang.String[]) -> main
    782:937:void startServer(java.lang.String[],java.lang.String,boolean) -> startServer
    940:941:java.lang.String getHelpPage(com.sonicbase.server.NettyServer) -> getHelpPage
    40:40:java.util.concurrent.atomic.AtomicLong access$100(com.sonicbase.server.NettyServer) -> access$100
    40:40:boolean access$200(com.sonicbase.server.NettyServer) -> access$200
    40:40:java.util.concurrent.atomic.AtomicLong access$300(com.sonicbase.server.NettyServer) -> access$300
    40:40:java.util.concurrent.atomic.AtomicLong access$400(com.sonicbase.server.NettyServer) -> access$400
    40:40:java.util.concurrent.atomic.AtomicLong access$500(com.sonicbase.server.NettyServer) -> access$500
    40:40:java.util.concurrent.atomic.AtomicLong access$600(com.sonicbase.server.NettyServer) -> access$600
    40:40:java.util.concurrent.atomic.AtomicLong access$700(com.sonicbase.server.NettyServer) -> access$700
    40:40:Logger access$800() -> access$800
    40:40:java.util.concurrent.atomic.AtomicLong access$900(com.sonicbase.server.NettyServer) -> access$900
    40:40:java.util.concurrent.atomic.AtomicLong access$1000(com.sonicbase.server.NettyServer) -> access$1000
    40:40:java.util.concurrent.atomic.AtomicLong access$1100(com.sonicbase.server.NettyServer) -> access$1100
    40:40:java.util.concurrent.atomic.AtomicLong access$1200(com.sonicbase.server.NettyServer) -> access$1200
    40:40:java.util.concurrent.atomic.AtomicLong access$1300(com.sonicbase.server.NettyServer) -> access$1300
com.sonicbase.server.NettyServer$1 -> com.sonicbase.server.NettyServer$1:
    com.sonicbase.server.NettyServer this$0 -> a
    841:841:void <init>(com.sonicbase.server.NettyServer) -> <init>
    845:859:void run() -> run
com.sonicbase.server.NettyServer$2 -> com.sonicbase.server.NettyServer$2:
    com.sonicbase.server.DatabaseServer val$databaseServer -> a
    java.util.concurrent.atomic.AtomicBoolean val$isRunning -> b
    com.sonicbase.server.NettyServer this$0 -> c
    863:863:void <init>(com.sonicbase.server.NettyServer,com.sonicbase.server.DatabaseServer,java.util.concurrent.atomic.AtomicBoolean) -> <init>
    867:900:void run() -> run
com.sonicbase.server.NettyServer$MyChannelInitializer -> com.sonicbase.server.NettyServer$a:
    com.sonicbase.server.NettyServer this$0 -> a
    732:732:void <init>(com.sonicbase.server.NettyServer) -> <init>
    736:737:void initChannel(io.netty.channel.socket.SocketChannel) -> initChannel
    732:732:void initChannel(io.netty.channel.Channel) -> initChannel
com.sonicbase.server.NettyServer$ReadState -> com.sonicbase.server.NettyServer$b:
    com.sonicbase.server.NettyServer$ReadState size -> a
    com.sonicbase.server.NettyServer$ReadState bytes -> b
    com.sonicbase.server.NettyServer$ReadState dlqSize -> c
    com.sonicbase.server.NettyServer$ReadState dlqBytes -> d
    com.sonicbase.server.NettyServer$ReadState[] $VALUES -> e
    100:100:com.sonicbase.server.NettyServer$ReadState[] values() -> a
    100:100:com.sonicbase.server.NettyServer$ReadState valueOf(java.lang.String) -> a
    100:100:void <init>(java.lang.String,int) -> <init>
    100:104:void <clinit>() -> <clinit>
com.sonicbase.server.NettyServer$Request -> com.sonicbase.server.NettyServer$c:
    byte[] body -> b
    java.util.concurrent.CountDownLatch latch -> a
    byte[] response -> c
    long sequence0 -> d
    long sequence1 -> e
    60:62:void <init>() -> <init>
    68:68:byte[] getBody() -> a
    72:73:void setBody(byte[]) -> a
    76:76:long getSequence0() -> b
    80:80:long getSequence1() -> c
    84:85:void setSequence0(long) -> a
    88:89:void setSequence1(long) -> b
    60:60:byte[] access$002(com.sonicbase.server.NettyServer$Request,byte[]) -> a
    60:60:byte[] access$000(com.sonicbase.server.NettyServer$Request) -> a
com.sonicbase.server.NettyServer$ServerHandler -> com.sonicbase.server.NettyServer$d:
    io.netty.buffer.ByteBufAllocator alloc -> c
    int len -> d
    int bodyLen -> e
    com.sonicbase.server.NettyServer$ReadState readState -> f
    io.netty.buffer.ByteBuf destBuff -> g
    io.netty.buffer.ByteBuf respBuffer -> h
    byte[] intBuff -> i
    java.util.List buffers -> j
    boolean oldWay -> a
    com.sonicbase.server.NettyServer this$0 -> b
    198:235:void <init>(com.sonicbase.server.NettyServer) -> <init>
    213:222:void handlerAdded(io.netty.channel.ChannelHandlerContext) -> handlerAdded
    225:229:void handlerRemoved(io.netty.channel.ChannelHandlerContext) -> handlerRemoved
    238:383:byte[] readRequest(io.netty.buffer.ByteBuf) -> readRequest
    388:543:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object) -> channelRead
    546:569:void processError(java.lang.String,java.util.List,java.lang.Throwable) -> processError
    573:593:byte[] doProcessRequest(com.sonicbase.server.NettyServer$Request) -> doProcessRequest
    598:630:java.util.List doProcessRequests(java.util.List,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong) -> doProcessRequests
    634:640:java.util.List processRequests(java.util.List,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong) -> processRequests
    644:644:byte[] processRequest(byte[]) -> processRequest
    649:671:byte[] returnException(java.lang.String,java.lang.Throwable) -> returnException
    677:677:void channelReadComplete(io.netty.channel.ChannelHandlerContext) -> channelReadComplete
    682:689:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable) -> exceptionCaught
com.sonicbase.server.BulkImportManager -> com.sonicbase.server.a:
    int BULK_IMPORT_THREAD_COUNT_PER_SERVER -> a
    Logger logger -> b
    com.sonicbase.server.DatabaseServer server -> c
    java.util.concurrent.ConcurrentHashMap preProcessCountExpected -> d
    java.util.concurrent.ConcurrentHashMap preProcessCountProcessed -> e
    java.util.concurrent.ConcurrentHashMap preProcessFinished -> f
    java.util.concurrent.ConcurrentHashMap preProcessException -> g
    java.util.concurrent.ConcurrentHashMap importCountExpected -> h
    java.util.concurrent.ConcurrentHashMap importCountProcessed -> i
    java.util.concurrent.ConcurrentHashMap importFinished -> j
    java.util.concurrent.ConcurrentHashMap importException -> k
    java.util.concurrent.ConcurrentHashMap cancelBulkImport -> l
    java.util.concurrent.atomic.AtomicInteger countBulkImportRunning -> m
    java.util.concurrent.atomic.AtomicInteger countCoordinating -> n
    java.util.concurrent.atomic.AtomicInteger coordinatesCalled -> o
    29:1403:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    120:181:ComObject getBulkImportProgressOnServer(ComObject) -> a
    187:435:ComObject startBulkImportOnServer(ComObject) -> b
    439:640:java.lang.Object[] getCurrRecordFromResultSet(java.sql.ResultSet,java.util.List) -> a
    646:770:ComObject coordinateBulkImportForTable(ComObject) -> c
    777:888:void doImportForNoPrimaryKey(java.sql.Connection,long,int,int,TableSchema,IndexSchema,java.lang.String,java.lang.String,ComObject) -> a
    894:1031:void doCoordinateBulkLoad(java.sql.Connection,long,int,int,java.util.concurrent.atomic.AtomicLong,TableSchema,IndexSchema,java.lang.String,java.lang.String,ComObject) -> a
    1034:1088:java.lang.Object getValueOfField(java.sql.ResultSet,java.lang.String,DataType$Type) -> a
    1094:1353:void setFieldsInInsertStatement(java.sql.PreparedStatement,java.lang.Object[],java.util.List) -> a
    1357:1401:void insertRecords(java.sql.Connection,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicInteger,java.util.List,java.lang.String,java.util.List,java.lang.StringBuilder,java.lang.StringBuilder) -> a
    1406:1456:java.util.concurrent.ConcurrentHashMap getBulkImportStatus(java.lang.String) -> a
    1461:1595:ComObject startBulkImport(ComObject) -> d
    1600:1603:ComObject cancelBulkImport(ComObject) -> e
    1607:1664:ComObject getBulkImportProgress(ComObject) -> f
    27:27:java.util.concurrent.atomic.AtomicInteger access$000(com.sonicbase.server.BulkImportManager) -> a
    27:27:com.sonicbase.server.DatabaseServer access$100(com.sonicbase.server.BulkImportManager) -> b
    27:27:java.util.concurrent.ConcurrentHashMap access$200(com.sonicbase.server.BulkImportManager) -> c
    27:27:Logger access$300(com.sonicbase.server.BulkImportManager) -> d
    27:27:java.util.concurrent.ConcurrentHashMap access$400(com.sonicbase.server.BulkImportManager) -> e
    27:27:java.lang.Object[] access$500(com.sonicbase.server.BulkImportManager,java.sql.ResultSet,java.util.List) -> a
    27:27:void access$600(com.sonicbase.server.BulkImportManager,java.sql.Connection,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicInteger,java.util.List,java.lang.String,java.util.List,java.lang.StringBuilder,java.lang.StringBuilder) -> a
    27:27:java.util.concurrent.ConcurrentHashMap access$700(com.sonicbase.server.BulkImportManager) -> f
    27:27:java.util.concurrent.ConcurrentHashMap access$800(com.sonicbase.server.BulkImportManager) -> g
    27:27:java.util.concurrent.atomic.AtomicInteger access$900(com.sonicbase.server.BulkImportManager) -> h
    27:27:int access$1000(com.sonicbase.server.BulkImportManager) -> i
    27:27:java.util.concurrent.ConcurrentHashMap access$1100(com.sonicbase.server.BulkImportManager) -> j
    27:27:java.util.concurrent.ConcurrentHashMap access$1200(com.sonicbase.server.BulkImportManager) -> k
    27:27:java.util.concurrent.ConcurrentHashMap access$1300(com.sonicbase.server.BulkImportManager) -> l
    27:27:void access$1400(com.sonicbase.server.BulkImportManager,java.sql.Connection,long,int,int,TableSchema,IndexSchema,java.lang.String,java.lang.String,ComObject) -> a
    27:27:void access$1500(com.sonicbase.server.BulkImportManager,java.sql.Connection,long,int,int,java.util.concurrent.atomic.AtomicLong,TableSchema,IndexSchema,java.lang.String,java.lang.String,ComObject) -> a
    27:27:java.util.concurrent.ConcurrentHashMap access$1600(com.sonicbase.server.BulkImportManager) -> m
    27:27:java.util.concurrent.atomic.AtomicInteger access$2400(com.sonicbase.server.BulkImportManager) -> n
com.sonicbase.server.BulkImportManager$1 -> com.sonicbase.server.a$1:
    ComObject val$cobj -> a
    java.lang.String val$dbName -> b
    java.lang.String val$tableName -> c
    com.sonicbase.server.BulkImportManager this$0 -> d
    208:208:void <init>(com.sonicbase.server.BulkImportManager,ComObject,java.lang.String,java.lang.String) -> <init>
    211:430:void run() -> run
com.sonicbase.server.BulkImportManager$1$1 -> com.sonicbase.server.a$1$1:
    TableSchema val$tableSchema -> a
    ComArray val$keys -> b
    int val$currSlice -> c
    java.lang.StringBuilder val$fieldsStr -> d
    java.lang.StringBuilder val$parmsStr -> e
    java.util.List val$fields -> f
    java.util.concurrent.atomic.AtomicLong val$countRead -> g
    java.util.concurrent.atomic.AtomicInteger val$countSubmitted -> h
    java.util.concurrent.ThreadPoolExecutor val$executor -> i
    java.sql.Connection val$insertConn -> j
    java.util.concurrent.atomic.AtomicLong val$countProcessed -> k
    java.util.concurrent.atomic.AtomicInteger val$countFinished -> l
    com.sonicbase.server.BulkImportManager$1 this$1 -> m
    258:258:void <init>(com.sonicbase.server.BulkImportManager$1,TableSchema,ComArray,int,java.lang.StringBuilder,java.lang.StringBuilder,java.util.List,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.ThreadPoolExecutor,java.sql.Connection,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicInteger) -> <init>
    261:410:void run() -> run
com.sonicbase.server.BulkImportManager$1$1$1 -> com.sonicbase.server.a$1$1$1:
    java.util.List val$batchToProcess -> a
    com.sonicbase.server.BulkImportManager$1$1 this$2 -> b
    370:370:void <init>(com.sonicbase.server.BulkImportManager$1$1,java.util.List) -> <init>
    373:375:void run() -> run
com.sonicbase.server.BulkImportManager$2 -> com.sonicbase.server.a$2:
    ComObject val$cobj -> a
    java.lang.String val$tableName -> b
    java.lang.String val$dbName -> c
    com.sonicbase.server.BulkImportManager this$0 -> d
    677:677:void <init>(com.sonicbase.server.BulkImportManager,ComObject,java.lang.String,java.lang.String) -> <init>
    680:765:void run() -> run
com.sonicbase.server.BulkImportManager$3 -> com.sonicbase.server.a$3:
    java.sql.Connection val$insertConn -> a
    java.util.concurrent.atomic.AtomicLong val$countProcessed -> b
    java.util.concurrent.atomic.AtomicInteger val$countFinished -> c
    java.util.List val$batchToProcess -> d
    java.lang.String val$tableName -> e
    java.util.List val$fields -> f
    java.lang.StringBuilder val$fieldsStr -> g
    java.lang.StringBuilder val$parmsStr -> h
    com.sonicbase.server.BulkImportManager this$0 -> i
    856:856:void <init>(com.sonicbase.server.BulkImportManager,java.sql.Connection,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicInteger,java.util.List,java.lang.String,java.util.List,java.lang.StringBuilder,java.lang.StringBuilder) -> <init>
    859:860:void run() -> run
com.sonicbase.server.BulkImportManager$4 -> com.sonicbase.server.a$4:
    java.lang.String val$dbName -> a
    java.lang.String val$tableName -> b
    byte[] val$cobjBytes -> c
    int val$serverCount -> d
    com.sonicbase.server.BulkImportManager this$0 -> e
    1532:1532:void <init>(com.sonicbase.server.BulkImportManager,java.lang.String,java.lang.String,byte[],int) -> <init>
    1535:1588:void run() -> run
com.sonicbase.server.BulkImportManager$5 -> com.sonicbase.server.a$5:
    int[] $SwitchMap$com$sonicbase$schema$DataType$Type -> a
    446:446:void <clinit>() -> <clinit>
com.sonicbase.server.BulkImportManager$BulkImportStatus -> com.sonicbase.server.a$a:
    long preProcessCountExpected -> c
    long preProcessCountProcessed -> d
    boolean preProcessFinished -> e
    java.lang.String preProcessException -> a
    long countExpected -> f
    long countProcessed -> g
    boolean finished -> h
    java.lang.String exception -> b
    97:97:void <init>() -> <init>
    97:97:void <init>(com.sonicbase.server.BulkImportManager$1) -> <init>
    97:97:long access$1802(com.sonicbase.server.BulkImportManager$BulkImportStatus,long) -> a
    97:97:long access$1902(com.sonicbase.server.BulkImportManager$BulkImportStatus,long) -> b
    97:97:boolean access$2002(com.sonicbase.server.BulkImportManager$BulkImportStatus,boolean) -> a
    97:97:long access$2102(com.sonicbase.server.BulkImportManager$BulkImportStatus,long) -> c
    97:97:long access$2202(com.sonicbase.server.BulkImportManager$BulkImportStatus,long) -> d
    97:97:boolean access$2302(com.sonicbase.server.BulkImportManager$BulkImportStatus,boolean) -> b
    97:97:boolean access$2000(com.sonicbase.server.BulkImportManager$BulkImportStatus) -> a
    97:97:boolean access$2300(com.sonicbase.server.BulkImportManager$BulkImportStatus) -> b
    97:97:long access$1900(com.sonicbase.server.BulkImportManager$BulkImportStatus) -> c
    97:97:long access$1800(com.sonicbase.server.BulkImportManager$BulkImportStatus) -> d
    97:97:long access$2200(com.sonicbase.server.BulkImportManager$BulkImportStatus) -> e
    97:97:long access$2100(com.sonicbase.server.BulkImportManager$BulkImportStatus) -> f
com.sonicbase.server.DatabaseServer -> com.sonicbase.server.b:
    java.lang.Object deathOverrideMutex -> a
    boolean[][] deathOverride -> b
    Logger logger -> j
    org.apache.log4j.Logger errorLogger -> k
    org.apache.log4j.Logger clientErrorLogger -> l
    boolean ENABLE_RECORD_COMPRESSION -> c
    java.util.concurrent.atomic.AtomicLong commandCount -> m
    int port -> n
    java.lang.String host -> o
    java.lang.String cluster -> p
    java.lang.String LICENSE_KEY -> d
    java.lang.String FOUR_SERVER_LICENSE -> e
    java.util.concurrent.atomic.AtomicBoolean isRunning -> f
    java.util.List buffers -> q
    java.util.concurrent.ThreadPoolExecutor executor -> r
    java.util.concurrent.atomic.AtomicBoolean aboveMemoryThreshold -> s
    java.lang.Exception exception -> t
    byte[] bytes -> u
    boolean compressRecords -> v
    boolean useUnsafe -> w
    java.lang.String gclog -> x
    java.lang.String xmx -> y
    java.lang.String installDir -> z
    boolean throttleInsert -> A
    com.sonicbase.server.DeleteManagerImpl deleteManagerImpl -> B
    java.util.concurrent.locks.ReentrantReadWriteLock batchLock -> C
    java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock batchReadLock -> D
    java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock batchWriteLock -> E
    java.util.concurrent.atomic.AtomicInteger batchRepartCount -> F
    boolean usingMultipleReplicas -> G
    java.lang.Boolean disableNow -> H
    boolean haveProLicense -> I
    boolean overrideProLicense -> J
    java.lang.String logSlicePoint -> K
    boolean isBackupComplete -> L
    boolean isRestoreComplete -> M
    java.lang.Exception backupException -> N
    java.lang.Exception restoreException -> O
    com.sonicbase.common.AWSClient awsClient -> P
    boolean doingBackup -> Q
    boolean onlyQueueCommands -> R
    boolean doingRestore -> S
    com.fasterxml.jackson.databind.node.ObjectNode backupConfig -> T
    java.lang.Object restoreAwsMutex -> U
    boolean dead -> V
    boolean applyingQueuesAndInteractive -> W
    com.sonicbase.server.MethodInvoker methodInvoker -> X
    com.sonicbase.server.DatabaseServer$AddressMap addressMap -> Y
    boolean shutdownMasterValidatorThread -> Z
    java.lang.Thread masterLicenseValidatorThread -> aa
    java.lang.String disableDate -> ab
    java.lang.Boolean multipleLicenseServers -> ac
    com.sonicbase.server.BulkImportManager bulkImportManager -> ad
    com.sonicbase.server.StreamManager streamManager -> ae
    DatabaseCommon common -> af
    java.util.concurrent.atomic.AtomicReference client -> ag
    sun.misc.Unsafe unsafe -> ah
    com.sonicbase.server.PartitionManager repartitioner -> ai
    java.util.concurrent.atomic.AtomicLong nextRecordId -> aj
    int recordsByIdPartitionCount -> ak
    com.fasterxml.jackson.databind.node.ObjectNode config -> al
    DatabaseClient$Replica role -> am
    int shard -> an
    int shardCount -> ao
    java.util.Map indexes -> ap
    com.sonicbase.server.LongRunningCalls longRunningCommands -> aq
    java.lang.String dataDir -> ar
    int replica -> as
    int replicationFactor -> at
    java.lang.String masterAddress -> au
    int masterPort -> av
    com.sonicbase.server.UpdateManager updateManager -> aw
    com.sonicbase.server.DeltaManager deltaManager -> ax
    com.sonicbase.server.TransactionManager transactionManager -> ay
    com.sonicbase.server.ReadManager readManager -> az
    com.sonicbase.server.LogManager logManager -> aA
    com.sonicbase.server.SchemaManager schemaManager -> aB
    int cronIdentity -> aC
    java.lang.Thread[][] deathMonitorThreads -> aD
    boolean shutdownDeathMonitor -> g
    java.lang.Object deathMonitorMutex -> aE
    java.lang.Thread deathReportThread -> aF
    int replicaDeadForRestart -> aG
    java.util.Map numberOfCoresPerServer -> aH
    java.lang.String lastBackupDir -> aI
    java.lang.Exception finalRestoreException -> aJ
    java.lang.Exception finalBackupException -> aK
    java.util.concurrent.locks.ReentrantReadWriteLock throttleLock -> aL
    java.util.concurrent.locks.Lock throttleWriteLock -> aM
    java.util.concurrent.locks.Lock throttleReadLock -> aN
    int pid -> aO
    double avgTransRate -> aP
    double avgRecRate -> aQ
    java.lang.String OS -> aR
    java.lang.String algorithm -> aS
    boolean isServerRoloadRunning -> aT
    boolean shutdown -> aU
    net.jpountz.lz4.LZ4Factory factory -> h
    long TIME_2017 -> i
    java.lang.Object nextIdLock -> aV
    130:136:sun.misc.Unsafe getUnsafe() -> au
    76:4557:void <init>() -> <init>
    188:188:org.apache.log4j.Logger getErrorLogger() -> a
    192:192:org.apache.log4j.Logger getClientErrorLogger() -> b
    198:199:void setConfig(com.fasterxml.jackson.databind.node.ObjectNode,java.lang.String,java.lang.String,int,java.util.concurrent.atomic.AtomicBoolean,java.lang.String,java.lang.String,boolean) -> a
    204:205:void setConfig(com.fasterxml.jackson.databind.node.ObjectNode,java.lang.String,java.lang.String,int,boolean,java.util.concurrent.atomic.AtomicBoolean,java.lang.String,boolean) -> a
    217:392:void setConfig(com.fasterxml.jackson.databind.node.ObjectNode,java.lang.String,java.lang.String,int,boolean,java.util.concurrent.atomic.AtomicBoolean,boolean,java.lang.String,java.lang.String,boolean) -> a
    395:396:void setBackupConfig(com.fasterxml.jackson.databind.node.ObjectNode) -> a
    399:407:void initDeathOverride(int,int) -> a
    410:410:int getTestWriteCallCount() -> c
    414:512:void startMasterMonitor() -> d
    515:628:boolean electNewMaster(int,int,int[],int[],java.util.concurrent.atomic.AtomicInteger) -> a
    632:669:ComObject promoteEntireReplicaToMaster(ComObject) -> a
    673:687:ComObject electNewMaster(ComObject) -> b
    692:710:ComObject promoteToMaster(ComObject) -> c
    715:738:void shutdownDeathMonitor() -> av
    746:844:void startDeathMonitor() -> aw
    847:862:void handleHealthChange(java.util.concurrent.atomic.AtomicBoolean,boolean,boolean,int,int) -> a
    868:938:void checkHealthOfServer(int,int,java.util.concurrent.atomic.AtomicBoolean,boolean) -> a
    941:941:com.sonicbase.common.AWSClient getAWSClient() -> e
    946:955:void disable() -> f
    958:958:java.util.concurrent.ThreadPoolExecutor getExecutor() -> g
    962:962:java.lang.Thread[][] getDeathMonitorThreads() -> h
    969:1006:void getSchemaFromPossibleMaster() -> i
    1011:1059:boolean isNoLongerMaster() -> j
    1063:1064:void setReplicaDeadForRestart(int) -> a
    1067:1067:boolean isApplyingQueuesAndInteractive() -> k
    1071:1071:boolean shouldDisableNow() -> l
    1075:1075:boolean isUsingMultipleReplicas() -> m
    1079:1079:boolean onlyQueueCommands() -> n
    1083:1083:java.lang.String getInstallDir() -> o
    1087:1087:boolean haveProLicense() -> p
    1091:1091:Logger getLogger() -> q
    1095:1095:com.sonicbase.server.StreamManager getStreamManager() -> r
    1099:1099:com.sonicbase.server.DeltaManager getDeltaManager() -> s
    1127:1199:void startMasterLicenseValidator() -> ax
    1202:1289:void doValidateLicense(java.lang.String,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicBoolean) -> a
    1292:1304:void shutdownMasterLicenseValidator() -> ay
    1307:1383:void startLicenseValidator() -> az
    1386:1418:void checkLicense(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicBoolean) -> a
    1421:1445:ComObject licenseCheckin(ComObject) -> d
    1450:1460:ComObject prepareForBackup(ComObject) -> e
    1464:1496:ComObject doBackupFileSystem(ComObject) -> f
    1501:1510:void backupFileSystemSingleDir(java.lang.String,java.lang.String,java.lang.String) -> a
    1513:1544:ComObject doBackupAWS(ComObject) -> g
    1548:1555:void backupAWSSingleDir(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    1559:1567:ComObject isBackupComplete(ComObject) -> h
    1573:1588:ComObject finishBackup(ComObject) -> i
    1593:1613:void doDeleteFileSystemBackups(java.lang.String,int) -> a
    1617:1626:ComObject isEntireBackupComplete(ComObject) -> j
    1632:1656:byte[] startBackup(ComObject) -> k
    1671:1706:void scheduleBackup() -> t
    1711:1715:ComObject getLastBackupDir(ComObject) -> l
    1720:1877:void doBackup() -> u
    1880:1897:void doDeleteAWSBackups(java.lang.String,java.lang.String,java.lang.Integer) -> a
    1901:1924:ComObject prepareForRestore(ComObject) -> m
    1930:1982:ComObject doRestoreFileSystem(ComObject) -> n
    1987:2001:void restoreFileSystemSingleDir(java.lang.String,java.lang.String,java.lang.String) -> b
    2004:2034:ComObject doRestoreAWS(ComObject) -> o
    2039:2051:void restoreAWSSingleDir(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> b
    2055:2063:ComObject isRestoreComplete(ComObject) -> p
    2070:2077:ComObject finishRestore(ComObject) -> q
    2082:2086:void prepareDataFromRestore() -> aA
    2090:2099:ComObject isEntireRestoreComplete(ComObject) -> r
    2104:2122:ComObject startRestore(ComObject) -> s
    2130:2281:void doRestore(java.lang.String) -> e
    2285:2285:void setMinSizeForRepartition(int) -> b
    2288:2288:long getCommandCount() -> v
    2292:2292:int getReplicationFactor() -> w
    2296:2312:DatabaseClient getDatabaseClient() -> x
    2316:2316:int getSchemaVersion() -> y
    2320:2320:DatabaseCommon getCommon() -> z
    2324:2324:com.sonicbase.server.TransactionManager getTransactionManager() -> A
    2328:2328:com.sonicbase.server.UpdateManager getUpdateManager() -> B
    2332:2332:com.sonicbase.server.LogManager getLogManager() -> C
    2336:2336:com.sonicbase.server.SchemaManager getSchemaManager() -> D
    2340:2340:com.sonicbase.server.PartitionManager getRepartitioner() -> E
    2344:2345:void enableSnapshot(boolean) -> a
    2348:2353:void runSnapshot() -> F
    2357:2361:void recoverFromSnapshot() -> G
    2364:2373:void purgeMemory() -> H
    2376:2377:void replayLogs() -> I
    2380:2380:java.lang.String getCluster() -> J
    2384:2385:void setShardCount(int) -> c
    2388:2395:void truncateTablesQuietly() -> K
    2398:2413:double getResGigWindows() -> L
    2419:2433:double getCpuUtilizationWindows() -> M
    2446:2455:java.lang.String getDiskAvailWindows() -> N
    2460:2461:void setThrottleInsert(boolean) -> b
    2464:2464:boolean isThrottleInsert() -> O
    2468:2468:com.sonicbase.server.DeleteManagerImpl getDeleteManager() -> P
    2472:2472:java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock getBatchReadLock() -> Q
    2476:2476:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock getBatchWriteLock() -> R
    2485:2485:java.util.concurrent.locks.Lock getThrottleWriteLock() -> S
    2489:2489:java.util.concurrent.locks.Lock getThrottleReadLock() -> T
    2493:2493:java.util.concurrent.atomic.AtomicInteger getBatchRepartCount() -> U
    2497:2498:void overrideProLicense() -> V
    2503:2503:java.util.concurrent.atomic.AtomicBoolean getAboveMemoryThreshold() -> W
    2528:2547:void startMemoryMonitor() -> aB
    2550:2687:java.lang.Double checkResidentMemory() -> aC
    2916:2964:java.lang.String getDiskAvailable() -> aD
    2979:3072:com.sonicbase.server.DatabaseServer$OSStats doGetOSStats() -> X
    3077:3092:ComObject getOSStats(ComObject) -> t
    3097:3154:void getJavaMemStats(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference) -> a
    3158:3250:void checkJavaHeap(java.lang.Double) -> a
    3255:3255:boolean isWindows() -> aE
    3259:3259:boolean isMac() -> aF
    3263:3263:boolean isUnix() -> aG
    3267:3267:boolean isRunning() -> Y
    3271:3271:com.sonicbase.server.LongRunningCalls getLongRunningCommands() -> Z
    3275:3282:ComObject areAllLongRunningCommandsComplete(ComObject) -> u
    3286:3289:void startLongRunningCommands() -> aH
    3295:3301:java.lang.String createLicense(int) -> d
    3308:3362:void validateLicense(com.fasterxml.jackson.databind.node.ObjectNode) -> b
    3367:3370:byte[] encryptF(java.lang.String,java.security.Key,javax.crypto.Cipher) -> a
    3375:3379:java.lang.String decryptF(byte[],java.security.Key,javax.crypto.Cipher) -> a
    3383:3397:void syncDbNames() -> aI
    3401:3415:java.util.List getDbNames(java.lang.String) -> a
    3419:3429:void startRepartitioner() -> aa
    3432:3432:int getReplica() -> ab
    3437:3455:void initServersForUnitTest(java.lang.String,int,boolean,ServersConfig) -> a
    3458:3464:boolean isIdInField(java.lang.String,java.lang.String) -> a
    3468:3473:com.sonicbase.index.Indices getIndices(java.lang.String) -> b
    3477:3477:java.util.Map getIndices() -> ac
    3481:3481:DatabaseClient getClient() -> ad
    3485:3485:int getShard() -> ae
    3489:3489:int getShardCount() -> af
    3493:3493:int getRecordsByIdPartitionCount() -> ag
    3497:3498:void disableLogProcessor() -> ah
    3501:3510:void shutdownRepartitioner() -> ai
    3515:3540:void pushSchema() -> aj
    3544:3580:ComObject prepareSourceForServerReload(ComObject) -> v
    3585:3588:ComObject isServerReloadFinished(ComObject) -> w
    3594:3642:ComObject reloadServer(ComObject) -> x
    3647:3659:ComObject getDatabaseFile(ComObject) -> y
    3664:3695:void downloadFilesForReload(ComArray) -> a
    3698:3704:java.lang.String fixReplica(java.lang.String,java.lang.String) -> b
    3709:3720:ComObject updateServersConfig(ComObject) -> z
    3724:3742:void pushServersConfig() -> ak
    3745:3745:java.lang.String getDataDir() -> al
    3751:3756:void setRole(java.lang.String) -> c
    3759:3759:com.fasterxml.jackson.databind.node.ObjectNode getConfig() -> am
    3763:3763:DatabaseClient$Replica getRole() -> an
    3769:3772:void shutdown() -> ao
    3879:3880:java.lang.Object toUnsafeFromRecords(byte[][]) -> a
    3884:3990:java.lang.Object toUnsafeFromRecords(long,byte[][]) -> a
    4000:4001:java.lang.Object toUnsafeFromKeys(byte[][]) -> b
    4006:4106:java.lang.Object toUnsafeFromKeys(long,byte[][]) -> b
    4113:4122:long getUpdateTime(java.lang.Object) -> a
    4128:4215:byte[][] fromUnsafeToRecords(java.lang.Object) -> b
    4221:4307:byte[][] fromUnsafeToKeys(java.lang.Object) -> c
    4313:4329:void freeUnsafeIds(java.lang.Object) -> d
    4332:4332:com.sonicbase.server.DatabaseServer$AddressMap getAddressMap() -> ap
    4429:4429:byte[] invokeMethod(byte[],boolean,boolean) -> a
    4434:4434:byte[] invokeMethod(byte[],long,long,boolean,boolean,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong) -> a
    4439:4446:void purge(java.lang.String) -> d
    4449:4487:ComObject prepareToComeAlive(ComObject) -> A
    4491:4527:ComObject reconfigureCluster(ComObject) -> B
    4533:4553:ComObject reserveNextIdFromReplica(ComObject) -> C
    4560:4603:ComObject allocateRecordIds(ComObject) -> D
    4609:4622:ComObject pushMaxRecordId(ComObject) -> E
    4627:4644:void pushMaxRecordId(java.lang.String,long) -> a
    4647:4670:ComObject setMaxRecordId(ComObject) -> F
    4694:4698:Record evaluateRecordForQuery(TableSchema,Record,ExpressionImpl,ParameterHandler) -> a
    67:67:Logger access$100(com.sonicbase.server.DatabaseServer) -> a
    67:67:com.fasterxml.jackson.databind.node.ObjectNode access$200(com.sonicbase.server.DatabaseServer) -> b
    67:67:int access$300(com.sonicbase.server.DatabaseServer) -> c
    67:67:int access$400(com.sonicbase.server.DatabaseServer) -> d
    67:67:int access$500(com.sonicbase.server.DatabaseServer) -> e
    67:67:boolean access$600(com.sonicbase.server.DatabaseServer,int,int,int[],int[],java.util.concurrent.atomic.AtomicInteger) -> a
    67:67:DatabaseCommon access$700(com.sonicbase.server.DatabaseServer) -> f
    67:67:int access$800(com.sonicbase.server.DatabaseServer) -> g
    67:67:void access$900(com.sonicbase.server.DatabaseServer) -> h
    67:67:void access$1000(com.sonicbase.server.DatabaseServer) -> i
    67:67:void access$1100(com.sonicbase.server.DatabaseServer,java.util.concurrent.atomic.AtomicBoolean,boolean,boolean,int,int) -> a
    67:67:boolean access$1400(com.sonicbase.server.DatabaseServer) -> j
    67:67:void access$1500(com.sonicbase.server.DatabaseServer,java.lang.String,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicBoolean) -> a
    67:67:java.lang.String access$1600(com.sonicbase.server.DatabaseServer) -> k
    67:67:boolean access$1702(com.sonicbase.server.DatabaseServer,boolean) -> a
    67:67:java.lang.Boolean access$1802(com.sonicbase.server.DatabaseServer,java.lang.Boolean) -> a
    67:67:org.apache.log4j.Logger access$1900() -> aq
    67:67:void access$2000(com.sonicbase.server.DatabaseServer,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicBoolean) -> a
    67:67:void access$2100(com.sonicbase.server.DatabaseServer,java.lang.String,java.lang.String,java.lang.String) -> a
    67:67:com.sonicbase.server.DeleteManagerImpl access$2200(com.sonicbase.server.DatabaseServer) -> l
    67:67:com.sonicbase.server.LongRunningCalls access$2300(com.sonicbase.server.DatabaseServer) -> m
    67:67:com.sonicbase.server.DeltaManager access$2400(com.sonicbase.server.DatabaseServer) -> n
    67:67:java.lang.String access$2500(com.sonicbase.server.DatabaseServer) -> o
    67:67:com.sonicbase.server.LogManager access$2600(com.sonicbase.server.DatabaseServer) -> p
    67:67:boolean access$2702(com.sonicbase.server.DatabaseServer,boolean) -> b
    67:67:java.lang.Exception access$2802(com.sonicbase.server.DatabaseServer,java.lang.Exception) -> a
    67:67:void access$2900(com.sonicbase.server.DatabaseServer,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    67:67:boolean access$3000(com.sonicbase.server.DatabaseServer) -> q
    67:67:boolean access$3002(com.sonicbase.server.DatabaseServer,boolean) -> c
    67:67:void access$3100(com.sonicbase.server.DatabaseServer,java.lang.String,java.lang.String,java.lang.String) -> b
    67:67:void access$3200(com.sonicbase.server.DatabaseServer) -> r
    67:67:boolean access$3302(com.sonicbase.server.DatabaseServer,boolean) -> d
    67:67:java.lang.Exception access$3402(com.sonicbase.server.DatabaseServer,java.lang.Exception) -> b
    67:67:void access$3500(com.sonicbase.server.DatabaseServer,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> b
    67:67:void access$3600(com.sonicbase.server.DatabaseServer,java.lang.String) -> a
    67:67:java.lang.Double access$3700(com.sonicbase.server.DatabaseServer) -> s
    67:67:void access$3800(com.sonicbase.server.DatabaseServer,java.lang.Double) -> a
    67:67:boolean access$3900() -> ar
    67:67:double access$4002(com.sonicbase.server.DatabaseServer,double) -> a
    67:67:double access$4102(com.sonicbase.server.DatabaseServer,double) -> b
    67:67:boolean access$4200() -> as
    67:67:java.lang.String access$4300(com.sonicbase.server.DatabaseServer) -> t
    67:67:boolean access$4400() -> at
    67:67:boolean access$4502(com.sonicbase.server.DatabaseServer,boolean) -> e
    67:67:void access$4600(com.sonicbase.server.DatabaseServer,ComArray) -> a
    69:3997:void <clinit>() -> <clinit>
com.sonicbase.server.DatabaseServer$1 -> com.sonicbase.server.b$1:
    com.sonicbase.server.DatabaseServer this$0 -> a
    418:418:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    423:436:void run() -> run
com.sonicbase.server.DatabaseServer$10 -> com.sonicbase.server.b$2:
    java.util.concurrent.atomic.AtomicBoolean val$lastHaveProLicense -> a
    java.util.concurrent.atomic.AtomicBoolean val$haventSet -> b
    com.sonicbase.server.DatabaseServer this$0 -> c
    1343:1343:void <init>(com.sonicbase.server.DatabaseServer,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicBoolean) -> <init>
    1347:1375:void run() -> run
com.sonicbase.server.DatabaseServer$11 -> com.sonicbase.server.b$3:
    ComObject val$cobj -> a
    com.sonicbase.server.DatabaseServer this$0 -> b
    1464:1464:void <init>(com.sonicbase.server.DatabaseServer,ComObject) -> <init>
    1468:1493:void run() -> run
com.sonicbase.server.DatabaseServer$12 -> com.sonicbase.server.b$4:
    ComObject val$cobj -> a
    com.sonicbase.server.DatabaseServer this$0 -> b
    1513:1513:void <init>(com.sonicbase.server.DatabaseServer,ComObject) -> <init>
    1517:1541:void run() -> run
com.sonicbase.server.DatabaseServer$13 -> com.sonicbase.server.b$5:
    com.sonicbase.server.DatabaseServer this$0 -> a
    1596:1596:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    1599:1599:int compare(java.io.File,java.io.File) -> a
    1596:1596:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.server.DatabaseServer$14 -> com.sonicbase.server.b$6:
    boolean val$wasDoingBackup -> a
    com.sonicbase.server.DatabaseServer this$0 -> b
    1638:1638:void <init>(com.sonicbase.server.DatabaseServer,boolean) -> <init>
    1642:1653:void run() -> run
com.sonicbase.server.DatabaseServer$15 -> com.sonicbase.server.b$7:
    com.sonicbase.server.DatabaseServer this$0 -> a
    1881:1881:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    1884:1884:int compare(java.lang.String,java.lang.String) -> a
    1881:1881:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.server.DatabaseServer$16 -> com.sonicbase.server.b$8:
    ComObject val$cobj -> a
    com.sonicbase.server.DatabaseServer this$0 -> b
    1930:1930:void <init>(com.sonicbase.server.DatabaseServer,ComObject) -> <init>
    1934:1978:void run() -> run
com.sonicbase.server.DatabaseServer$17 -> com.sonicbase.server.b$9:
    ComObject val$cobj -> a
    com.sonicbase.server.DatabaseServer this$0 -> b
    2004:2004:void <init>(com.sonicbase.server.DatabaseServer,ComObject) -> <init>
    2009:2030:void run() -> run
com.sonicbase.server.DatabaseServer$18 -> com.sonicbase.server.b$10:
    ComObject val$cobj -> a
    com.sonicbase.server.DatabaseServer this$0 -> b
    2108:2108:void <init>(com.sonicbase.server.DatabaseServer,ComObject) -> <init>
    2112:2119:void run() -> run
com.sonicbase.server.DatabaseServer$19 -> com.sonicbase.server.b$11:
    com.sonicbase.server.DatabaseServer this$0 -> a
    2528:2528:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    2533:2541:void run() -> run
com.sonicbase.server.DatabaseServer$2 -> com.sonicbase.server.b$12:
    com.sonicbase.server.DatabaseServer this$0 -> a
    442:442:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    445:509:void run() -> run
com.sonicbase.server.DatabaseServer$2$1 -> com.sonicbase.server.b$12$1:
    int val$shard -> a
    int[] val$monitorShards -> b
    int[] val$monitorReplicas -> c
    com.sonicbase.server.DatabaseServer$2 this$1 -> d
    465:465:void <init>(com.sonicbase.server.DatabaseServer$2,int,int[],int[]) -> <init>
    468:502:void run() -> run
com.sonicbase.server.DatabaseServer$20 -> com.sonicbase.server.b$13:
    com.sonicbase.server.DatabaseServer this$0 -> a
    3594:3594:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    3598:3638:void run() -> run
com.sonicbase.server.DatabaseServer$3 -> com.sonicbase.server.b$14:
    int val$localShard -> a
    int val$newReplica -> b
    com.sonicbase.server.DatabaseServer this$0 -> c
    644:644:void <init>(com.sonicbase.server.DatabaseServer,int,int) -> <init>
    647:655:java.lang.Object call() -> call
com.sonicbase.server.DatabaseServer$4 -> com.sonicbase.server.b$15:
    com.sonicbase.server.DatabaseServer this$0 -> a
    748:748:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    753:778:void run() -> run
com.sonicbase.server.DatabaseServer$5 -> com.sonicbase.server.b$16:
    int val$shard -> a
    int val$replica -> b
    com.sonicbase.server.DatabaseServer this$0 -> c
    798:798:void <init>(com.sonicbase.server.DatabaseServer,int,int) -> <init>
    801:838:void run() -> run
com.sonicbase.server.DatabaseServer$6 -> com.sonicbase.server.b$17:
    int val$shard -> a
    int val$replica -> b
    java.util.concurrent.atomic.AtomicBoolean val$isHealthy -> c
    java.util.concurrent.atomic.AtomicBoolean val$finished -> d
    com.sonicbase.server.DatabaseServer this$0 -> e
    885:885:void <init>(com.sonicbase.server.DatabaseServer,int,int,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicBoolean) -> <init>
    888:926:void run() -> run
com.sonicbase.server.DatabaseServer$7 -> com.sonicbase.server.b$18:
    java.lang.String val$address -> a
    java.util.concurrent.atomic.AtomicInteger val$licensePort -> b
    java.util.concurrent.atomic.AtomicBoolean val$lastHaveProLicense -> c
    java.util.concurrent.atomic.AtomicBoolean val$haventSet -> d
    com.sonicbase.server.DatabaseServer this$0 -> e
    1166:1166:void <init>(com.sonicbase.server.DatabaseServer,java.lang.String,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicBoolean) -> <init>
    1169:1192:void run() -> run
com.sonicbase.server.DatabaseServer$8 -> com.sonicbase.server.b$19:
    com.sonicbase.server.DatabaseServer this$0 -> a
    1214:1214:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    1216:1216:java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    1220:1220:void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    1223:1223:void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
com.sonicbase.server.DatabaseServer$9 -> com.sonicbase.server.b$20:
    com.sonicbase.server.DatabaseServer this$0 -> a
    1233:1233:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    1236:1236:boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
com.sonicbase.server.DatabaseServer$AddressMap -> com.sonicbase.server.b$a:
    it.unimi.dsi.fastutil.longs.Long2LongOpenHashMap[] map -> a
    java.util.concurrent.atomic.AtomicLong currOuterAddress -> b
    3816:3824:void <init>() -> <init>
    3827:3827:java.lang.Object getMutex(long) -> a
    3831:3838:long addAddress(long) -> b
    3842:3848:java.lang.Long getAddress(long) -> c
    3852:3858:java.lang.Long removeAddress(long) -> d
com.sonicbase.server.DatabaseServer$BackupJob -> com.sonicbase.server.b$b:
    1659:1659:void <init>() -> <init>
    1663:1666:void execute(org.quartz.JobExecutionContext) -> a
com.sonicbase.server.DatabaseServer$Entry -> com.sonicbase.server.b$c:
    long id -> b
    java.lang.Object[] key -> c
    java.util.concurrent.CountDownLatch latch -> d
    com.sonicbase.server.DatabaseServer this$0 -> a
    4680:4687:void <init>(com.sonicbase.server.DatabaseServer,long,java.lang.Object[]) -> <init>
com.sonicbase.server.DatabaseServer$IndexValue -> com.sonicbase.server.b$d:
    long updateTime -> a
    byte[][] records -> b
    byte[] bytes -> c
    com.sonicbase.server.DatabaseServer this$0 -> d
    3867:3870:void <init>(com.sonicbase.server.DatabaseServer,long,byte[][]) -> <init>
    3872:3875:void <init>(com.sonicbase.server.DatabaseServer,long,byte[]) -> <init>
com.sonicbase.server.DatabaseServer$LogRequest -> com.sonicbase.server.b$e:
    byte[] buffer -> a
    java.util.concurrent.CountDownLatch latch -> b
    java.util.List buffers -> c
    long[] sequenceNumbers -> d
    long[] times -> e
    long begin -> f
    java.util.concurrent.atomic.AtomicLong timeLogging -> g
    4342:4352:void <init>(int) -> <init>
    4356:4356:byte[] getBuffer() -> a
    4362:4363:void setBuffer(byte[]) -> a
    4366:4366:java.util.concurrent.CountDownLatch getLatch() -> b
    4370:4371:void setLatch(java.util.concurrent.CountDownLatch) -> a
    4374:4375:void setBuffers(java.util.List) -> a
    4378:4378:java.util.List getBuffers() -> c
    4382:4382:long[] getSequences1() -> d
    4386:4386:long[] getSequences0() -> e
    4390:4391:void setBegin(long) -> a
    4394:4395:void setTimeLogging(java.util.concurrent.atomic.AtomicLong) -> a
    4398:4398:java.util.concurrent.atomic.AtomicLong getTimeLogging() -> f
    4402:4402:long getBegin() -> g
com.sonicbase.server.DatabaseServer$NetMonitor -> com.sonicbase.server.b$f:
    com.sonicbase.server.DatabaseServer this$0 -> a
    2694:2694:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    2696:2912:void run() -> run
com.sonicbase.server.DatabaseServer$NullHostnameVerifier -> com.sonicbase.server.b$g:
    1116:1116:void <init>() -> <init>
    1118:1118:boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
    1116:1116:void <init>(com.sonicbase.server.DatabaseServer$1) -> <init>
com.sonicbase.server.DatabaseServer$NullX509TrustManager -> com.sonicbase.server.b$h:
    1102:1102:void <init>() -> <init>
    1104:1105:void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    1108:1109:void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    1112:1112:java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    1102:1102:void <init>(com.sonicbase.server.DatabaseServer$1) -> <init>
com.sonicbase.server.DatabaseServer$OSStats -> com.sonicbase.server.b$i:
    double resGig -> a
    double cpu -> b
    double javaMemMin -> c
    double javaMemMax -> d
    double avgRecRate -> e
    double avgTransRate -> f
    java.lang.String diskAvail -> g
    com.sonicbase.server.DatabaseServer this$0 -> h
    2968:2968:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
com.sonicbase.server.DatabaseServer$Response -> com.sonicbase.server.b$j:
    byte[] bytes -> a
    java.lang.Exception exception -> b
    4411:4413:void <init>(java.lang.Exception) -> <init>
    4415:4417:void <init>(byte[]) -> <init>
    4420:4420:java.lang.Exception getException() -> a
    4424:4424:byte[] getBytes() -> b
com.sonicbase.server.DatabaseServer$ResultType -> com.sonicbase.server.b$k:
    com.sonicbase.server.DatabaseServer$ResultType records -> a
    com.sonicbase.server.DatabaseServer$ResultType integer -> b
    com.sonicbase.server.DatabaseServer$ResultType bool -> c
    com.sonicbase.server.DatabaseServer$ResultType schema -> d
    int type -> e
    com.sonicbase.server.DatabaseServer$ResultType[] $VALUES -> f
    4702:4702:com.sonicbase.server.DatabaseServer$ResultType[] values() -> a
    4702:4702:com.sonicbase.server.DatabaseServer$ResultType valueOf(java.lang.String) -> a
    4710:4712:void <init>(java.lang.String,int,int) -> <init>
    4715:4715:int getType() -> b
    4702:4706:void <clinit>() -> <clinit>
com.sonicbase.server.DatabaseServer$StatsMonitor -> com.sonicbase.server.b$l:
    com.sonicbase.server.DatabaseServer this$0 -> a
    4720:4720:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    4725:4737:void run() -> run
    4720:4720:void <init>(com.sonicbase.server.DatabaseServer,com.sonicbase.server.DatabaseServer$1) -> <init>
com.sonicbase.server.DeleteManagerImpl -> com.sonicbase.server.c:
    Logger logger -> a
    com.sonicbase.server.DatabaseServer databaseServer -> b
    java.util.concurrent.ThreadPoolExecutor executor -> c
    java.lang.Thread mainThread -> d
    java.util.concurrent.ThreadPoolExecutor freeExecutor -> e
    com.sonicbase.server.LogManager deltaLogManager -> f
    java.util.concurrent.atomic.AtomicReference counterStream -> g
    long totalBytes -> h
    java.util.concurrent.atomic.AtomicLong bytesRead -> i
    java.util.concurrent.atomic.AtomicBoolean isForcingDeletes -> j
    34:1272:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    44:44:com.sonicbase.server.LogManager getDeltaLogManager() -> a
    48:67:void deleteOldLogs(long) -> a
    122:346:void applyDeletesToSnapshot(java.lang.String,int,java.util.concurrent.atomic.AtomicLong) -> a
    351:361:com.sonicbase.server.DeleteManagerImpl$MergeEntry readRow(com.sonicbase.server.DeleteManagerImpl$DeleteContext) -> a
    368:378:com.sonicbase.server.DeltaManager$MergeEntry readRow(com.sonicbase.server.DeleteManagerImpl$DeltaContext) -> a
    384:391:void cycleDeletedFile(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicInteger,long,java.lang.String,java.lang.String) -> a
    395:429:void buildDeletionsFiles(java.lang.String,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong) -> a
    433:456:void mergeSort(java.lang.String,java.util.Map,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong) -> a
    473:561:void mergeSort(java.lang.String,int,int,java.io.File,java.util.concurrent.atomic.AtomicLong) -> a
    565:576:java.io.DataOutputStream writeRow(com.sonicbase.server.DeleteManagerImpl$MergeEntry,java.io.DataOutputStream,TableSchema,IndexSchema,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicInteger,java.io.File) -> a
    581:596:com.sonicbase.server.DeleteManagerImpl$MergeEntry readRow(java.lang.String,TableSchema,IndexSchema,java.io.DataInputStream) -> a
    601:674:void writeLogDeletes(java.util.concurrent.ThreadPoolExecutor,java.lang.String,java.util.Map,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong) -> a
    678:688:void closeFiles(java.lang.String,java.util.Map) -> a
    693:790:void writeBatchDeletes(java.util.concurrent.ThreadPoolExecutor,java.util.Map,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong) -> a
    794:832:void cycleFile(java.lang.String,int,int,com.sonicbase.server.DeleteManagerImpl$OutputState,boolean,boolean) -> a
    837:853:void saveDeleteForRecord(java.lang.String,java.lang.String,java.lang.String,long,long,com.sonicbase.server.DeleteManagerImpl$DeleteRequestForRecord) -> a
    858:876:void saveDeleteForKeyRecord(java.lang.String,java.lang.String,java.lang.String,long,long,com.sonicbase.server.DeleteManagerImpl$DeleteRequestForKeyRecord) -> a
    880:882:void saveDeletesForRecords(java.lang.String,java.lang.String,java.lang.String,long,long,java.util.concurrent.ConcurrentLinkedQueue) -> a
    886:888:void saveDeletesForKeyRecords(java.lang.String,java.lang.String,java.lang.String,long,long,java.util.concurrent.ConcurrentLinkedQueue) -> b
    893:918:void doSaveDeletesForRecords(java.io.File,java.lang.String,java.lang.String,java.lang.String,long,long,java.util.concurrent.ConcurrentLinkedQueue) -> a
    923:950:void doSaveDeletesForKeyRecords(java.io.File,java.lang.String,java.lang.String,java.lang.String,long,long,java.util.concurrent.ConcurrentLinkedQueue) -> b
    956:1129:void doDeletes(boolean) -> a
    1140:1156:void doFreeMemory(java.util.List) -> b
    1159:1159:java.io.File getReplicaRoot() -> f
    1163:1163:java.io.File getStandardRoot() -> g
    1167:1167:java.io.File getDeltaRoot() -> h
    1172:1187:void start() -> b
    1190:1197:void backupAWS(java.lang.String,java.lang.String,java.lang.String) -> a
    1201:1213:void restoreAWS(java.lang.String,java.lang.String,java.lang.String) -> b
    1217:1226:void backupFileSystem(java.lang.String,java.lang.String) -> a
    1230:1243:void restoreFileSystem(java.lang.String,java.lang.String) -> b
    1246:1253:void getFiles(java.util.List) -> a
    1260:1269:double getPercentDeleteComplete() -> c
    1275:1275:boolean isForcingDeletes() -> d
    1279:1301:void forceDeletes() -> e
    24:24:com.sonicbase.server.DatabaseServer access$1600(com.sonicbase.server.DeleteManagerImpl) -> a
    24:24:void access$1700(com.sonicbase.server.DeleteManagerImpl,java.lang.String,int,int,com.sonicbase.server.DeleteManagerImpl$OutputState,boolean,boolean) -> a
    24:24:com.sonicbase.server.LogManager access$1800(com.sonicbase.server.DeleteManagerImpl) -> b
    24:24:Logger access$1900(com.sonicbase.server.DeleteManagerImpl) -> c
    24:24:void access$2200(com.sonicbase.server.DeleteManagerImpl,java.util.List) -> a
com.sonicbase.server.DeleteManagerImpl$1 -> com.sonicbase.server.c$1:
    java.util.Comparator[] val$keyComparator -> a
    com.sonicbase.server.DeleteManagerImpl this$0 -> b
    489:489:void <init>(com.sonicbase.server.DeleteManagerImpl,java.util.Comparator[]) -> <init>
    492:492:int compare(com.sonicbase.server.DeleteManagerImpl$MergeRow,com.sonicbase.server.DeleteManagerImpl$MergeRow) -> a
    489:489:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.server.DeleteManagerImpl$2 -> com.sonicbase.server.c$2:
    java.util.concurrent.atomic.AtomicLong val$finishedBytes -> a
    java.io.File val$file -> b
    java.lang.String val$dbName -> c
    java.util.Map val$streams -> d
    com.sonicbase.server.DeleteManagerImpl this$0 -> e
    610:610:void <init>(com.sonicbase.server.DeleteManagerImpl,java.util.concurrent.atomic.AtomicLong,java.io.File,java.lang.String,java.util.Map) -> <init>
    613:658:java.lang.Object call() -> call
com.sonicbase.server.DeleteManagerImpl$2$1 -> com.sonicbase.server.c$2$1:
    com.sonicbase.server.DeleteManagerImpl$2 this$1 -> a
    613:613:void <init>(com.sonicbase.server.DeleteManagerImpl$2) -> <init>
    617:655:boolean visit(byte[]) -> a
com.sonicbase.server.DeleteManagerImpl$3 -> com.sonicbase.server.c$3:
    com.sonicbase.server.DeleteManagerImpl this$0 -> a
    707:707:void <init>(com.sonicbase.server.DeleteManagerImpl) -> <init>
    710:710:int compare(java.io.File,java.io.File) -> a
    707:707:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.server.DeleteManagerImpl$4 -> com.sonicbase.server.c$4:
    java.util.concurrent.atomic.AtomicLong val$finishedBytes -> a
    java.io.File val$file -> b
    java.util.Map val$streams -> c
    com.sonicbase.server.DeleteManagerImpl this$0 -> d
    715:715:void <init>(com.sonicbase.server.DeleteManagerImpl,java.util.concurrent.atomic.AtomicLong,java.io.File,java.util.Map) -> <init>
    718:773:java.lang.Object call() -> call
com.sonicbase.server.DeleteManagerImpl$5 -> com.sonicbase.server.c$5:
    java.util.Comparator[] val$comparators -> a
    com.sonicbase.server.DeleteManagerImpl this$0 -> b
    803:803:void <init>(com.sonicbase.server.DeleteManagerImpl,java.util.Comparator[]) -> <init>
    806:806:int compare(com.sonicbase.server.DeleteManagerImpl$MergeEntry,com.sonicbase.server.DeleteManagerImpl$MergeEntry) -> a
    803:803:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.server.DeleteManagerImpl$6 -> com.sonicbase.server.c$6:
    com.sonicbase.server.DeleteManagerImpl this$0 -> a
    962:962:void <init>(com.sonicbase.server.DeleteManagerImpl) -> <init>
    965:965:int compare(java.io.File,java.io.File) -> a
    962:962:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.server.DeleteManagerImpl$7 -> com.sonicbase.server.c$7:
    java.util.List val$currBatch -> a
    com.sonicbase.index.Index val$index -> b
    IndexSchema val$indexSchema -> c
    com.sonicbase.server.DeleteManagerImpl this$0 -> d
    1021:1021:void <init>(com.sonicbase.server.DeleteManagerImpl,java.util.List,com.sonicbase.index.Index,IndexSchema) -> <init>
    1024:1054:java.lang.Object call() -> call
com.sonicbase.server.DeleteManagerImpl$8 -> com.sonicbase.server.c$8:
    com.sonicbase.server.DeleteManagerImpl this$0 -> a
    1172:1172:void <init>(com.sonicbase.server.DeleteManagerImpl) -> <init>
    1177:1182:void run() -> run
com.sonicbase.server.DeleteManagerImpl$DeleteContext -> com.sonicbase.server.c$a:
    java.io.DataInputStream in -> c
    java.util.concurrent.ArrayBlockingQueue entries -> d
    boolean finished -> a
    com.sonicbase.server.DeleteManagerImpl this$0 -> b
    114:116:void <init>(com.sonicbase.server.DeleteManagerImpl) -> <init>
    114:114:void <init>(com.sonicbase.server.DeleteManagerImpl,com.sonicbase.server.DeleteManagerImpl$1) -> <init>
    114:114:java.io.DataInputStream access$102(com.sonicbase.server.DeleteManagerImpl$DeleteContext,java.io.DataInputStream) -> a
    114:114:java.io.DataInputStream access$100(com.sonicbase.server.DeleteManagerImpl$DeleteContext) -> a
    114:114:java.util.concurrent.ArrayBlockingQueue access$800(com.sonicbase.server.DeleteManagerImpl$DeleteContext) -> b
com.sonicbase.server.DeleteManagerImpl$DeleteRequest -> com.sonicbase.server.c$b:
    java.lang.Object[] key -> a
    72:74:void <init>(java.lang.Object[]) -> <init>
    77:77:java.lang.Object[] getKey() -> a
    69:69:java.lang.Object[] access$2100(com.sonicbase.server.DeleteManagerImpl$DeleteRequest) -> a
com.sonicbase.server.DeleteManagerImpl$DeleteRequestForKeyRecord -> com.sonicbase.server.c$c:
    byte[] primaryKeyBytes -> a
    91:92:void <init>(java.lang.Object[]) -> <init>
    95:97:void <init>(java.lang.Object[],byte[]) -> <init>
    87:87:byte[] access$2000(com.sonicbase.server.DeleteManagerImpl$DeleteRequestForKeyRecord) -> a
com.sonicbase.server.DeleteManagerImpl$DeleteRequestForRecord -> com.sonicbase.server.c$d:
    83:84:void <init>(java.lang.Object[]) -> <init>
com.sonicbase.server.DeleteManagerImpl$DeltaContext -> com.sonicbase.server.c$e:
    java.io.DataInputStream in -> c
    java.util.concurrent.ArrayBlockingQueue entries -> d
    boolean finished -> a
    com.sonicbase.server.DeleteManagerImpl this$0 -> b
    108:110:void <init>(com.sonicbase.server.DeleteManagerImpl) -> <init>
    108:108:void <init>(com.sonicbase.server.DeleteManagerImpl,com.sonicbase.server.DeleteManagerImpl$1) -> <init>
    108:108:java.io.DataInputStream access$302(com.sonicbase.server.DeleteManagerImpl$DeltaContext,java.io.DataInputStream) -> a
    108:108:java.io.DataInputStream access$300(com.sonicbase.server.DeleteManagerImpl$DeltaContext) -> a
    108:108:java.util.concurrent.ArrayBlockingQueue access$900(com.sonicbase.server.DeleteManagerImpl$DeltaContext) -> b
com.sonicbase.server.DeleteManagerImpl$MergeEntry -> com.sonicbase.server.c$f:
    java.lang.Object[] key -> a
    long sequence0 -> b
    long sequence1 -> c
    byte[] primaryKey -> d
    458:458:void <init>() -> <init>
    458:458:java.lang.Object[] access$400(com.sonicbase.server.DeleteManagerImpl$MergeEntry) -> a
    458:458:byte[] access$500(com.sonicbase.server.DeleteManagerImpl$MergeEntry) -> b
    458:458:long access$600(com.sonicbase.server.DeleteManagerImpl$MergeEntry) -> c
    458:458:long access$700(com.sonicbase.server.DeleteManagerImpl$MergeEntry) -> d
    458:458:java.lang.Object[] access$402(com.sonicbase.server.DeleteManagerImpl$MergeEntry,java.lang.Object[]) -> a
    458:458:long access$602(com.sonicbase.server.DeleteManagerImpl$MergeEntry,long) -> a
    458:458:long access$702(com.sonicbase.server.DeleteManagerImpl$MergeEntry,long) -> b
    458:458:byte[] access$502(com.sonicbase.server.DeleteManagerImpl$MergeEntry,byte[]) -> a
com.sonicbase.server.DeleteManagerImpl$MergeRow -> com.sonicbase.server.c$g:
    int streamOffset -> a
    com.sonicbase.server.DeleteManagerImpl$MergeEntry row -> b
    465:465:void <init>() -> <init>
    465:465:com.sonicbase.server.DeleteManagerImpl$MergeEntry access$1400(com.sonicbase.server.DeleteManagerImpl$MergeRow) -> a
    465:465:com.sonicbase.server.DeleteManagerImpl$MergeEntry access$1402(com.sonicbase.server.DeleteManagerImpl$MergeRow,com.sonicbase.server.DeleteManagerImpl$MergeEntry) -> a
    465:465:int access$1502(com.sonicbase.server.DeleteManagerImpl$MergeRow,int) -> a
    465:465:int access$1500(com.sonicbase.server.DeleteManagerImpl$MergeRow) -> b
com.sonicbase.server.DeleteManagerImpl$OutputState -> com.sonicbase.server.c$h:
    java.io.DataOutputStream out -> b
    int currFileNum -> c
    int currOffset -> d
    java.io.File dir -> e
    java.util.concurrent.ArrayBlockingQueue entries -> a
    100:105:void <init>() -> <init>
    100:100:int access$1002(com.sonicbase.server.DeleteManagerImpl$OutputState,int) -> a
    100:100:int access$1102(com.sonicbase.server.DeleteManagerImpl$OutputState,int) -> b
    100:100:int access$1000(com.sonicbase.server.DeleteManagerImpl$OutputState) -> a
    100:100:java.io.File access$1202(com.sonicbase.server.DeleteManagerImpl$OutputState,java.io.File) -> a
    100:100:java.io.DataOutputStream access$1302(com.sonicbase.server.DeleteManagerImpl$OutputState,java.io.DataOutputStream) -> a
    100:100:java.io.File access$1200(com.sonicbase.server.DeleteManagerImpl$OutputState) -> b
    100:100:int access$1108(com.sonicbase.server.DeleteManagerImpl$OutputState) -> c
    100:100:java.io.DataOutputStream access$1300(com.sonicbase.server.DeleteManagerImpl$OutputState) -> d
    100:100:int access$1004(com.sonicbase.server.DeleteManagerImpl$OutputState) -> e
com.sonicbase.server.DeltaManager -> com.sonicbase.server.d:
    int SNAPSHOT_PARTITION_COUNT -> a
    java.lang.String DELTA_STR -> d
    java.lang.String INDEX_STR -> e
    java.lang.String RATE_STR -> f
    java.lang.String DURATION_STR -> g
    Logger logger -> b
    com.sonicbase.server.DatabaseServer server -> h
    long lastSnapshot -> i
    boolean enableSnapshot -> j
    boolean isRecovering -> k
    java.util.concurrent.atomic.AtomicReference currStage -> l
    java.util.concurrent.atomic.AtomicLong totalBytes -> m
    java.util.concurrent.atomic.AtomicLong finishedBytes -> n
    int totalFileCount -> o
    int finishedFileCount -> p
    java.lang.Exception errorRecovering -> q
    java.lang.Thread snapshotThread -> c
    java.lang.Object[] lastkey -> r
    37:130:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    47:72:int getHighestCommittedSnapshotVersion(java.io.File,Logger) -> a
    76:98:int getHighestUnCommittedSnapshotVersion(java.io.File) -> a
    109:116:void getPercentRecoverComplete(ComObject) -> a
    119:119:java.lang.Exception getErrorRecovering() -> a
    124:124:java.io.File getSnapshotReplicaDir() -> f
    127:127:java.lang.String getSnapshotRootDir(java.lang.String) -> c
    132:166:void runSnapshotLoop() -> b
    172:197:void deleteRecord(java.lang.String,java.lang.String,TableSchema,IndexSchema,java.lang.Object[],byte[],int[]) -> a
    200:456:void runSnapshot(java.lang.String) -> a
    461:544:void recoverFromSnapshot(java.lang.String) -> b
    547:548:java.io.File getDeletedDeltaDir(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    552:553:java.io.File getDeletedDeltaDir(java.lang.String,java.lang.String) -> a
    557:558:java.io.File getSortedDeltaFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> b
    562:563:java.io.File getSortedDeltaDir(java.lang.String,java.lang.String) -> b
    568:581:void writeEntry(java.io.DataOutputStream,TableSchema,java.lang.String,com.sonicbase.server.DeltaManager$MergeEntry) -> a
    585:603:com.sonicbase.server.DeltaManager$MergeEntry readEntry(java.io.DataInputStream,TableSchema) -> a
    630:665:void recoverDeltaPreprocess(java.lang.String,java.lang.String,int) -> a
    668:698:void getDeltaSize(java.lang.String,java.lang.String,int,java.util.concurrent.ThreadPoolExecutor) -> a
    701:827:void recoverDelta(java.lang.String,java.lang.String,int,java.util.concurrent.ThreadPoolExecutor) -> b
    830:842:void enableSnapshot(boolean) -> a
    845:853:void deleteSnapshots() -> c
    857:877:void backupFileSystemSchema(java.lang.String,java.lang.String) -> c
    881:893:void backupFileSystem(java.lang.String,java.lang.String) -> d
    897:912:void restoreFileSystem(java.lang.String,java.lang.String) -> e
    915:926:void backupAWSSchema(java.lang.String,java.lang.String,java.lang.String) -> a
    929:934:void backupAWS(java.lang.String,java.lang.String,java.lang.String) -> b
    938:950:void restoreAWS(java.lang.String,java.lang.String,java.lang.String) -> c
    953:955:void getFilesForCurrentSnapshot(java.util.List) -> a
    958:969:void getFilesFromDirectory(java.io.File,java.util.List) -> a
    973:979:void deleteTempDirs() -> d
    982:995:void doDeleteTempDirs(java.io.File) -> b
    998:998:boolean isRecovering() -> e
    26:26:long access$000(com.sonicbase.server.DeltaManager) -> a
    26:26:boolean access$100(com.sonicbase.server.DeltaManager) -> b
    26:26:com.sonicbase.server.DatabaseServer access$200(com.sonicbase.server.DeltaManager) -> c
    26:26:void access$300(com.sonicbase.server.DeltaManager,java.lang.String,java.lang.String,int) -> a
    26:26:java.util.concurrent.atomic.AtomicLong access$700(com.sonicbase.server.DeltaManager) -> d
com.sonicbase.server.DeltaManager$1 -> com.sonicbase.server.d$1:
    com.sonicbase.server.DeltaManager this$0 -> a
    132:132:void <init>(com.sonicbase.server.DeltaManager) -> <init>
    137:163:void run() -> run
com.sonicbase.server.DeltaManager$2 -> com.sonicbase.server.d$2:
    java.util.Map$Entry val$indexEntry -> a
    java.util.Map$Entry val$tableEntry -> b
    java.lang.String val$dbName -> c
    java.io.File val$file -> d
    java.util.concurrent.atomic.AtomicLong val$countSaved -> e
    java.util.concurrent.atomic.AtomicLong val$countChecked -> f
    java.lang.Long val$beginTimeForLastSnapshot -> g
    boolean val$isFull -> h
    java.util.concurrent.atomic.AtomicLong val$countWritten -> i
    java.lang.Long val$deleteIfOlder -> j
    java.util.concurrent.atomic.AtomicLong val$lastLogged -> k
    com.sonicbase.server.DeltaManager this$0 -> l
    293:293:void <init>(com.sonicbase.server.DeltaManager,java.util.Map$Entry,java.util.Map$Entry,java.lang.String,java.io.File,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong,java.lang.Long,boolean,java.util.concurrent.atomic.AtomicLong,java.lang.Long,java.util.concurrent.atomic.AtomicLong) -> <init>
    297:402:java.lang.Object call() -> call
com.sonicbase.server.DeltaManager$2$1 -> com.sonicbase.server.d$2$1:
    com.sonicbase.index.Index val$index -> a
    boolean val$isPrimaryKey -> b
    java.io.DataOutputStream val$outStream -> c
    int[] val$fieldOffsets -> d
    java.util.concurrent.atomic.AtomicLong val$savedCount -> e
    long val$subBegin -> f
    com.sonicbase.server.DeltaManager$2 this$1 -> g
    315:315:void <init>(com.sonicbase.server.DeltaManager$2,com.sonicbase.index.Index,boolean,java.io.DataOutputStream,int[],java.util.concurrent.atomic.AtomicLong,long) -> <init>
    318:384:boolean visit(java.lang.Object[],java.lang.Object) -> a
com.sonicbase.server.DeltaManager$3 -> com.sonicbase.server.d$3:
    java.lang.String val$dbName -> a
    java.lang.String val$dataRoot -> b
    int val$currDelta -> c
    com.sonicbase.server.DeltaManager this$0 -> d
    505:505:void <init>(com.sonicbase.server.DeltaManager,java.lang.String,java.lang.String,int) -> <init>
    508:509:java.lang.Object call() -> call
com.sonicbase.server.DeltaManager$4 -> com.sonicbase.server.d$4:
    java.io.File val$indexFile -> a
    IndexSchema val$indexSchema -> b
    TableSchema val$tableSchema -> c
    com.sonicbase.index.Index val$index -> d
    java.util.concurrent.atomic.AtomicLong val$recoveredCount -> e
    int val$currOffset -> f
    java.util.concurrent.atomic.AtomicLong val$lastLogged -> g
    java.lang.String val$tableName -> h
    java.lang.String val$indexName -> i
    long val$indexBegin -> j
    com.sonicbase.server.DeltaManager this$0 -> k
    740:740:void <init>(com.sonicbase.server.DeltaManager,java.io.File,IndexSchema,TableSchema,com.sonicbase.index.Index,java.util.concurrent.atomic.AtomicLong,int,java.util.concurrent.atomic.AtomicLong,java.lang.String,java.lang.String,long) -> <init>
    744:794:java.lang.Boolean call() -> a
    740:740:java.lang.Object call() -> call
com.sonicbase.server.DeltaManager$ByteCounterStream -> com.sonicbase.server.d$a:
    java.io.FileInputStream stream -> a
    java.util.concurrent.atomic.AtomicLong finishedBytes -> b
    1005:1008:void <init>(java.util.concurrent.atomic.AtomicLong,java.io.FileInputStream) -> <init>
    1011:1012:void reset() -> reset
    1015:1015:boolean markSupported() -> markSupported
    1019:1020:void mark(int) -> mark
    1023:1023:long skip(long) -> skip
    1027:1027:int available() -> available
    1031:1032:void close() -> close
    1035:1039:int read(byte[]) -> read
    1043:1047:int read(byte[],int,int) -> read
    1052:1056:int read() -> read
com.sonicbase.server.DeltaManager$MergeEntry -> com.sonicbase.server.d$b:
    java.lang.Object[] key -> b
    long updateTime -> c
    byte[][] records -> d
    com.sonicbase.server.DeltaManager this$0 -> a
    609:609:void <init>(com.sonicbase.server.DeltaManager) -> <init>
    616:616:java.lang.Object[] getKey() -> a
    620:620:byte[][] getRecords() -> b
    624:625:void setRecords(byte[][]) -> a
    609:609:java.lang.Object[] access$400(com.sonicbase.server.DeltaManager$MergeEntry) -> a
    609:609:long access$500(com.sonicbase.server.DeltaManager$MergeEntry) -> b
    609:609:byte[][] access$600(com.sonicbase.server.DeltaManager$MergeEntry) -> c
    609:609:java.lang.Object[] access$402(com.sonicbase.server.DeltaManager$MergeEntry,java.lang.Object[]) -> a
    609:609:long access$502(com.sonicbase.server.DeltaManager$MergeEntry,long) -> a
    609:609:byte[][] access$602(com.sonicbase.server.DeltaManager$MergeEntry,byte[][]) -> a
com.sonicbase.server.LogManager -> com.sonicbase.server.e:
    java.lang.String UTF8_STR -> a
    java.util.List logWriters -> b
    java.util.List peerLogWriters -> c
    Logger logger -> d
    com.sonicbase.server.DatabaseServer databaseServer -> e
    java.util.concurrent.ThreadPoolExecutor executor -> f
    java.io.File rootDir -> g
    java.util.concurrent.atomic.AtomicLong countLogged -> h
    com.sonicbase.server.DatabaseServer server -> i
    java.util.concurrent.ArrayBlockingQueue logRequests -> j
    java.util.Map peerLogRequests -> k
    java.util.concurrent.atomic.AtomicBoolean unbindQueues -> l
    java.lang.Object logLock -> m
    java.util.concurrent.atomic.AtomicLong logSequenceNumber -> n
    java.util.concurrent.atomic.AtomicLong maxAllocatedLogSequenceNumber -> o
    int SEQUENCE_NUM_ALLOC_COUNT -> p
    java.lang.String currFilename -> q
    java.lang.String sliceFilename -> r
    boolean shouldSlice -> s
    boolean didSlice -> t
    java.util.List allCurrentSources -> u
    30:831:void <init>(com.sonicbase.server.DatabaseServer,java.io.File) -> <init>
    78:87:void startLoggingForPeer(int) -> a
    90:118:void skipToMaxSequenceNumber() -> a
    122:133:ComObject setMaxSequenceNum(ComObject) -> a
    138:138:long getNextSequencenNum() -> b
    142:157:void pushMaxSequenceNum() -> c
    160:160:void enableLogWriter(boolean) -> a
    163:164:void replayLogs() -> d
    167:167:long getCountLogged() -> e
    172:204:java.lang.String sliceLogs(boolean) -> b
    209:218:void deleteLogs() -> f
    222:235:void backupFileSystem(java.lang.String,java.lang.String,java.lang.String) -> a
    238:257:void backupLogDir(java.lang.String,java.io.File,java.io.File) -> a
    260:277:void backupLogDirToAWS(com.sonicbase.common.AWSClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.File) -> a
    281:295:void restoreFileSystem(java.lang.String,java.lang.String) -> a
    298:306:void restoreLogDir(java.io.File,java.io.File) -> a
    309:324:void backupAWS(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    328:340:void restoreAWS(java.lang.String,java.lang.String,java.lang.String) -> b
    344:357:ComObject getLogFile(ComObject) -> b
    362:363:ComObject deletePeerLogs(ComObject) -> c
    368:379:ComObject sendLogsToPeer(int) -> b
    384:395:void deletePeerLogs(int) -> c
    398:418:void logRequestForPeer(byte[],long,long,int) -> a
    422:433:void receiveExternalLog(int,java.lang.String,byte[]) -> a
    436:440:boolean hasLogsForPeer(int) -> d
    444:453:double getPercentApplyQueuesComplete() -> g
    568:568:java.lang.String getLogRoot() -> m
    572:573:void bindQueues() -> h
    576:577:void unbindQueues() -> i
    581:612:void applyQueues() -> j
    615:657:void getLogsFromPeer(int) -> e
    660:660:java.io.File getLogReplicaDir() -> n
    807:816:void applyLogsFromPeers(java.lang.String) -> a
    820:829:void applyLogsAfterSlice(java.lang.String) -> b
    838:849:java.util.List getLogFiles() -> k
    857:887:void visitQueueEntries(java.io.DataInputStream,com.sonicbase.server.LogManager$LogVisitor) -> a
    890:1076:void replayQueues(java.io.File,java.lang.String,boolean,boolean) -> a
    1080:1124:com.sonicbase.server.DatabaseServer$LogRequest logRequest(byte[],boolean,java.lang.String,java.lang.Long,java.lang.Long,java.util.concurrent.atomic.AtomicLong) -> a
    1129:1172:void deleteOldLogs(long,boolean) -> a
    27:27:Logger access$100() -> l
    27:27:boolean access$200(com.sonicbase.server.LogManager) -> a
    27:27:java.util.concurrent.atomic.AtomicLong access$300(com.sonicbase.server.LogManager) -> b
    27:27:java.lang.String access$400(com.sonicbase.server.LogManager) -> c
    27:27:java.lang.String access$502(com.sonicbase.server.LogManager,java.lang.String) -> a
    27:27:java.lang.String access$600(com.sonicbase.server.LogManager) -> d
    27:27:java.lang.String access$402(com.sonicbase.server.LogManager,java.lang.String) -> b
    27:27:boolean access$202(com.sonicbase.server.LogManager,boolean) -> a
    27:27:com.sonicbase.server.DatabaseServer access$700(com.sonicbase.server.LogManager) -> e
com.sonicbase.server.LogManager$1 -> com.sonicbase.server.e$1:
    com.sonicbase.server.NettyServer$Request val$request -> a
    java.util.concurrent.atomic.AtomicInteger val$countProcessed -> b
    java.util.concurrent.atomic.AtomicLong val$lastLogged -> c
    java.util.concurrent.atomic.AtomicLong val$countBatched -> d
    java.util.concurrent.atomic.AtomicLong val$batchCount -> e
    long val$begin -> f
    java.util.concurrent.atomic.AtomicLong val$countFinished -> g
    com.sonicbase.server.LogManager this$0 -> h
    989:989:void <init>(com.sonicbase.server.LogManager,com.sonicbase.server.NettyServer$Request,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong,long,java.util.concurrent.atomic.AtomicLong) -> <init>
    992:1009:void run() -> run
com.sonicbase.server.LogManager$ByteCounterStream -> com.sonicbase.server.e$a:
    long count -> a
    java.io.InputStream in -> b
    667:669:void <init>(java.io.InputStream) -> <init>
    673:674:int read() -> read
    678:678:long getCount() -> getCount
com.sonicbase.server.LogManager$LogSource -> com.sonicbase.server.e$b:
    long totalBytes -> g
    java.lang.String filename -> h
    com.sonicbase.server.LogManager$ByteCounterStream counterStream -> i
    java.io.DataInputStream in -> a
    long sequence1 -> b
    long sequence0 -> c
    byte[] buffer -> d
    java.util.List requests -> e
    int offset -> f
    693:706:void <init>(java.io.File,com.sonicbase.server.DatabaseServer,Logger) -> <init>
    709:709:long getTotalBytes() -> a
    713:713:long getBytesRead() -> b
    717:718:boolean take(com.sonicbase.server.DatabaseServer,Logger) -> a
    723:774:void readNext(com.sonicbase.server.DatabaseServer,Logger) -> b
    777:793:com.sonicbase.server.NettyServer$Request readRequest(com.sonicbase.server.DatabaseServer) -> a
    797:798:void close() -> c
    801:801:byte[] getBuffer() -> d
com.sonicbase.server.LogManager$LogVisitor -> com.sonicbase.server.e$c:
    boolean visit(byte[]) -> a
com.sonicbase.server.LogManager$LogWriter -> com.sonicbase.server.e$d:
    int offset -> b
    java.util.concurrent.ArrayBlockingQueue currLogRequests -> c
    java.io.File dataDir -> d
    int shard -> e
    int replica -> f
    int peerReplicaNum -> g
    long currQueueTime -> h
    java.io.DataOutputStream writer -> i
    com.sonicbase.server.LogManager this$0 -> a
    473:485:void <init>(com.sonicbase.server.LogManager,int,int,java.util.concurrent.ArrayBlockingQueue,java.io.File,int,int) -> <init>
    491:506:void run() -> run
    511:532:void logRequests(java.util.List) -> a
    535:563:void closeAndCreateLog() -> a
    466:466:void access$000(com.sonicbase.server.LogManager$LogWriter) -> a
com.sonicbase.server.LogManager$QueueEntry -> com.sonicbase.server.e$e:
    byte[] request -> a
    461:463:void <init>(byte[]) -> <init>
com.sonicbase.server.LongRunningCalls -> com.sonicbase.server.f:
    Logger logger -> b
    com.sonicbase.server.DatabaseServer server -> c
    java.util.Map lookupTypeById -> a
    java.util.concurrent.ConcurrentLinkedQueue commands -> d
    26:275:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    33:50:void load() -> a
    54:75:void save() -> b
    78:96:void deleteOldFiles() -> e
    99:99:java.io.File getReplicaRoot() -> f
    103:126:int getHighestSafeSnapshotVersion(java.io.File) -> a
    130:133:void execute() -> c
    136:141:void addCommand(com.sonicbase.server.LongRunningCalls$SingleCommand) -> a
    144:146:int getCommandCount() -> d
    150:150:com.sonicbase.server.LongRunningCalls$SingleCommand createSingleCommand(byte[]) -> a
    155:164:void backupFileSystem(java.lang.String,java.lang.String) -> a
    168:181:void restoreFileSystem(java.lang.String,java.lang.String) -> b
    185:197:void restoreAWS(java.lang.String,java.lang.String,java.lang.String) -> a
    200:205:void backupAWS(java.lang.String,java.lang.String,java.lang.String) -> b
    208:215:void getFiles(java.util.List) -> a
    278:285:void serialize(java.io.DataOutputStream) -> a
    288:298:void deserialize(java.io.DataInputStream) -> a
    20:20:com.sonicbase.server.DatabaseServer access$100(com.sonicbase.server.LongRunningCalls) -> a
    262:262:void <clinit>() -> <clinit>
com.sonicbase.server.LongRunningCalls$SingleCommand -> com.sonicbase.server.f$a:
    com.sonicbase.server.LongRunningCalls longRunningCommands -> a
    byte[] body -> b
    221:223:void <init>(com.sonicbase.server.LongRunningCalls) -> <init>
    225:228:void <init>(com.sonicbase.server.LongRunningCalls,byte[]) -> <init>
    231:234:void serialize(java.io.DataOutputStream) -> a
    237:241:void deserialize(java.io.DataInputStream) -> a
    244:251:void execute(java.util.concurrent.ConcurrentLinkedQueue) -> a
    254:259:void doExecute(java.util.concurrent.ConcurrentLinkedQueue) -> b
    217:217:void access$000(com.sonicbase.server.LongRunningCalls$SingleCommand,java.util.concurrent.ConcurrentLinkedQueue) -> a
com.sonicbase.server.LongRunningCalls$SingleCommand$1 -> com.sonicbase.server.f$a$1:
    java.util.concurrent.ConcurrentLinkedQueue val$parentList -> a
    com.sonicbase.server.LongRunningCalls$SingleCommand this$0 -> b
    244:244:void <init>(com.sonicbase.server.LongRunningCalls$SingleCommand,java.util.concurrent.ConcurrentLinkedQueue) -> <init>
    247:248:void run() -> run
com.sonicbase.server.LongRunningCalls$Type -> com.sonicbase.server.f$b:
    com.sonicbase.server.LongRunningCalls$Type single -> a
    com.sonicbase.server.LongRunningCalls$Type compound -> b
    int value -> c
    com.sonicbase.server.LongRunningCalls$Type[] $VALUES -> d
    263:263:com.sonicbase.server.LongRunningCalls$Type[] values() -> a
    263:263:com.sonicbase.server.LongRunningCalls$Type valueOf(java.lang.String) -> a
    269:272:void <init>(java.lang.String,int,int) -> <init>
    263:265:void <clinit>() -> <clinit>
com.sonicbase.server.MethodInvoker -> com.sonicbase.server.MethodInvoker:
    Logger logger -> d
    com.sonicbase.server.BulkImportManager bulkImportManager -> e
    com.sonicbase.server.DeleteManagerImpl deleteManagerImpl -> f
    com.sonicbase.server.DeltaManager deltaManager -> g
    com.sonicbase.server.UpdateManager updateManager -> h
    com.sonicbase.server.TransactionManager transactionManager -> i
    com.sonicbase.server.ReadManager readManager -> j
    com.sonicbase.server.LogManager logManager -> k
    com.sonicbase.server.SchemaManager schemaManager -> l
    com.sonicbase.server.DatabaseServer server -> m
    DatabaseCommon common -> n
    boolean shutdown -> o
    java.util.concurrent.atomic.AtomicInteger testWriteCallCount -> p
    java.util.Set priorityCommands -> q
    java.util.concurrent.atomic.AtomicInteger blockCount -> a
    java.util.concurrent.atomic.AtomicInteger echoCount -> b
    java.util.concurrent.atomic.AtomicInteger echo2Count -> c
    36:53:void <init>(com.sonicbase.server.DatabaseServer,com.sonicbase.server.BulkImportManager,com.sonicbase.server.DeleteManagerImpl,com.sonicbase.server.DeltaManager,com.sonicbase.server.UpdateManager,com.sonicbase.server.TransactionManager,com.sonicbase.server.ReadManager,com.sonicbase.server.LogManager,com.sonicbase.server.SchemaManager) -> <init>
    56:57:void shutdown() -> shutdown
    65:65:int getTestWriteCallCount() -> getTestWriteCallCount
    107:247:byte[] invokeMethod(byte[],long,long,boolean,boolean,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong) -> invokeMethod
    252:252:java.lang.Long getExistingSequence0(ComObject) -> a
    256:256:java.lang.Long getExistingSequence1(ComObject) -> b
    260:260:ComObject startStreaming(ComObject,boolean) -> startStreaming
    264:264:ComObject stopStreaming(ComObject,boolean) -> stopStreaming
    268:268:ComObject cancelBulkImport(ComObject,boolean) -> cancelBulkImport
    272:272:ComObject getBulkImportProgress(ComObject,boolean) -> getBulkImportProgress
    276:276:ComObject getBulkImportProgressOnServer(ComObject,boolean) -> getBulkImportProgressOnServer
    280:280:ComObject startBulkImportOnServer(ComObject,boolean) -> startBulkImportOnServer
    284:284:ComObject coordinateBulkImportForTable(ComObject,boolean) -> coordinateBulkImportForTable
    288:288:ComObject startBulkImport(ComObject,boolean) -> startBulkImport
    292:292:ComObject licenseCheckin(ComObject,boolean) -> licenseCheckin
    296:296:ComObject areAllLongRunningCommandsComplete(ComObject,boolean) -> areAllLongRunningCommandsComplete
    300:300:ComObject createTable(ComObject,boolean) -> createTable
    304:304:ComObject createTableSlave(ComObject,boolean) -> createTableSlave
    308:308:ComObject dropTable(ComObject,boolean) -> dropTable
    312:312:ComObject createDatabaseSlave(ComObject,boolean) -> createDatabaseSlave
    316:316:ComObject createDatabase(ComObject,boolean) -> createDatabase
    320:326:ComObject addColumn(ComObject,boolean) -> addColumn
    331:337:ComObject dropColumn(ComObject,boolean) -> dropColumn
    343:349:ComObject dropIndexSlave(ComObject,boolean) -> dropIndexSlave
    354:360:ComObject dropIndex(ComObject,boolean) -> dropIndex
    365:371:ComObject createIndexSlave(ComObject,boolean) -> createIndexSlave
    376:376:ComObject promoteEntireReplicaToMaster(ComObject,boolean) -> promoteEntireReplicaToMaster
    380:380:ComObject electNewMaster(ComObject,boolean) -> electNewMaster
    384:384:ComObject promoteToMaster(ComObject,boolean) -> promoteToMaster
    388:397:ComObject markReplicaDead(ComObject,boolean) -> markReplicaDead
    401:410:ComObject markReplicaAlive(ComObject,boolean) -> markReplicaAlive
    414:421:ComObject promoteToMasterAndPushSchema(ComObject,boolean) -> promoteToMasterAndPushSchema
    425:425:ComObject getRepartitionerState(ComObject,boolean) -> getRepartitionerState
    429:429:ComObject isShardRepartitioningComplete(ComObject,boolean) -> isShardRepartitioningComplete
    433:433:ComObject prepareForBackup(ComObject,boolean) -> prepareForBackup
    437:437:ComObject doBackupFileSystem(ComObject,boolean) -> doBackupFileSystem
    441:441:ComObject doBackupAWS(ComObject,boolean) -> doBackupAWS
    445:445:ComObject isBackupComplete(ComObject,boolean) -> isBackupComplete
    449:449:ComObject finishBackup(ComObject,boolean) -> finishBackup
    453:453:ComObject isEntireBackupComplete(ComObject,boolean) -> isEntireBackupComplete
    457:457:byte[] startBackup(ComObject,boolean) -> startBackup
    461:461:ComObject getLastBackupDir(ComObject,boolean) -> getLastBackupDir
    465:465:ComObject prepareForRestore(ComObject,boolean) -> prepareForRestore
    469:469:ComObject doRestoreFileSystem(ComObject,boolean) -> doRestoreFileSystem
    473:473:ComObject doRestoreAWS(ComObject,boolean) -> doRestoreAWS
    477:477:ComObject isRestoreComplete(ComObject,boolean) -> isRestoreComplete
    481:481:ComObject finishRestore(ComObject,boolean) -> finishRestore
    485:485:ComObject isEntireRestoreComplete(ComObject,boolean) -> isEntireRestoreComplete
    489:489:ComObject startRestore(ComObject,boolean) -> startRestore
    494:507:ComObject getFile(ComObject,boolean) -> getFile
    513:535:ComObject logError(ComObject,boolean) -> logError
    539:539:ComObject getOSStats(ComObject,boolean) -> getOSStats
    546:555:ComObject getDbNames(ComObject,boolean) -> getDbNames
    560:577:ComObject updateSchema(ComObject,boolean) -> updateSchema
    581:581:ComObject prepareSourceForServerReload(ComObject,boolean) -> prepareSourceForServerReload
    586:588:ComObject finishServerReloadForSource(ComObject,boolean) -> finishServerReloadForSource
    592:592:ComObject isServerReloadFinished(ComObject,boolean) -> isServerReloadFinished
    596:596:ComObject reloadServer(ComObject,boolean) -> reloadServer
    600:600:ComObject getDatabaseFile(ComObject,boolean) -> getDatabaseFile
    604:604:ComObject updateServersConfig(ComObject,boolean) -> updateServersConfig
    608:611:ComObject healthCheck(ComObject,boolean) -> healthCheck
    615:618:ComObject healthCheckPriority(ComObject,boolean) -> healthCheckPriority
    623:623:ComObject setMaxSequenceNum(ComObject,boolean) -> setMaxSequenceNum
    629:645:ComObject getRecoverProgress(ComObject,boolean) -> getRecoverProgress
    649:650:ComObject pushMaxSequenceNum(ComObject,boolean) -> pushMaxSequenceNum
    654:654:ComObject prepareToComeAlive(ComObject,boolean) -> prepareToComeAlive
    658:658:ComObject reconfigureCluster(ComObject,boolean) -> reconfigureCluster
    662:670:ComObject getConfig(ComObject,boolean) -> getConfig
    675:684:ComObject getSchema(ComObject,boolean) -> getSchema
    694:696:ComObject echo(ComObject,boolean) -> echo
    700:702:ComObject echoWrite(ComObject,boolean) -> echoWrite
    706:707:ComObject echo2(ComObject,boolean) -> echo2
    718:727:ComObject block(ComObject,boolean) -> block
    731:731:ComObject reserveNextIdFromReplica(ComObject,boolean) -> reserveNextIdFromReplica
    735:735:byte[] noOp(ComObject,boolean) -> noOp
    739:739:ComObject allocateRecordIds(ComObject,boolean) -> allocateRecordIds
    743:743:ComObject pushMaxRecordId(ComObject,boolean) -> pushMaxRecordId
    747:747:ComObject setMaxRecordId(ComObject,boolean) -> setMaxRecordId
    751:753:ComObject sendLogsToPeer(ComObject,boolean) -> sendLogsToPeer
    757:757:ComObject getLogFile(ComObject,boolean) -> getLogFile
    761:761:ComObject deletePeerLogs(ComObject,boolean) -> deletePeerLogs
    766:775:byte[] sendQueueFile(ComObject,boolean) -> sendQueueFile
    779:785:ComObject deleteIndexEntryByKey(ComObject,boolean) -> deleteIndexEntryByKey
    790:796:ComObject commit(ComObject,boolean) -> commit
    801:807:ComObject rollback(ComObject,boolean) -> rollback
    812:818:ComObject insertIndexEntryByKey(ComObject,boolean) -> insertIndexEntryByKey
    823:829:ComObject insertIndexEntryByKeyWithRecord(ComObject,boolean) -> insertIndexEntryByKeyWithRecord
    834:840:ComObject batchInsertIndexEntryByKey(ComObject,boolean) -> batchInsertIndexEntryByKey
    845:851:ComObject batchInsertIndexEntryByKeyWithRecord(ComObject,boolean) -> batchInsertIndexEntryByKeyWithRecord
    856:863:ComObject abortTransaction(java.lang.String,byte[],boolean) -> abortTransaction
    868:874:ComObject updateRecord(ComObject,boolean) -> updateRecord
    879:885:ComObject deleteRecord(ComObject,boolean) -> deleteRecord
    890:896:ComObject deleteIndexEntry(ComObject,boolean) -> deleteIndexEntry
    904:904:ComObject saveSchema(ComObject,boolean) -> saveSchema
    908:914:ComObject truncateTable(ComObject,boolean) -> truncateTable
    919:925:ComObject countRecords(ComObject,boolean) -> countRecords
    930:936:ComObject batchIndexLookup(ComObject,boolean) -> batchIndexLookup
    942:952:ComObject indexLookup(ComObject,boolean) -> indexLookup
    958:964:ComObject closeResultSet(ComObject,boolean) -> closeResultSet
    969:975:ComObject serverSelectDelete(ComObject,boolean) -> serverSelectDelete
    980:986:ComObject serverSelect(ComObject,boolean) -> serverSelect
    991:997:ComObject indexLookupExpression(ComObject,boolean) -> indexLookupExpression
    1002:1008:ComObject evaluateCounterGetKeys(ComObject,boolean) -> evaluateCounterGetKeys
    1013:1019:ComObject evaluateCounterWithRecord(ComObject,boolean) -> evaluateCounterWithRecord
    1024:1030:ComObject getIndexCounts(ComObject,boolean) -> getIndexCounts
    1035:1037:ComObject testWrite(ComObject,boolean) -> testWrite
    1041:1047:ComObject deleteMovedRecords(ComObject,boolean) -> deleteMovedRecords
    1064:1070:ComObject isRepartitioningComplete(ComObject,boolean) -> isRepartitioningComplete
    1077:1077:ComObject beginRebalance(ComObject,boolean) -> beginRebalance
    1081:1087:ComObject getKeyAtOffset(ComObject,boolean) -> getKeyAtOffset
    1092:1098:ComObject getPartitionSize(ComObject,boolean) -> getPartitionSize
    1103:1103:ComObject stopRepartitioning(ComObject,boolean) -> stopRepartitioning
    1107:1107:ComObject doRebalanceOrderedIndex(ComObject,boolean) -> doRebalanceOrderedIndex
    1112:1115:ComObject rebalanceOrderedIndex(ComObject,boolean) -> rebalanceOrderedIndex
    1119:1125:ComObject moveIndexEntries(ComObject,boolean) -> moveIndexEntries
    1154:1154:ComObject doPopulateIndex(ComObject,boolean) -> doPopulateIndex
    1161:1161:ComObject populateIndex(ComObject,boolean) -> populateIndex
    1169:1170:ComObject forceDeletes(ComObject,boolean) -> forceDeletes
    1174:1174:ComObject createIndex(ComObject,boolean) -> createIndex
    1178:1180:ComObject expirePreparedStatement(ComObject,boolean) -> expirePreparedStatement
    68:691:void <clinit>() -> <clinit>
com.sonicbase.server.MethodInvoker$ReplicaFuture -> com.sonicbase.server.MethodInvoker$a:
    java.util.concurrent.Future future -> b
    int replica -> c
    com.sonicbase.server.MethodInvoker this$0 -> a
    59:59:void <init>(com.sonicbase.server.MethodInvoker) -> <init>
    59:59:java.util.concurrent.Future access$000(com.sonicbase.server.MethodInvoker$ReplicaFuture) -> a
    59:59:int access$100(com.sonicbase.server.MethodInvoker$ReplicaFuture) -> b
com.sonicbase.server.ReadManager -> com.sonicbase.server.g:
    Logger logger -> c
    com.sonicbase.server.DatabaseServer server -> d
    java.lang.Thread preparedReaper -> e
    java.lang.Thread diskReaper -> f
    com.codahale.metrics.MetricRegistry METRICS -> g
    com.codahale.metrics.Timer INDEX_LOOKUP_STATS -> a
    com.codahale.metrics.Timer BATCH_INDEX_LOOKUP_STATS -> b
    java.util.concurrent.ConcurrentHashMap preparedIndexLookups -> h
    java.util.concurrent.atomic.AtomicInteger lookupCount -> i
    37:366:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    60:80:void startDiskResultsReaper() -> b
    84:184:ComObject countRecords(ComObject) -> a
    189:316:ComObject batchIndexLookup(ComObject) -> b
    326:327:void expirePreparedStatement(long) -> a
    330:350:void startPreparedReaper() -> a
    371:698:ComObject indexLookup(ComObject) -> c
    704:709:java.util.Set getSimpleColumnOffsets(java.io.DataInputStream,java.lang.String,TableSchema) -> a
    715:733:java.util.Set getColumnOffsets(java.io.DataInputStream,java.lang.String,TableSchema) -> b
    737:742:ComObject closeResultSet(ComObject,boolean) -> a
    746:751:ComObject serverSelectDelete(ComObject,boolean) -> b
    756:811:ComObject serverSelect(ComObject) -> d
    817:967:ComObject indexLookupExpression(ComObject) -> e
    978:1105:java.util.Map$Entry doIndexLookupWithRecordsExpression(short,java.lang.String,long,int,TableSchema,IndexSchema,java.util.Set,ParameterHandler,Expression,com.sonicbase.index.Index,java.lang.Object[],java.lang.Boolean,java.util.List,Counter[],GroupByContext,java.util.concurrent.atomic.AtomicLong,java.lang.Long,java.lang.Long) -> a
    1135:1520:java.util.Map$Entry doIndexLookupTwoKeys(short,java.lang.String,int,TableSchema,IndexSchema,boolean,java.util.List,java.lang.Object[],java.lang.Object[],java.util.Set,java.lang.Object[],java.lang.Object[],BinaryExpression$Operator,BinaryExpression$Operator,ParameterHandler,boolean,Expression,com.sonicbase.index.Index,java.lang.Boolean,java.util.List,java.util.List,java.util.List,long,boolean,Counter[],GroupByContext,java.util.concurrent.atomic.AtomicLong,java.lang.Long,java.lang.Long,int[],boolean) -> a
    1527:1581:byte[][] applySelectToResultRecords(short,java.lang.String,java.util.Set,boolean,byte[][],java.lang.Object[],TableSchema,Counter[],GroupByContext,int[],boolean) -> a
    1607:2100:java.util.Map$Entry doIndexLookupOneKey(short,java.lang.String,int,TableSchema,IndexSchema,ParameterHandler,boolean,Expression,java.util.Set,boolean,java.util.List,java.lang.Object[],java.lang.Object[],BinaryExpression$Operator,com.sonicbase.index.Index,java.lang.Boolean,java.util.List,java.util.List,java.util.List,long,boolean,Counter[],GroupByContext,java.util.concurrent.atomic.AtomicLong,java.lang.Long,java.lang.Long,int[],boolean) -> a
    2105:2153:byte[][] processViewFlags(java.lang.String,TableSchema,IndexSchema,com.sonicbase.index.Index,long,java.lang.Object[],byte[][],java.util.concurrent.atomic.AtomicBoolean) -> a
    2157:2176:boolean processViewFlags(long,java.util.List,byte[]) -> a
    2188:2341:boolean handleRecord(short,java.lang.String,TableSchema,IndexSchema,long,com.sonicbase.index.Index,java.lang.Object[],ParameterHandler,boolean,Expression,java.util.Set,boolean,java.util.List,java.util.List,java.util.List,boolean,Counter[],GroupByContext,byte[][],byte[][],java.lang.Object[][],java.lang.Long,java.util.concurrent.atomic.AtomicLong,java.lang.Long,java.util.concurrent.atomic.AtomicBoolean) -> a
    2345:2350:void count(Counter[],Record) -> a
    2354:2434:ComObject evaluateCounterGetKeys(ComObject) -> f
    2441:2500:ComObject evaluateCounterWithRecord(ComObject) -> g
    29:29:Logger access$000(com.sonicbase.server.ReadManager) -> a
    29:29:com.sonicbase.server.DatabaseServer access$100(com.sonicbase.server.ReadManager) -> b
    29:29:java.util.concurrent.ConcurrentHashMap access$200(com.sonicbase.server.ReadManager) -> c
    29:29:byte[][] access$300(com.sonicbase.server.ReadManager,java.lang.String,TableSchema,IndexSchema,com.sonicbase.index.Index,long,java.lang.Object[],byte[][],java.util.concurrent.atomic.AtomicBoolean) -> a
    29:29:byte[][] access$400(com.sonicbase.server.ReadManager,short,java.lang.String,java.util.Set,boolean,byte[][],java.lang.Object[],TableSchema,Counter[],GroupByContext,int[],boolean) -> a
    320:323:void <clinit>() -> <clinit>
com.sonicbase.server.ReadManager$1 -> com.sonicbase.server.g$1:
    com.sonicbase.server.ReadManager this$0 -> a
    42:42:void <init>(com.sonicbase.server.ReadManager) -> <init>
    45:51:void run() -> run
com.sonicbase.server.ReadManager$2 -> com.sonicbase.server.g$2:
    com.sonicbase.server.ReadManager this$0 -> a
    60:60:void <init>(com.sonicbase.server.ReadManager) -> <init>
    65:77:void run() -> run
com.sonicbase.server.ReadManager$3 -> com.sonicbase.server.g$3:
    com.sonicbase.server.ReadManager this$0 -> a
    330:330:void <init>(com.sonicbase.server.ReadManager) -> <init>
    335:345:void run() -> run
com.sonicbase.server.ReadManager$4 -> com.sonicbase.server.g$4:
    java.util.List val$currEntries -> a
    java.util.concurrent.atomic.AtomicInteger val$countRead -> b
    int val$count -> c
    int val$diff -> d
    com.sonicbase.server.ReadManager this$0 -> e
    2046:2046:void <init>(com.sonicbase.server.ReadManager,java.util.List,java.util.concurrent.atomic.AtomicInteger,int,int) -> <init>
    2049:2056:boolean visit(java.lang.Object[],java.lang.Object) -> a
com.sonicbase.server.ReadManager$5 -> com.sonicbase.server.g$5:
    java.util.concurrent.atomic.AtomicBoolean val$first -> a
    java.util.List val$currEntries -> b
    java.util.concurrent.atomic.AtomicInteger val$countRead -> c
    int val$count -> d
    int val$diff -> e
    com.sonicbase.server.ReadManager this$0 -> f
    2070:2070:void <init>(com.sonicbase.server.ReadManager,java.util.concurrent.atomic.AtomicBoolean,java.util.List,java.util.concurrent.atomic.AtomicInteger,int,int) -> <init>
    2073:2084:boolean visit(java.lang.Object[],java.lang.Object) -> a
com.sonicbase.server.ReadManager$PreparedIndexLookup -> com.sonicbase.server.g$a:
    long lastTimeUsed -> a
    int count -> b
    int tableId -> c
    int indexId -> d
    boolean forceSelectOnServer -> e
    boolean evaluateExpression -> f
    Expression expression -> g
    java.util.List orderByExpressions -> h
    java.util.Set columnOffsets -> i
    com.sonicbase.server.ReadManager this$0 -> j
    351:351:void <init>(com.sonicbase.server.ReadManager) -> <init>
com.sonicbase.server.ReadManager$ProcessKeyContainsColumns -> com.sonicbase.server.g$b:
    short serializationVersion -> b
    boolean myResult -> c
    java.lang.String dbName -> d
    TableSchema tableSchema -> e
    IndexSchema indexSchema -> f
    ParameterHandler parms -> g
    boolean evaluateExpresion -> h
    Expression expression -> i
    java.util.Set columnOffsets -> j
    boolean forceSelectOnServer -> k
    com.sonicbase.index.Index index -> l
    long viewVersion -> m
    Counter[] counters -> n
    GroupByContext groupContext -> o
    int[] keyOffsets -> p
    boolean keyContainsColumns -> q
    java.util.Map$Entry entry -> r
    java.util.Map$Entry currEntry -> s
    byte[][] currKeyRecords -> t
    java.lang.Object[][] currKeys -> u
    byte[][] records -> v
    com.sonicbase.server.ReadManager this$0 -> a
    2532:2552:void <init>(com.sonicbase.server.ReadManager,short,java.lang.String,TableSchema,IndexSchema,ParameterHandler,boolean,Expression,java.util.Set,boolean,com.sonicbase.index.Index,long,Counter[],GroupByContext,int[],boolean,java.util.Map$Entry,java.util.Map$Entry,byte[][],byte[][]) -> <init>
    2555:2555:boolean is() -> a
    2559:2559:java.util.Map$Entry getEntry() -> b
    2563:2563:byte[][] getCurrKeyRecords() -> c
    2567:2567:byte[][] getRecords() -> d
    2572:2633:com.sonicbase.server.ReadManager$ProcessKeyContainsColumns invoke() -> e
    2637:2637:java.lang.Object[][] getCurrKeys() -> f
com.sonicbase.common.RecordLockedException -> com.sonicbase.server.h:
    7:8:void <init>() -> <init>
    11:12:void <init>(java.lang.String) -> <init>
    15:16:void <init>(java.lang.String,java.lang.Exception) -> <init>
    19:20:void <init>(java.lang.Exception) -> <init>
com.sonicbase.server.SchemaManager -> com.sonicbase.server.i:
    Logger logger -> a
    com.sonicbase.server.DatabaseServer server -> b
    java.util.concurrent.ConcurrentHashMap autoIncrementValues -> c
    27:54:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    57:96:java.util.List createIndex(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[]) -> a
    100:105:void addAllIndices(java.lang.String) -> a
    109:112:void doCreateIndex(java.lang.String,TableSchema,java.lang.String,java.lang.String[]) -> a
    116:147:ComObject createDatabase(ComObject,boolean) -> a
    152:172:ComObject createDatabaseSlave(ComObject,boolean) -> b
    176:211:ComObject dropTable(ComObject,boolean) -> c
    216:247:ComObject createTableSlave(ComObject,boolean) -> d
    252:352:ComObject createTable(ComObject,boolean) -> e
    359:384:ComObject dropColumn(ComObject) -> a
    391:416:ComObject addColumn(ComObject) -> b
    421:448:ComObject createIndexSlave(ComObject) -> c
    453:576:ComObject createIndex(ComObject,boolean) -> f
    582:604:ComObject dropIndexSlave(ComObject) -> d
    609:669:ComObject dropIndex(ComObject) -> e
com.sonicbase.server.SchemaManager$AutoIncrementValue -> com.sonicbase.server.i$a:
    java.lang.Object mutex -> b
    java.lang.Object currValue -> c
    DataType$Type dataType -> a
    33:40:void <init>(DataType$Type) -> <init>
    43:44:void setInitialValue() -> a
    47:50:java.lang.Object increment() -> b
com.sonicbase.server.SnapshotManager -> com.sonicbase.server.j:
    int SNAPSHOT_PARTITION_COUNT -> a
    java.lang.String SNAPSHOT_STR -> d
    java.lang.String INDEX_STR -> e
    java.lang.String RATE_STR -> f
    java.lang.String DURATION_STR -> g
    Logger logger -> b
    com.sonicbase.server.DatabaseServer server -> h
    long lastSnapshot -> i
    boolean enableSnapshot -> j
    boolean isRecovering -> k
    long totalBytes -> l
    java.util.concurrent.atomic.AtomicLong finishedBytes -> m
    int totalFileCount -> n
    int finishedFileCount -> o
    java.lang.Exception errorRecovering -> p
    java.lang.Thread snapshotThread -> c
    37:288:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    47:70:int getHighestCommittedSnapshotVersion(java.io.File,Logger) -> a
    74:96:int getHighestUnCommittedSnapshotVersion(java.io.File) -> a
    106:109:double getPercentRecoverComplete() -> a
    113:113:java.lang.Exception getErrorRecovering() -> b
    118:279:void recoverFromSnapshot(java.lang.String) -> a
    282:282:java.io.File getSnapshotReplicaDir() -> g
    285:285:java.lang.String getSnapshotRootDir(java.lang.String) -> c
    290:324:void runSnapshotLoop() -> c
    328:353:void deleteRecord(java.lang.String,java.lang.String,TableSchema,IndexSchema,java.lang.Object[],byte[],int[]) -> a
    356:514:void runSnapshot(java.lang.String) -> b
    517:535:void deleteOldSnapshots(java.lang.String) -> d
    538:550:void enableSnapshot(boolean) -> a
    553:561:void deleteSnapshots() -> d
    565:585:void backupFileSystemSchema(java.lang.String,java.lang.String) -> a
    589:601:void backupFileSystem(java.lang.String,java.lang.String) -> b
    605:620:void restoreFileSystem(java.lang.String,java.lang.String) -> c
    623:634:void backupAWSSchema(java.lang.String,java.lang.String,java.lang.String) -> a
    637:642:void backupAWS(java.lang.String,java.lang.String,java.lang.String) -> b
    646:658:void restoreAWS(java.lang.String,java.lang.String,java.lang.String) -> c
    661:663:void getFilesForCurrentSnapshot(java.util.List) -> a
    666:677:void getFilesFromDirectory(java.io.File,java.util.List) -> a
    681:687:void deleteTempDirs() -> e
    690:703:void doDeleteTempDirs(java.io.File) -> b
    706:706:boolean isRecovering() -> f
    26:26:java.util.concurrent.atomic.AtomicLong access$000(com.sonicbase.server.SnapshotManager) -> a
    26:26:com.sonicbase.server.DatabaseServer access$100(com.sonicbase.server.SnapshotManager) -> b
    26:26:long access$200(com.sonicbase.server.SnapshotManager) -> c
    26:26:boolean access$300(com.sonicbase.server.SnapshotManager) -> d
com.sonicbase.server.SnapshotManager$1 -> com.sonicbase.server.j$1:
    java.io.File val$indexFile -> a
    IndexSchema val$indexSchema -> b
    TableSchema val$tableSchema -> c
    com.sonicbase.index.Index val$index -> d
    java.util.concurrent.atomic.AtomicLong val$recoveredCount -> e
    int val$currOffset -> f
    java.util.concurrent.atomic.AtomicLong val$lastLogged -> g
    java.lang.String val$tableName -> h
    java.lang.String val$indexName -> i
    long val$indexBegin -> j
    com.sonicbase.server.SnapshotManager this$0 -> k
    196:196:void <init>(com.sonicbase.server.SnapshotManager,java.io.File,IndexSchema,TableSchema,com.sonicbase.index.Index,java.util.concurrent.atomic.AtomicLong,int,java.util.concurrent.atomic.AtomicLong,java.lang.String,java.lang.String,long) -> <init>
    199:243:java.lang.Boolean call() -> a
    196:196:java.lang.Object call() -> call
com.sonicbase.server.SnapshotManager$2 -> com.sonicbase.server.j$2:
    com.sonicbase.server.SnapshotManager this$0 -> a
    290:290:void <init>(com.sonicbase.server.SnapshotManager) -> <init>
    295:321:void run() -> run
com.sonicbase.server.SnapshotManager$3 -> com.sonicbase.server.j$3:
    java.util.concurrent.atomic.AtomicLong val$countSaved -> a
    com.sonicbase.index.Index val$index -> b
    boolean val$isPrimaryKey -> c
    java.io.DataOutputStream[] val$outStreams -> d
    java.util.Map$Entry val$tableEntry -> e
    java.util.Map$Entry val$indexEntry -> f
    java.lang.Long val$deleteIfOlder -> g
    java.lang.String val$dbName -> h
    int[] val$fieldOffsets -> i
    java.util.concurrent.atomic.AtomicLong val$savedCount -> j
    java.util.concurrent.atomic.AtomicLong val$lastLogged -> k
    long val$subBegin -> l
    com.sonicbase.server.SnapshotManager this$0 -> m
    420:420:void <init>(com.sonicbase.server.SnapshotManager,java.util.concurrent.atomic.AtomicLong,com.sonicbase.index.Index,boolean,java.io.DataOutputStream[],java.util.Map$Entry,java.util.Map$Entry,java.lang.Long,java.lang.String,int[],java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong,long) -> <init>
    423:477:boolean visit(java.lang.Object[],java.lang.Object) -> a
com.sonicbase.server.SnapshotManager$ByteCounterStream -> com.sonicbase.server.j$a:
    java.io.FileInputStream stream -> b
    java.util.concurrent.atomic.AtomicLong finishedBytes -> c
    com.sonicbase.server.SnapshotManager this$0 -> a
    713:716:void <init>(com.sonicbase.server.SnapshotManager,java.util.concurrent.atomic.AtomicLong,java.io.FileInputStream) -> <init>
    719:720:void reset() -> reset
    723:723:boolean markSupported() -> markSupported
    727:728:void mark(int) -> mark
    731:731:long skip(long) -> skip
    735:735:int available() -> available
    739:740:void close() -> close
    743:747:int read(byte[]) -> read
    751:755:int read(byte[],int,int) -> read
    760:764:int read() -> read
com.sonicbase.server.StreamManager -> com.sonicbase.server.k:
    Logger logger -> a
    com.sonicbase.server.DatabaseServer server -> b
    java.util.concurrent.ConcurrentHashMap connections -> c
    java.util.List threads -> d
    boolean shutdown -> e
    boolean pauseStreaming -> f
    30:80:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    83:147:ComObject startStreaming(ComObject) -> a
    151:233:void processMessages(com.sonicbase.queue.StreamConsumer,java.util.List) -> a
    236:246:ComObject stopStreaming(ComObject) -> b
    250:257:void initConnection(java.lang.String) -> a
    261:275:java.sql.Connection doInitConnection(java.lang.String) -> b
    281:576:java.lang.Object[] getCurrRecordFromJson(com.fasterxml.jackson.databind.node.ObjectNode,java.util.List) -> a
    26:26:boolean access$002(com.sonicbase.server.StreamManager,boolean) -> a
    26:26:Logger access$100(com.sonicbase.server.StreamManager) -> a
    26:26:com.sonicbase.server.DatabaseServer access$200(com.sonicbase.server.StreamManager) -> b
    26:26:boolean access$000(com.sonicbase.server.StreamManager) -> c
    26:26:void access$300(com.sonicbase.server.StreamManager,com.sonicbase.queue.StreamConsumer,java.util.List) -> a
com.sonicbase.server.StreamManager$1 -> com.sonicbase.server.k$1:
    com.sonicbase.server.DatabaseServer val$server -> a
    com.sonicbase.server.StreamManager this$0 -> b
    41:41:void <init>(com.sonicbase.server.StreamManager,com.sonicbase.server.DatabaseServer) -> <init>
    46:77:void run() -> run
com.sonicbase.server.StreamManager$2 -> com.sonicbase.server.k$2:
    java.lang.String val$className -> a
    com.fasterxml.jackson.databind.node.ObjectNode val$config -> b
    com.fasterxml.jackson.databind.node.ObjectNode val$stream -> c
    com.sonicbase.server.StreamManager this$0 -> d
    107:107:void <init>(com.sonicbase.server.StreamManager,java.lang.String,com.fasterxml.jackson.databind.node.ObjectNode,com.fasterxml.jackson.databind.node.ObjectNode) -> <init>
    111:135:void run() -> run
com.sonicbase.server.StreamManager$3 -> com.sonicbase.server.k$3:
    int[] $SwitchMap$com$sonicbase$schema$DataType$Type -> a
    297:297:void <clinit>() -> <clinit>
com.sonicbase.server.TransactionManager -> com.sonicbase.server.l:
    com.sonicbase.server.DatabaseServer server -> a
    java.util.concurrent.ConcurrentHashMap transactions -> b
    java.util.concurrent.ConcurrentHashMap locks -> c
    33:39:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    42:42:java.util.concurrent.ConcurrentHashMap getTransactions() -> a
    46:46:java.util.concurrent.ConcurrentHashMap getLocks(java.lang.String) -> a
    50:50:com.sonicbase.server.TransactionManager$Transaction getTransaction(long) -> a
    131:147:ComObject abortTransaction(java.lang.String,byte[]) -> a
    151:185:void deleteLock(java.lang.String,java.lang.String,java.lang.String,long,TableSchema,java.lang.Object[]) -> a
    193:266:void preHandleTransaction(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,long,java.lang.Object[],java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicBoolean) -> a
com.sonicbase.server.TransactionManager$1 -> com.sonicbase.server.l$1:
    java.util.Comparator[] val$comparators -> a
    com.sonicbase.server.TransactionManager this$0 -> b
    208:208:void <init>(com.sonicbase.server.TransactionManager,java.util.Comparator[]) -> <init>
    211:223:int compare(java.lang.Object[],java.lang.Object[]) -> a
    208:208:int compare(java.lang.Object,java.lang.Object) -> compare
com.sonicbase.server.TransactionManager$Operation -> com.sonicbase.server.l$a:
    com.sonicbase.server.TransactionManager$OperationType type -> a
    byte[] body -> b
    java.lang.String command -> c
    boolean replayed -> d
    79:84:void <init>(com.sonicbase.server.TransactionManager$OperationType,java.lang.String,byte[],boolean) -> <init>
    87:87:com.sonicbase.server.TransactionManager$OperationType getType() -> a
    91:91:java.lang.String getCommand() -> b
    95:95:byte[] getBody() -> c
    99:99:boolean getReplayed() -> d
com.sonicbase.server.TransactionManager$OperationType -> com.sonicbase.server.l$b:
    com.sonicbase.server.TransactionManager$OperationType batchInsertWithRecord -> a
    com.sonicbase.server.TransactionManager$OperationType insertWithRecord -> b
    com.sonicbase.server.TransactionManager$OperationType batchInsert -> c
    com.sonicbase.server.TransactionManager$OperationType insert -> d
    com.sonicbase.server.TransactionManager$OperationType update -> e
    com.sonicbase.server.TransactionManager$OperationType deleteRecord -> f
    com.sonicbase.server.TransactionManager$OperationType deleteIndexEntry -> g
    com.sonicbase.server.TransactionManager$OperationType deleteEntryByKey -> h
    com.sonicbase.server.TransactionManager$OperationType[] $VALUES -> i
    21:21:com.sonicbase.server.TransactionManager$OperationType[] values() -> a
    21:21:com.sonicbase.server.TransactionManager$OperationType valueOf(java.lang.String) -> a
    21:21:void <init>(java.lang.String,int) -> <init>
    21:29:void <clinit>() -> <clinit>
com.sonicbase.server.TransactionManager$RecordLock -> com.sonicbase.server.l$c:
    com.sonicbase.server.TransactionManager$Transaction transaction -> a
    java.lang.String tableName -> b
    java.lang.String indexName -> c
    java.lang.Object[] primaryKey -> d
    int lockCount -> e
    53:53:void <init>() -> <init>
    61:61:java.lang.String getTableName() -> a
    65:65:java.lang.String getIndexName() -> b
    69:69:java.lang.Object[] getPrimaryKey() -> c
    53:53:java.lang.String access$100(com.sonicbase.server.TransactionManager$RecordLock) -> a
    53:53:java.lang.Object[] access$200(com.sonicbase.server.TransactionManager$RecordLock) -> b
    53:53:int access$300(com.sonicbase.server.TransactionManager$RecordLock) -> c
    53:53:int access$302(com.sonicbase.server.TransactionManager$RecordLock,int) -> a
    53:53:com.sonicbase.server.TransactionManager$Transaction access$402(com.sonicbase.server.TransactionManager$RecordLock,com.sonicbase.server.TransactionManager$Transaction) -> a
    53:53:java.lang.String access$102(com.sonicbase.server.TransactionManager$RecordLock,java.lang.String) -> a
    53:53:java.lang.String access$502(com.sonicbase.server.TransactionManager$RecordLock,java.lang.String) -> b
    53:53:java.lang.Object[] access$202(com.sonicbase.server.TransactionManager$RecordLock,java.lang.Object[]) -> a
    53:53:com.sonicbase.server.TransactionManager$Transaction access$400(com.sonicbase.server.TransactionManager$RecordLock) -> d
    53:53:int access$308(com.sonicbase.server.TransactionManager$RecordLock) -> e
com.sonicbase.server.TransactionManager$Transaction -> com.sonicbase.server.l$d:
    long id -> a
    java.util.List locks -> b
    java.util.concurrent.ConcurrentHashMap records -> c
    java.util.List operations -> d
    105:111:void <init>(long) -> <init>
    114:114:java.util.concurrent.ConcurrentHashMap getRecords() -> a
    118:119:void addOperation(com.sonicbase.server.TransactionManager$OperationType,java.lang.String,byte[],boolean) -> a
    122:122:java.util.List getOperations() -> b
    126:126:java.util.List getLocks() -> c
    103:103:java.util.List access$000(com.sonicbase.server.TransactionManager$Transaction) -> a
    103:103:long access$600(com.sonicbase.server.TransactionManager$Transaction) -> b
com.sonicbase.server.UpdateManager -> com.sonicbase.server.m:
    Logger logger -> a
    java.lang.String CURR_VER_STR -> b
    com.sonicbase.server.DatabaseServer server -> c
    java.util.List producers -> d
    int maxPublishBatchSize -> e
    java.util.concurrent.atomic.AtomicLong batchCount -> f
    java.util.concurrent.atomic.AtomicLong batchEntryCount -> g
    java.util.concurrent.atomic.AtomicLong lastBatchLogReset -> h
    java.util.concurrent.atomic.AtomicLong batchDuration -> i
    java.util.concurrent.atomic.AtomicLong insertCount -> j
    java.util.concurrent.atomic.AtomicLong lastReset -> k
    boolean haveLogged -> l
    java.lang.ThreadLocal threadLocalIsBatchRequest -> m
    java.lang.ThreadLocal threadLocalMessageRequests -> n
    java.util.concurrent.ArrayBlockingQueue publishQueue -> o
    35:1378:void <init>(com.sonicbase.server.DatabaseServer) -> <init>
    57:89:void initMessageQueueProducers() -> b
    93:107:ComObject deleteIndexEntry(ComObject,boolean) -> a
    113:231:void doDeleteIndexEntry(ComObject,boolean,long,long,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicLong,boolean) -> b
    238:242:ComObject populateIndex(ComObject,boolean) -> b
    246:345:ComObject doPopulateIndex(ComObject) -> a
    349:360:ComObject deleteIndexEntryByKey(ComObject,boolean) -> c
    366:404:ComObject doDeleteIndexEntryByKey(ComObject,boolean,long,long,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicLong,boolean) -> a
    409:439:ComObject batchInsertIndexEntryByKey(ComObject,boolean) -> d
    443:455:ComObject insertIndexEntryByKey(ComObject,boolean) -> e
    463:551:ComObject doInsertIndexEntryByKey(ComObject,ComObject,boolean,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicLong,boolean) -> a
    584:718:ComObject batchInsertIndexEntryByKeyWithRecord(ComObject,boolean) -> f
    722:732:void throttle() -> c
    769:789:ComObject insertIndexEntryByKeyWithRecord(ComObject,boolean) -> g
    797:912:ComObject doInsertIndexEntryByKeyWithRecord(ComObject,ComObject,long,long,short,boolean,long,boolean,boolean) -> a
    917:934:ComObject rollback(ComObject,boolean) -> h
    938:1019:ComObject commit(ComObject,boolean) -> i
    1024:1032:ComObject updateRecord(ComObject,boolean) -> j
    1038:1123:ComObject doUpdateRecord(ComObject,boolean,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicLong,boolean) -> a
    1129:1130:void doInsertKey(java.lang.String,byte[],java.lang.Object[],com.sonicbase.index.Index,java.lang.String,java.lang.String,boolean) -> a
    1136:1141:void doInsertKey(java.lang.Object[],byte[],java.lang.String,com.sonicbase.index.Index,IndexSchema) -> a
    1149:1212:void doInsertKeys(java.lang.String,java.util.List,com.sonicbase.index.Index,java.lang.String,IndexSchema,boolean) -> a
    1218:1271:void doActualInsertKey(java.lang.Object[],byte[],java.lang.String,com.sonicbase.index.Index,IndexSchema) -> b
    1288:1360:void doActualInsertKeyWithRecord(java.lang.String,byte[],java.lang.Object[],com.sonicbase.index.Index,java.lang.String,java.lang.String,boolean) -> b
    1381:1465:void initPublisher() -> a
    1468:1494:void publishBatch() -> d
    1497:1521:void doPublishBatch(java.util.List) -> a
    1525:1559:void publishInsertOrUpdate(java.lang.String,java.lang.String,byte[],com.sonicbase.server.UpdateManager$UpdateType) -> a
    1562:1637:void getJsonFromRecord(java.lang.StringBuilder,TableSchema,Record) -> a
    1641:1657:ComObject deleteRecord(ComObject,boolean) -> k
    1663:1716:void doDeleteRecord(ComObject,boolean,long,long,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicLong,boolean) -> c
    1719:1766:ComObject truncateTable(ComObject,boolean) -> l
    1793:1897:void doRemoveIndexEntryByKey(java.lang.String,TableSchema,java.lang.String,java.lang.Object[],java.lang.String,java.lang.Object[],long,long) -> a
    29:29:void access$600(com.sonicbase.server.UpdateManager,java.lang.String,byte[],java.lang.Object[],com.sonicbase.index.Index,java.lang.String,java.lang.String,boolean) -> a
    29:29:void access$700(com.sonicbase.server.UpdateManager,java.lang.Object[],byte[],java.lang.String,com.sonicbase.index.Index,IndexSchema) -> a
    29:29:java.util.concurrent.ArrayBlockingQueue access$1200(com.sonicbase.server.UpdateManager) -> a
    29:29:com.sonicbase.server.DatabaseServer access$1300(com.sonicbase.server.UpdateManager) -> b
    29:29:java.util.List access$1400(com.sonicbase.server.UpdateManager) -> c
    29:29:void access$1500(com.sonicbase.server.UpdateManager,java.lang.StringBuilder,TableSchema,Record) -> a
    29:29:int access$1600(com.sonicbase.server.UpdateManager) -> d
    29:29:Logger access$1700(com.sonicbase.server.UpdateManager) -> e
com.sonicbase.server.UpdateManager$1 -> com.sonicbase.server.m$1:
    java.util.List val$currRequests -> a
    ComObject val$cobj -> b
    long val$transactionId -> c
    boolean val$isExplicitTrans -> d
    com.sonicbase.server.UpdateManager this$0 -> e
    647:647:void <init>(com.sonicbase.server.UpdateManager,java.util.List,ComObject,long,boolean) -> <init>
    650:654:java.lang.Object call() -> call
com.sonicbase.server.UpdateManager$2 -> com.sonicbase.server.m$2:
    com.sonicbase.server.PartitionManager$MoveRequest val$moveRequest -> a
    java.lang.String val$dbName -> b
    com.sonicbase.index.Index val$index -> c
    java.lang.String val$tableName -> d
    IndexSchema val$indexSchema -> e
    com.sonicbase.server.UpdateManager this$0 -> f
    1153:1153:void <init>(com.sonicbase.server.UpdateManager,com.sonicbase.server.PartitionManager$MoveRequest,java.lang.String,com.sonicbase.index.Index,java.lang.String,IndexSchema) -> <init>
    1156:1160:java.lang.Object call() -> call
com.sonicbase.server.UpdateManager$3 -> com.sonicbase.server.m$3:
    com.sonicbase.server.PartitionManager$MoveRequest val$moveRequest -> a
    java.lang.String val$tableName -> b
    com.sonicbase.index.Index val$index -> c
    IndexSchema val$indexSchema -> d
    com.sonicbase.server.UpdateManager this$0 -> e
    1181:1181:void <init>(com.sonicbase.server.UpdateManager,com.sonicbase.server.PartitionManager$MoveRequest,java.lang.String,com.sonicbase.index.Index,IndexSchema) -> <init>
    1184:1188:java.lang.Object call() -> call
com.sonicbase.server.UpdateManager$4 -> com.sonicbase.server.m$4:
    com.sonicbase.server.UpdateManager this$0 -> a
    1381:1381:void <init>(com.sonicbase.server.UpdateManager) -> <init>
    1384:1460:void run() -> run
com.sonicbase.server.UpdateManager$5 -> com.sonicbase.server.m$5:
    int[] $SwitchMap$com$sonicbase$server$TransactionManager$OperationType -> a
    int[] $SwitchMap$com$sonicbase$schema$DataType$Type -> b
    958:1582:void <clinit>() -> <clinit>
com.sonicbase.server.UpdateManager$InsertRequest -> com.sonicbase.server.m$a:
    ComObject innerObj -> a
    long sequence0 -> b
    long sequence1 -> c
    short sequence2 -> d
    boolean replayedCommand -> e
    boolean isCommitting -> f
    564:571:void <init>(ComObject,long,long,short,boolean,boolean) -> <init>
    555:555:ComObject access$000(com.sonicbase.server.UpdateManager$InsertRequest) -> a
    555:555:long access$100(com.sonicbase.server.UpdateManager$InsertRequest) -> b
    555:555:long access$200(com.sonicbase.server.UpdateManager$InsertRequest) -> c
    555:555:short access$300(com.sonicbase.server.UpdateManager$InsertRequest) -> d
    555:555:boolean access$400(com.sonicbase.server.UpdateManager$InsertRequest) -> e
    555:555:boolean access$500(com.sonicbase.server.UpdateManager$InsertRequest) -> f
com.sonicbase.server.UpdateManager$MessageRequest -> com.sonicbase.server.m$b:
    java.lang.String dbName -> b
    java.lang.String tableName -> c
    byte[] recordBytes -> d
    com.sonicbase.server.UpdateManager$UpdateType updateType -> e
    com.sonicbase.server.UpdateManager this$0 -> a
    1368:1368:void <init>(com.sonicbase.server.UpdateManager) -> <init>
    1368:1368:java.lang.String access$802(com.sonicbase.server.UpdateManager$MessageRequest,java.lang.String) -> a
    1368:1368:java.lang.String access$902(com.sonicbase.server.UpdateManager$MessageRequest,java.lang.String) -> b
    1368:1368:byte[] access$1002(com.sonicbase.server.UpdateManager$MessageRequest,byte[]) -> a
    1368:1368:com.sonicbase.server.UpdateManager$UpdateType access$1102(com.sonicbase.server.UpdateManager$MessageRequest,com.sonicbase.server.UpdateManager$UpdateType) -> a
    1368:1368:java.lang.String access$800(com.sonicbase.server.UpdateManager$MessageRequest) -> a
    1368:1368:java.lang.String access$900(com.sonicbase.server.UpdateManager$MessageRequest) -> b
    1368:1368:com.sonicbase.server.UpdateManager$UpdateType access$1100(com.sonicbase.server.UpdateManager$MessageRequest) -> c
    1368:1368:byte[] access$1000(com.sonicbase.server.UpdateManager$MessageRequest) -> d
com.sonicbase.server.UpdateManager$Producer -> com.sonicbase.server.m$c:
    com.sonicbase.queue.StreamProducer producer -> a
    int maxBatchSize -> b
    com.sonicbase.server.UpdateManager this$0 -> c
    50:53:void <init>(com.sonicbase.server.UpdateManager,com.sonicbase.queue.StreamProducer,java.lang.Integer) -> <init>
com.sonicbase.server.UpdateManager$UpdateType -> com.sonicbase.server.m$d:
    com.sonicbase.server.UpdateManager$UpdateType insert -> a
    com.sonicbase.server.UpdateManager$UpdateType update -> b
    com.sonicbase.server.UpdateManager$UpdateType delete -> c
    com.sonicbase.server.UpdateManager$UpdateType[] $VALUES -> d
    1362:1362:com.sonicbase.server.UpdateManager$UpdateType[] values() -> a
    1362:1362:com.sonicbase.server.UpdateManager$UpdateType valueOf(java.lang.String) -> a
    1362:1362:void <init>(java.lang.String,int) -> <init>
    1362:1365:void <clinit>() -> <clinit>
com.sonicbase.test.TestAWSBackup -> com.sonicbase.e.a:
    java.sql.Connection conn -> c
    int recordCount -> d
    java.util.List ids -> a
    DatabaseClient client -> b
    33:33:void <init>() -> <init>
    43:324:void main(java.lang.String[]) -> a
    327:330:void assertEquals(int,int) -> a
    333:336:void assertEquals(long,long) -> a
    340:387:void verifyData() -> a
    390:393:void assertTrue(boolean) -> a
    36:39:void <clinit>() -> <clinit>
